var searchIndex = {};
searchIndex['codelauf'] = {"items":[[0,"","codelauf","",null,null],[0,"db","","",null,null],[3,"Db","codelauf::db","",null,null],[4,"DbError","","",null,null],[13,"EnumParseError","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"dberror"}],"output":{"name":"dberror"}}],[11,"fmt","","",0,{"inputs":[{"name":"dberror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","",1,{"inputs":[{"name":"db"},{"name":"path"}],"output":{"name":"sqliteresult"}}],[11,"open_in_memory","","",1,{"inputs":[{"name":"db"}],"output":{"name":"sqliteresult"}}],[11,"migrate","","",1,{"inputs":[{"name":"db"}],"output":null}],[11,"find_repo_by_remote","","",1,{"inputs":[{"name":"db"},{"name":"string"}],"output":{"name":"reporesult"}}],[11,"find_repo","","",1,{"inputs":[{"name":"db"},{"name":"str"}],"output":{"name":"reporesult"}}],[11,"update_repo","","",1,{"inputs":[{"name":"db"},{"name":"repository"}],"output":{"name":"reporesult"}}],[11,"insert_repo","","",1,{"inputs":[{"name":"db"},{"name":"repository"}],"output":{"name":"reporesult"}}],[11,"find_branch","","",1,{"inputs":[{"name":"db"},{"name":"str"},{"name":"str"}],"output":{"name":"reporesult"}}],[11,"update_branch","","",1,{"inputs":[{"name":"db"},{"name":"repobranch"}],"output":{"name":"reporesult"}}],[11,"insert_branch","","",1,{"inputs":[{"name":"db"},{"name":"repobranch"}],"output":{"name":"reporesult"}}],[11,"drop","","",1,{"inputs":[{"name":"db"}],"output":null}],[0,"config","codelauf","",null,null],[3,"Config","codelauf::config","",null,null],[12,"data_dir","","",2,null],[12,"zookeeper","","",2,null],[12,"elasticsearch","","",2,null],[12,"index_config","","",2,null],[12,"sync_config","","",2,null],[12,"repo_location","","",2,null],[3,"IndexConfig","","",null,null],[3,"SyncConfig","","",null,null],[3,"RepoLocation","","",null,null],[12,"remote","","",3,null],[12,"branches","","",3,null],[12,"dir","","",3,null],[5,"parse_args","","",null,{"inputs":[],"output":{"name":"argmatches"}}],[5,"parse_config","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"read_config","","",null,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[5,"get_env","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"apply_config","","",null,{"inputs":[{"name":"config"},{"name":"argmatches"}],"output":{"name":"config"}}],[5,"get_config_str","","",null,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_config_str_env","","",null,{"inputs":[{"name":"argmatches"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_config","","",null,{"inputs":[{"name":"argmatches"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"fmt","","",2,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"new_from_table","","",2,{"inputs":[{"name":"config"},{"name":"table"}],"output":{"name":"config"}}],[11,"clone","","",4,{"inputs":[{"name":"indexconfig"}],"output":{"name":"indexconfig"}}],[11,"fmt","","",4,{"inputs":[{"name":"indexconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"indexconfig"}],"output":{"name":"indexconfig"}}],[11,"new_from_table","","",4,{"inputs":[{"name":"indexconfig"},{"name":"table"}],"output":{"name":"indexconfig"}}],[11,"clone","","",5,{"inputs":[{"name":"syncconfig"}],"output":{"name":"syncconfig"}}],[11,"fmt","","",5,{"inputs":[{"name":"syncconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"syncconfig"}],"output":{"name":"syncconfig"}}],[11,"new_from_table","","",5,{"inputs":[{"name":"syncconfig"},{"name":"table"}],"output":{"name":"syncconfig"}}],[11,"clone","","",3,{"inputs":[{"name":"repolocation"}],"output":{"name":"repolocation"}}],[11,"fmt","","",3,{"inputs":[{"name":"repolocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"repolocation"}],"output":{"name":"repolocation"}}],[11,"get_remote","","",3,{"inputs":[{"name":"repolocation"}],"output":{"name":"reporesult"}}],[11,"new_from_args","","",3,{"inputs":[{"name":"repolocation"},{"name":"argmatches"}],"output":{"name":"option"}}],[0,"commands","codelauf","",null,null],[5,"init","codelauf::commands","",null,{"inputs":[{"name":"config"}],"output":{"name":"reporesult"}}],[5,"fetch_repo","","open db\ncalc repo dir location\ncreate basic db entry if it doesn't exist\nclone project if it isn't already\notherwise:\n  check remote url matches\n  fetch branch\n  checkout branch\nupdate db as we go",null,{"inputs":[{"name":"config"}],"output":{"name":"reporesult"}}],[5,"index_repo","","",null,{"inputs":[{"name":"config"}],"output":null}],[5,"run_sync","","",null,{"inputs":[{"name":"config"}],"output":null}],[0,"result","codelauf","",null,null],[4,"RepoError","codelauf::result","",null,null],[13,"InvalidArgs","","",6,null],[13,"EnumParseError","","",6,null],[13,"DbError","","",6,null],[13,"SqlError","","",6,null],[13,"NoRemote","","",6,null],[13,"NotCloned","","",6,null],[13,"PathUnicodeError","","",6,null],[13,"StringUnicodeError","","",6,null],[13,"GitError","","",6,null],[13,"InvalidState","","",6,null],[6,"RepoResult","","",null,null],[11,"fmt","","",6,{"inputs":[{"name":"repoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"repoerror"},{"name":"sqliteerror"}],"output":{"name":"repoerror"}}],[11,"from","","",6,{"inputs":[{"name":"repoerror"},{"name":"dberror"}],"output":{"name":"repoerror"}}],[11,"from","","",6,{"inputs":[{"name":"repoerror"},{"name":"error"}],"output":{"name":"repoerror"}}],[0,"repo","codelauf","",null,null],[3,"Branch","codelauf::repo","",null,null],[12,"name","","",7,null],[12,"indexed_commit","","",7,null],[3,"Repo","","",null,null],[12,"id","","",8,null],[12,"path","","",8,null],[12,"uri","","",8,null],[12,"branches","","",8,null],[12,"sync_state","","",8,null],[12,"git_repo","","",8,null],[4,"SyncState","","",null,null],[13,"NotCloned","","",9,null],[13,"Cloned","","",9,null],[13,"Corrupted","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"syncstate"}],"output":{"name":"syncstate"}}],[11,"fmt","","",9,{"inputs":[{"name":"syncstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"syncstate"},{"name":"str"}],"output":{"name":"result"}}],[11,"to_string","","",9,{"inputs":[{"name":"syncstate"}],"output":{"name":"string"}}],[11,"clone","","",7,{"inputs":[{"name":"branch"}],"output":{"name":"branch"}}],[11,"fmt","","",7,{"inputs":[{"name":"branch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[{"name":"branch"},{"name":"string"},{"name":"option"}],"output":{"name":"branch"}}],[11,"clone","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"repo"}}],[11,"fmt","","",8,{"inputs":[{"name":"repo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_for_config","","",8,{"inputs":[{"name":"repo"},{"name":"config"}],"output":{"name":"reporesult"}}],[11,"new","","",8,{"inputs":[{"name":"repo"},{"name":"pathbuf"},{"name":"string"},{"name":"vec"},{"name":"syncstate"}],"output":{"name":"repo"}}],[11,"is_cloned","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"bool"}}],[11,"dot_git_path","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"pathbuf"}}],[11,"dot_git_exists","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"bool"}}],[11,"find_in_db","","",8,{"inputs":[{"name":"repo"},{"name":"db"}],"output":{"name":"reporesult"}}],[11,"create_in_db","","",8,{"inputs":[{"name":"repo"},{"name":"db"}],"output":{"name":"reporesult"}}],[11,"find_or_create_in_db","","",8,{"inputs":[{"name":"repo"},{"name":"db"}],"output":{"name":"reporesult"}}],[11,"update_repo_in_db","","",8,{"inputs":[{"name":"repo"},{"name":"db"}],"output":{"name":"reporesult"}}],[11,"probe_fs","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"clone_repo","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"open_repo","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"fetch_repo","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"find_branch","","",8,{"inputs":[{"name":"repo"},{"name":"repository"},{"name":"str"}],"output":{"name":"reporesult"}}],[11,"checkout_branch","","",8,{"inputs":[{"name":"repo"},{"name":"str"}],"output":{"name":"reporesult"}}],[11,"repoint_branch_to_origin","","like git update-ref refs/heads/master refs/remotes/origin/master",8,{"inputs":[{"name":"repo"},{"name":"str"}],"output":{"name":"reporesult"}}],[11,"pull_repo","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"revwalk_add_branch","","",8,{"inputs":[{"name":"repo"},{"name":"repository"},{"name":"revwalk"},{"name":"str"},{"name":"option"}],"output":{"name":"reporesult"}}],[11,"revwalk","","walks commits from current head to merge-base of self.commit if any",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"git_repo","","",8,{"inputs":[{"name":"repo"}],"output":{"name":"reporesult"}}],[11,"set_state","","",8,{"inputs":[{"name":"repo"},{"name":"syncstate"}],"output":null}],[11,"get_repo_path","","",8,{"inputs":[{"name":"repo"},{"name":"config"},{"name":"repolocation"}],"output":{"name":"reporesult"}}],[11,"id","","",8,{"inputs":[{"name":"repo"},{"name":"str"}],"output":{"name":"string"}}],[0,"models","codelauf","",null,null],[0,"repository","codelauf::models","",null,null],[3,"Repository","codelauf::models::repository","",null,null],[12,"id","","",10,null],[12,"uri","","",10,null],[12,"path","","",10,null],[12,"sync_state","","",10,null],[12,"added_datetime","","",10,null],[12,"fetched_datetime","","",10,null],[12,"indexed_datetime","","",10,null],[3,"CreateRepositoriesTable","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"repository"}],"output":{"name":"repository"}}],[11,"fmt","","",10,{"inputs":[{"name":"repository"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_from_remote","","",10,{"inputs":[{"name":"repository"},{"name":"string"},{"name":"string"},{"name":"pathbuf"}],"output":{"name":"repository"}}],[11,"new_from_sql_row","","",10,{"inputs":[{"name":"repository"},{"name":"sqliterow"}],"output":{"name":"reporesult"}}],[11,"version","","",11,{"inputs":[{"name":"createrepositoriestable"}],"output":{"name":"version"}}],[11,"description","","",11,{"inputs":[{"name":"createrepositoriestable"}],"output":{"name":"str"}}],[11,"up","","",11,{"inputs":[{"name":"createrepositoriestable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"down","","",11,{"inputs":[{"name":"createrepositoriestable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[0,"repo_branch","codelauf::models","",null,null],[3,"RepoBranch","codelauf::models::repo_branch","",null,null],[12,"repo_id","","",12,null],[12,"name","","",12,null],[12,"indexed_commit_id","","",12,null],[3,"CreateBranchesTable","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"repobranch"}],"output":{"name":"repobranch"}}],[11,"fmt","","",12,{"inputs":[{"name":"repobranch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[{"name":"repobranch"},{"name":"string"},{"name":"string"},{"name":"option"}],"output":{"name":"repobranch"}}],[11,"new_from_sql_row","","",12,{"inputs":[{"name":"repobranch"},{"name":"sqliterow"}],"output":{"name":"reporesult"}}],[11,"version","","",13,{"inputs":[{"name":"createbranchestable"}],"output":{"name":"version"}}],[11,"description","","",13,{"inputs":[{"name":"createbranchestable"}],"output":{"name":"str"}}],[11,"up","","",13,{"inputs":[{"name":"createbranchestable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"down","","",13,{"inputs":[{"name":"createbranchestable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[0,"repo_file","codelauf::models","",null,null],[3,"RepoFile","codelauf::models::repo_file","",null,null],[12,"repo_id","","",14,null],[12,"path","","",14,null],[12,"changed_commit_id","","",14,null],[12,"indexed_commit_id","","",14,null],[3,"CreateFilesTable","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"repofile"}],"output":{"name":"repofile"}}],[11,"fmt","","",14,{"inputs":[{"name":"repofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[{"name":"repofile"},{"name":"string"},{"name":"pathbuf"},{"name":"string"},{"name":"option"}],"output":{"name":"repofile"}}],[11,"new_from_sql_row","","",14,{"inputs":[{"name":"repofile"},{"name":"sqliterow"}],"output":{"name":"reporesult"}}],[11,"version","","",15,{"inputs":[{"name":"createfilestable"}],"output":{"name":"version"}}],[11,"description","","",15,{"inputs":[{"name":"createfilestable"}],"output":{"name":"str"}}],[11,"up","","",15,{"inputs":[{"name":"createfilestable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"down","","",15,{"inputs":[{"name":"createfilestable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[0,"repo_commit","codelauf::models","",null,null],[3,"RepoCommit","codelauf::models::repo_commit","",null,null],[12,"id","","",16,null],[12,"repo_id","","",16,null],[12,"state","","",16,null],[3,"CreateCommitsTable","","",null,null],[4,"CommitState","","",null,null],[13,"Indexed","","",17,null],[13,"NotIndexed","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"commitstate"}],"output":{"name":"commitstate"}}],[11,"fmt","","",17,{"inputs":[{"name":"commitstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"commitstate"},{"name":"str"}],"output":{"name":"result"}}],[11,"to_string","","",17,{"inputs":[{"name":"commitstate"}],"output":{"name":"string"}}],[11,"clone","","",16,{"inputs":[{"name":"repocommit"}],"output":{"name":"repocommit"}}],[11,"fmt","","",16,{"inputs":[{"name":"repocommit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[{"name":"repocommit"},{"name":"string"},{"name":"string"},{"name":"commitstate"}],"output":{"name":"repocommit"}}],[11,"new_from_sql_row","","",16,{"inputs":[{"name":"repocommit"},{"name":"sqliterow"}],"output":{"name":"reporesult"}}],[11,"version","","",18,{"inputs":[{"name":"createcommitstable"}],"output":{"name":"version"}}],[11,"description","","",18,{"inputs":[{"name":"createcommitstable"}],"output":{"name":"str"}}],[11,"up","","",18,{"inputs":[{"name":"createcommitstable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"down","","",18,{"inputs":[{"name":"createcommitstable"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[0,"types","codelauf::models","",null,null],[5,"path_buf_from_bytes","codelauf::models::types","",null,null],[5,"path_buf_from_bytes_vec","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"pathbuf"}}],[5,"path_buf_to_bytes","","",null,{"inputs":[{"name":"pathbuf"}],"output":{"name":"reporesult"}}],[5,"path_buf_to_bytes_vec","","",null,{"inputs":[{"name":"pathbuf"}],"output":{"name":"reporesult"}}]],"paths":[[4,"DbError"],[3,"Db"],[3,"Config"],[3,"RepoLocation"],[3,"IndexConfig"],[3,"SyncConfig"],[4,"RepoError"],[3,"Branch"],[3,"Repo"],[4,"SyncState"],[3,"Repository"],[3,"CreateRepositoriesTable"],[3,"RepoBranch"],[3,"CreateBranchesTable"],[3,"RepoFile"],[3,"CreateFilesTable"],[3,"RepoCommit"],[4,"CommitState"],[3,"CreateCommitsTable"]]};
searchIndex['rs_es'] = {"items":[[0,"","rs_es","A client for ElasticSearch's REST API",null,null],[3,"Client","","The core of the ElasticSearch client, owns a HTTP connection.",null,null],[5,"do_req","","Process the result of an HTTP request, returning the status code and the\n`Json` result (if the result had a body) or an `EsError` if there were any\nerrors",null,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[0,"util","","Miscellaneous code used in numerous places",null,null],[8,"StrJoin","rs_es::util","A custom String-join trait as the stdlib one is currently marked as unstable.",null,null],[10,"join","","Join an iterator of things that can be referenced as strings into a\nsingle owned-string by the given joining string",0,{"inputs":[{"name":"strjoin"},{"name":"str"}],"output":{"name":"string"}}],[0,"error","rs_es","Errors and error conversion code for the `rs_es` crate",null,null],[4,"EsError","rs_es::error","Error that can occur include IO and parsing errors, as well as specific\nerrors from the ElasticSearch server and logic errors from this library",null,null],[13,"EsError","","An internal error from this library",1,null],[13,"EsServerError","","An error reported in a JSON response from the ElasticSearch server",1,null],[13,"HttpError","","Miscellaneous error from the HTTP library",1,null],[13,"IoError","","Miscellaneous IO error",1,null],[13,"JsonDecoderError","","Miscellaneous JSON decoding error",1,null],[13,"JsonEncoderError","","Miscellaneous JSON encoding error",1,null],[13,"JsonBuilderError","","Miscllenaeous JSON building error",1,null],[11,"fmt","","",1,{"inputs":[{"name":"eserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"eserror"},{"name":"error"}],"output":{"name":"eserror"}}],[11,"from","","",1,{"inputs":[{"name":"eserror"},{"name":"error"}],"output":{"name":"eserror"}}],[11,"from","","",1,{"inputs":[{"name":"eserror"},{"name":"decodererror"}],"output":{"name":"eserror"}}],[11,"from","","",1,{"inputs":[{"name":"eserror"},{"name":"encodererror"}],"output":{"name":"eserror"}}],[11,"from","","",1,{"inputs":[{"name":"eserror"},{"name":"buildererror"}],"output":{"name":"eserror"}}],[11,"from","","",1,{"inputs":[{"name":"eserror"},{"name":"response"}],"output":{"name":"eserror"}}],[11,"description","","",1,{"inputs":[{"name":"eserror"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"eserror"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"eserror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"operations","rs_es","Implementations of specific ElasticSearch operations",null,null],[3,"RefreshOperation","rs_es::operations","",null,null],[3,"ShardCountResult","","Shared struct for operations that include counts of success/failed shards.\nThis is returned within various other result structs.",null,null],[12,"total","","",2,null],[12,"successful","","",2,null],[12,"failed","","",2,null],[3,"RefreshResult","","Result of a refresh request",null,null],[12,"shards","","",3,null],[0,"common","","Features common to all operations",null,null],[3,"OptionVal","rs_es::operations::common","A newtype for the value of a URI option, this is to allow conversion traits\nto be implemented for it",null,null],[3,"Options","","Every ES operation has a set of options",null,null],[4,"VersionType","","The [`version_type` field](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-versioning)",null,null],[13,"Internal","","",4,null],[13,"External","","",4,null],[13,"ExternalGt","","",4,null],[13,"ExternalGte","","",4,null],[13,"Force","","",4,null],[4,"Consistency","","The consistency query parameter",null,null],[13,"One","","",5,null],[13,"Quorum","","",5,null],[13,"All","","",5,null],[4,"DefaultOperator","","Values for `default_operator` query parameters",null,null],[13,"And","","",6,null],[13,"Or","","",6,null],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"str"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"string"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"i32"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"i64"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"u32"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"u64"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"bool"}],"output":{"name":"optionval"}}],[11,"new","","",8,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"is_empty","","",8,{"inputs":[{"name":"options"}],"output":{"name":"bool"}}],[11,"push","","Add a value",8,{"inputs":[{"name":"options"},{"name":"str"},{"name":"o"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"options"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",4,{"inputs":[{"name":"versiontype"}],"output":{"name":"string"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"versiontype"}],"output":{"name":"optionval"}}],[11,"to_json","","",4,{"inputs":[{"name":"versiontype"}],"output":{"name":"json"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"consistency"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"defaultoperator"}],"output":{"name":"optionval"}}],[0,"bulk","rs_es::operations","Implementation of the Bulk API",null,null],[3,"ActionSource","rs_es::operations::bulk","",null,null],[3,"Action","","A bulk operation consists of one or more `Action`s.",null,null],[3,"BulkOperation","","",null,null],[3,"ActionResult","","The result of specific actions",null,null],[12,"action","","",9,null],[12,"index","","",9,null],[12,"doc_type","","",9,null],[12,"version","","",9,null],[12,"status","","",9,null],[3,"BulkResult","","The result of a bulk operation",null,null],[12,"errors","","",10,null],[12,"items","","",10,null],[12,"took","","",10,null],[4,"ActionType","","",null,null],[13,"Index","","",11,null],[13,"Create","","",11,null],[13,"Delete","","",11,null],[13,"Update","","",11,null],[11,"new","","",12,{"inputs":[{"name":"actionsource"}],"output":{"name":"actionsource"}}],[11,"with_doc","","",12,{"inputs":[{"name":"actionsource"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_upsert","","",12,{"inputs":[{"name":"actionsource"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_doc_as_upsert","","",12,{"inputs":[{"name":"actionsource"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_script","","",12,{"inputs":[{"name":"actionsource"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_params","","",12,{"inputs":[{"name":"actionsource"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lang","","",12,{"inputs":[{"name":"actionsource"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",12,{"inputs":[{"name":"actionsource"}],"output":{"name":"json"}}],[11,"from","","",11,{"inputs":[{"name":"actiontype"},{"name":"string"}],"output":{"name":"actiontype"}}],[11,"to_string","","",11,{"inputs":[{"name":"actiontype"}],"output":{"name":"string"}}],[11,"index","","An index action.",13,{"inputs":[{"name":"action"},{"name":"e"}],"output":{"name":"action"}}],[11,"create","","Create action",13,{"inputs":[{"name":"action"},{"name":"e"}],"output":{"name":"action"}}],[11,"delete","","",13,{"inputs":[{"name":"action"},{"name":"s"}],"output":{"name":"action"}}],[11,"update","","",13,{"inputs":[{"name":"action"},{"name":"s"},{"name":"actionsource"}],"output":{"name":"action"}}],[11,"with_index","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_doc_type","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_id","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version_type","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_routing","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_parent","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_timestamp","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_ttl","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_retry_on_conflict","","",13,{"inputs":[{"name":"action"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",13,{"inputs":[{"name":"action"}],"output":{"name":"json"}}],[11,"new","","",14,null],[11,"with_index","","",14,{"inputs":[{"name":"bulkoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_doc_type","","",14,{"inputs":[{"name":"bulkoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_consistency","","",14,{"inputs":[{"name":"bulkoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_refresh","","",14,{"inputs":[{"name":"bulkoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"send","","",14,{"inputs":[{"name":"bulkoperation"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"actionresult"},{"name":"json"}],"output":{"name":"actionresult"}}],[11,"from","","",10,{"inputs":[{"name":"bulkresult"},{"name":"json"}],"output":{"name":"bulkresult"}}],[0,"delete","rs_es::operations","Implementation of delete operations, both Delete-By-Query and Delete-By-Id",null,null],[3,"DeleteOperation","rs_es::operations::delete","",null,null],[3,"DeleteByQueryOperation","","",null,null],[3,"DeleteResult","","Result of a DELETE operation",null,null],[12,"found","","",15,null],[12,"index","","",15,null],[12,"doc_type","","",15,null],[12,"id","","",15,null],[12,"version","","",15,null],[3,"DeleteByQueryIndexResult","","",null,null],[12,"shards","","",16,null],[3,"DeleteByQueryResult","","The result of a Delete-by-query request",null,null],[12,"indices","","",17,null],[11,"new","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"client"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"deleteoperation"}}],[11,"with_version","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version_type","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_routing","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_parent","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_consistency","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_refresh","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_timeout","","",18,{"inputs":[{"name":"deleteoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"send","","",18,{"inputs":[{"name":"deleteoperation"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"client"}],"output":{"name":"deletebyqueryoperation"}}],[11,"with_indexes","","",19,null],[11,"with_doc_types","","",19,null],[11,"with_query_string","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"string"}],"output":{"name":"self"}}],[11,"with_query","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"query"}],"output":{"name":"self"}}],[11,"with_df","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_default_operator","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_routing","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_consistency","","",19,{"inputs":[{"name":"deletebyqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"send","","",19,{"inputs":[{"name":"deletebyqueryoperation"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"deleteresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"deleteresult"},{"name":"json"}],"output":{"name":"deleteresult"}}],[11,"fmt","","",16,{"inputs":[{"name":"deletebyqueryindexresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"deletebyqueryindexresult"},{"name":"json"}],"output":{"name":"deletebyqueryindexresult"}}],[11,"fmt","","",17,{"inputs":[{"name":"deletebyqueryresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"successful","","",17,{"inputs":[{"name":"deletebyqueryresult"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"deletebyqueryresult"},{"name":"json"}],"output":{"name":"deletebyqueryresult"}}],[0,"get","rs_es::operations","Implementation of the Get API",null,null],[3,"GetOperation","rs_es::operations::get","An ES GET operation, to get a document by ID",null,null],[3,"GetResult","","The result of a GET request",null,null],[12,"index","","",20,null],[12,"doc_type","","",20,null],[12,"id","","",20,null],[12,"version","","",20,null],[12,"found","","",20,null],[12,"source","","",20,null],[4,"Preference","","Values for the `preference` query parameter",null,null],[13,"Primary","","",21,null],[13,"Local","","",21,null],[11,"from","rs_es::operations::common","",7,{"inputs":[{"name":"optionval"},{"name":"preference"}],"output":{"name":"optionval"}}],[11,"new","rs_es::operations::get","",22,{"inputs":[{"name":"getoperation"},{"name":"client"},{"name":"str"},{"name":"str"}],"output":{"name":"getoperation"}}],[11,"with_all_types","","",22,{"inputs":[{"name":"getoperation"}],"output":{"name":"self"}}],[11,"with_doc_type","","",22,{"inputs":[{"name":"getoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_fields","","",22,null],[11,"with_realtime","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_source","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_routing","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_preference","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_refresh","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version_type","","",22,{"inputs":[{"name":"getoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"send","","",22,{"inputs":[{"name":"getoperation"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"getresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"source","","The result is a JSON document, this function will attempt to decode it\nto a struct.  If the raw JSON is required, it can accessed directly from\nthe source field of the `GetResult` struct.",20,{"inputs":[{"name":"getresult"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"getresult"},{"name":"json"}],"output":{"name":"getresult"}}],[0,"index","rs_es::operations","Implementation of ElasticSearch Index operation",null,null],[3,"IndexOperation","rs_es::operations::index","An indexing operation",null,null],[3,"IndexResult","","The result of an index operation",null,null],[12,"index","","",23,null],[12,"doc_type","","",23,null],[12,"id","","",23,null],[12,"version","","",23,null],[12,"created","","",23,null],[4,"OpType","","Values for the op_type option",null,null],[13,"Create","","",24,null],[11,"from","rs_es::operations::common","",7,{"inputs":[{"name":"optionval"},{"name":"optype"}],"output":{"name":"optionval"}}],[11,"new","rs_es::operations::index","",25,{"inputs":[{"name":"indexoperation"},{"name":"client"},{"name":"str"},{"name":"str"}],"output":{"name":"indexoperation"}}],[11,"with_doc","","",25,{"inputs":[{"name":"indexoperation"},{"name":"e"}],"output":{"name":"self"}}],[11,"with_id","","",25,{"inputs":[{"name":"indexoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_ttl","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_version_type","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_op_type","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_routing","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_parent","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_timestamp","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_refresh","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_timeout","","",25,{"inputs":[{"name":"indexoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"send","","",25,{"inputs":[{"name":"indexoperation"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"indexresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"indexresult"},{"name":"json"}],"output":{"name":"indexresult"}}],[0,"search","rs_es::operations","Implementations of both Search-by-URI and Search-by-Query operations",null,null],[3,"SearchURIOperation","rs_es::operations::search","Representing a search-by-uri option",null,null],[3,"SortField","","Representing sort options for a specific field, can be combined with others\nto produce the full sort clause",null,null],[3,"GeoDistance","","Representing sort options for sort by geodistance",null,null],[3,"Script","","Representing options for sort by script",null,null],[3,"Sort","","A full sort clause",null,null],[3,"SearchQueryOperation","","",null,null],[3,"SearchHitsHitsResult","","",null,null],[12,"index","","",26,null],[12,"doc_type","","",26,null],[12,"id","","",26,null],[12,"score","","",26,null],[12,"source","","",26,null],[12,"fields","","",26,null],[3,"SearchHitsResult","","",null,null],[12,"total","","",27,null],[12,"hits","","",27,null],[3,"SearchResult","","",null,null],[12,"took","","",28,null],[12,"timed_out","","",28,null],[12,"shards","","",28,null],[12,"hits","","",28,null],[12,"aggs","","",28,null],[3,"ScanIterator","","",null,null],[3,"ScanResult","","Used when scanning and scrolling through results, a `ScanResult` is returned\nwhen the scan is opened.  To scroll through the results an application has\ntwo options:",null,null],[12,"took","","",29,null],[12,"timed_out","","",29,null],[12,"shards","","",29,null],[12,"hits","","",29,null],[12,"aggs","","",29,null],[4,"SearchType","","Options for the various search_type parameters",null,null],[13,"DFSQueryThenFetch","","",30,null],[13,"DFSQueryAndFetch","","",30,null],[13,"QueryThenFetch","","",30,null],[13,"QueryAndFetch","","",30,null],[4,"Order","","Order of a sort",null,null],[13,"Asc","","",31,null],[13,"Desc","","",31,null],[4,"Mode","","The (Sort mode option)[https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_sort_mode_option].",null,null],[13,"Min","","",32,null],[13,"Max","","",32,null],[13,"Sum","","",32,null],[13,"Avg","","",32,null],[4,"Missing","","Options for handling (missing values)[https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_missing_values]",null,null],[13,"First","","",33,null],[13,"Last","","",33,null],[13,"Custom","","",33,null],[4,"SortBy","","",null,null],[13,"Field","","",34,null],[13,"Distance","","",34,null],[13,"Script","","",34,null],[4,"Source","","Options for source filtering",null,null],[13,"Off","","Disable source documents",35,null],[13,"Filter","","Filtering",35,null],[0,"aggregations","","Implementation of ElasticSearch [aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html)",null,null],[3,"Script","rs_es::operations::search::aggregations","Script attributes for various attributes",null,null],[3,"Min","","Min aggregation",null,null],[3,"Max","","Max aggregation",null,null],[3,"Sum","","Sum aggregation",null,null],[3,"Avg","","Avg aggregation",null,null],[3,"Stats","","Stats aggregation",null,null],[3,"ExtendedStats","","Extended stats aggregation",null,null],[3,"ValueCount","","Value count aggregation",null,null],[3,"Percentiles","","Percentiles aggregation, see: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-aggregation.html",null,null],[3,"PercentileRanks","","Percentile Ranks aggregation",null,null],[3,"Cardinality","","Cardinality aggregation",null,null],[3,"GeoBounds","","Geo Bounds aggregation",null,null],[3,"ScriptedMetric","","Scripted method aggregation",null,null],[3,"Global","","Global aggregation, defines a single global bucket.  Can only be used as a\ntop-level aggregation.  See: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-global-aggregation.html",null,null],[3,"Filter","","Filter aggregation",null,null],[3,"Filters","","Filters aggregation",null,null],[3,"Missing","","Missing aggregation",null,null],[12,"field","","",36,null],[3,"Nested","","Nested aggregation",null,null],[12,"path","","",37,null],[3,"ReverseNested","","Reverse nested aggregation, will produce an error if used anywhere other than\ninside a nested aggregation.",null,null],[3,"Children","","Children aggregation - sub-aggregations run against the child document",null,null],[3,"Order","","Used to define the ordering of buckets in a some bucketted aggregations",null,null],[3,"Terms","","Terms aggregation",null,null],[3,"RangeInst","","A specific range, there will be many of these making up a range aggregation",null,null],[3,"Range","","Range aggregations",null,null],[3,"DateRangeInst","","A specific element of a range for a `DateRange` aggregation",null,null],[3,"DateRange","","Date range aggregation.  See: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-daterange-aggregation.html",null,null],[3,"ExtendedBounds","","Histogram aggregation.",null,null],[3,"Histogram","","",null,null],[3,"DateHistogram","","",null,null],[3,"GeoDistanceInst","","",null,null],[3,"GeoDistance","","",null,null],[3,"GeoHash","","Geohash aggregation",null,null],[3,"Aggregations","","The set of aggregations",null,null],[3,"MinResult","","",null,null],[12,"value","","",38,null],[3,"MaxResult","","",null,null],[12,"value","","",39,null],[3,"SumResult","","",null,null],[12,"value","","",40,null],[3,"AvgResult","","",null,null],[12,"value","","",41,null],[3,"StatsResult","","",null,null],[12,"count","","",42,null],[12,"min","","",42,null],[12,"max","","",42,null],[12,"avg","","",42,null],[12,"sum","","",42,null],[3,"Bounds","","Used by the `ExtendedStatsResult`",null,null],[12,"upper","","",43,null],[12,"lower","","",43,null],[3,"ExtendedStatsResult","","",null,null],[12,"count","","",44,null],[12,"min","","",44,null],[12,"max","","",44,null],[12,"avg","","",44,null],[12,"sum","","",44,null],[12,"sum_of_squares","","",44,null],[12,"variance","","",44,null],[12,"std_deviation","","",44,null],[12,"std_deviation_bounds","","",44,null],[3,"ValueCountResult","","",null,null],[12,"value","","",45,null],[3,"PercentilesResult","","",null,null],[12,"values","","",46,null],[3,"PercentileRanksResult","","",null,null],[12,"values","","",47,null],[3,"CardinalityResult","","",null,null],[12,"value","","",48,null],[3,"GeoBoundsResult","","",null,null],[12,"bounds","","",49,null],[3,"ScriptedMetricResult","","",null,null],[12,"value","","",50,null],[3,"GlobalResult","","",null,null],[12,"doc_count","","",51,null],[12,"aggs","","",51,null],[3,"FilterResult","","",null,null],[12,"doc_count","","",52,null],[12,"aggs","","",52,null],[3,"FiltersBucketResult","","",null,null],[12,"doc_count","","",53,null],[12,"aggs","","",53,null],[3,"FiltersResult","","",null,null],[12,"buckets","","",54,null],[3,"MissingResult","","",null,null],[12,"doc_count","","",55,null],[12,"aggs","","",55,null],[3,"NestedResult","","",null,null],[12,"aggs","","",56,null],[3,"ReverseNestedResult","","",null,null],[12,"aggs","","",57,null],[3,"ChildrenResult","","",null,null],[12,"doc_count","","",58,null],[12,"aggs","","",58,null],[3,"TermsBucketResult","","",null,null],[12,"key","","",59,null],[12,"doc_count","","",59,null],[12,"aggs","","",59,null],[3,"TermsResult","","",null,null],[12,"doc_count_error_upper_bound","","",60,null],[12,"sum_other_doc_count","","",60,null],[12,"buckets","","",60,null],[3,"RangeBucketResult","","",null,null],[12,"from","","",61,null],[12,"to","","",61,null],[12,"doc_count","","",61,null],[12,"aggs","","",61,null],[3,"RangeResult","","",null,null],[12,"buckets","","",62,null],[3,"DateRangeBucketResult","","",null,null],[12,"from","","",63,null],[12,"from_as_string","","",63,null],[12,"to","","",63,null],[12,"to_as_string","","",63,null],[12,"doc_count","","",63,null],[12,"aggs","","",63,null],[3,"DateRangeResult","","",null,null],[12,"buckets","","",64,null],[3,"HistogramBucketResult","","Used for histogram results",null,null],[12,"key","","",65,null],[12,"doc_count","","",65,null],[12,"aggs","","",65,null],[3,"HistogramResult","","",null,null],[12,"buckets","","",66,null],[3,"DateHistogramBucketResult","","",null,null],[12,"key_as_string","","",67,null],[12,"key","","",67,null],[12,"doc_count","","",67,null],[12,"aggs","","",67,null],[3,"DateHistogramResult","","",null,null],[12,"buckets","","",68,null],[3,"GeoDistanceBucketResult","","",null,null],[12,"key","","",69,null],[12,"from","","",69,null],[12,"to","","",69,null],[12,"doc_count","","",69,null],[12,"aggs","","",69,null],[3,"GeoDistanceResult","","",null,null],[12,"buckets","","",70,null],[3,"GeoHashBucketResult","","",null,null],[12,"key","","",71,null],[12,"doc_count","","",71,null],[12,"aggs","","",71,null],[3,"GeoHashResult","","",null,null],[12,"buckets","","",72,null],[3,"AggregationsResult","","",null,null],[4,"Scripts","","",null,null],[13,"Inline","","",73,null],[13,"Id","","",73,null],[4,"FieldOrScript","","A common pattern is for an aggregation to accept a field or a script",null,null],[13,"Field","","",74,null],[13,"Script","","",74,null],[4,"MetricsAggregation","","Individual aggregations and their options",null,null],[13,"Min","","",75,null],[13,"Max","","",75,null],[13,"Sum","","",75,null],[13,"Avg","","",75,null],[13,"Stats","","",75,null],[13,"ExtendedStats","","",75,null],[13,"ValueCount","","",75,null],[13,"Percentiles","","",75,null],[13,"PercentileRanks","","",75,null],[13,"Cardinality","","",75,null],[13,"GeoBounds","","",75,null],[13,"ScriptedMetric","","",75,null],[4,"OrderKey","","Order - used for some bucketing aggregations to determine the order of\nbuckets",null,null],[13,"Count","","",76,null],[13,"Key","","",76,null],[13,"Term","","",76,null],[13,"Expr","","",76,null],[4,"TimeZone","","Date histogram and related fields",null,null],[13,"Offset","","",77,null],[13,"Str","","",77,null],[4,"Interval","","",null,null],[13,"Year","","",78,null],[13,"Quarter","","",78,null],[13,"Month","","",78,null],[13,"Week","","",78,null],[13,"Day","","",78,null],[13,"Hour","","",78,null],[13,"Minute","","",78,null],[13,"Second","","",78,null],[4,"BucketAggregation","","The set of bucket aggregations",null,null],[13,"Global","","",79,null],[13,"Filter","","",79,null],[13,"Filters","","",79,null],[13,"Missing","","",79,null],[13,"Nested","","",79,null],[13,"ReverseNested","","",79,null],[13,"Children","","",79,null],[13,"Terms","","",79,null],[13,"Range","","",79,null],[13,"DateRange","","",79,null],[13,"Histogram","","",79,null],[13,"DateHistogram","","",79,null],[13,"GeoDistance","","",79,null],[13,"GeoHash","","",79,null],[4,"Aggregation","","Aggregations are either metrics or bucket-based aggregations",null,null],[13,"Metrics","","A metric aggregation (e.g. min)",80,null],[13,"Bucket","","A bucket aggregation, groups data into buckets and optionally applies\nsub-aggregations",80,null],[4,"AggregationResult","","The result of one specific aggregation",null,null],[13,"Min","","",81,null],[13,"Max","","",81,null],[13,"Sum","","",81,null],[13,"Avg","","",81,null],[13,"Stats","","",81,null],[13,"ExtendedStats","","",81,null],[13,"ValueCount","","",81,null],[13,"Percentiles","","",81,null],[13,"PercentileRanks","","",81,null],[13,"Cardinality","","",81,null],[13,"GeoBounds","","",81,null],[13,"ScriptedMetric","","",81,null],[13,"Global","","",81,null],[13,"Filter","","",81,null],[13,"Filters","","",81,null],[13,"Missing","","",81,null],[13,"Nested","","",81,null],[13,"ReverseNested","","",81,null],[13,"Children","","",81,null],[13,"Terms","","",81,null],[13,"Range","","",81,null],[13,"DateRange","","",81,null],[13,"Histogram","","",81,null],[13,"DateHistogram","","",81,null],[13,"GeoDistance","","",81,null],[13,"GeoHash","","",81,null],[11,"fmt","","",73,{"inputs":[{"name":"scripts"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"script"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",82,{"inputs":[{"name":"script"},{"name":"str"}],"output":{"name":"script"}}],[11,"script","","",82,{"inputs":[{"name":"script"},{"name":"str"}],"output":{"name":"script"}}],[11,"script_and_field","","",82,{"inputs":[{"name":"script"},{"name":"str"},{"name":"str"}],"output":{"name":"script"}}],[11,"with_params","","",82,{"inputs":[{"name":"script"},{"name":"json"}],"output":{"name":"self"}}],[11,"fmt","","",74,{"inputs":[{"name":"fieldorscript"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",74,{"inputs":[{"name":"fieldorscript"},{"name":"str"}],"output":{"name":"fieldorscript"}}],[11,"from","","",74,{"inputs":[{"name":"fieldorscript"},{"name":"script"}],"output":{"name":"fieldorscript"}}],[11,"fmt","","",83,{"inputs":[{"name":"min"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",83,{"inputs":[{"name":"min"},{"name":"fos"}],"output":{"name":"min"}}],[11,"to_json","","",83,{"inputs":[{"name":"min"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"min"}],"output":{"name":"aggregation"}}],[11,"fmt","","",84,{"inputs":[{"name":"max"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",84,{"inputs":[{"name":"max"},{"name":"fos"}],"output":{"name":"max"}}],[11,"to_json","","",84,{"inputs":[{"name":"max"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"max"}],"output":{"name":"aggregation"}}],[11,"fmt","","",85,{"inputs":[{"name":"sum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",85,{"inputs":[{"name":"sum"},{"name":"fos"}],"output":{"name":"sum"}}],[11,"to_json","","",85,{"inputs":[{"name":"sum"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"sum"}],"output":{"name":"aggregation"}}],[11,"fmt","","",86,{"inputs":[{"name":"avg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",86,{"inputs":[{"name":"avg"},{"name":"fos"}],"output":{"name":"avg"}}],[11,"to_json","","",86,{"inputs":[{"name":"avg"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"avg"}],"output":{"name":"aggregation"}}],[11,"fmt","","",87,{"inputs":[{"name":"stats"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",87,{"inputs":[{"name":"stats"},{"name":"fos"}],"output":{"name":"stats"}}],[11,"to_json","","",87,{"inputs":[{"name":"stats"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"stats"}],"output":{"name":"aggregation"}}],[11,"fmt","","",88,{"inputs":[{"name":"extendedstats"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",88,{"inputs":[{"name":"extendedstats"},{"name":"fos"}],"output":{"name":"extendedstats"}}],[11,"to_json","","",88,{"inputs":[{"name":"extendedstats"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"extendedstats"}],"output":{"name":"aggregation"}}],[11,"fmt","","",89,{"inputs":[{"name":"valuecount"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",89,{"inputs":[{"name":"valuecount"},{"name":"fos"}],"output":{"name":"valuecount"}}],[11,"to_json","","",89,{"inputs":[{"name":"valuecount"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"valuecount"}],"output":{"name":"aggregation"}}],[11,"fmt","","",90,{"inputs":[{"name":"percentiles"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",90,{"inputs":[{"name":"percentiles"},{"name":"f"}],"output":{"name":"percentiles"}}],[11,"with_percents","","",90,{"inputs":[{"name":"percentiles"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_compression","","",90,{"inputs":[{"name":"percentiles"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",90,{"inputs":[{"name":"percentiles"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"percentiles"}],"output":{"name":"aggregation"}}],[11,"fmt","","",91,{"inputs":[{"name":"percentileranks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",91,{"inputs":[{"name":"percentileranks"},{"name":"f"},{"name":"vec"}],"output":{"name":"percentileranks"}}],[11,"to_json","","",91,{"inputs":[{"name":"percentileranks"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"percentileranks"}],"output":{"name":"aggregation"}}],[11,"fmt","","",92,{"inputs":[{"name":"cardinality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",92,{"inputs":[{"name":"cardinality"},{"name":"f"}],"output":{"name":"cardinality"}}],[11,"with_precision_threshold","","",92,{"inputs":[{"name":"cardinality"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_rehash","","",92,{"inputs":[{"name":"cardinality"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",92,{"inputs":[{"name":"cardinality"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"cardinality"}],"output":{"name":"aggregation"}}],[11,"fmt","","",93,{"inputs":[{"name":"geobounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",93,{"inputs":[{"name":"geobounds"},{"name":"str"}],"output":{"name":"geobounds"}}],[11,"with_wrap_longitude","","",93,{"inputs":[{"name":"geobounds"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",93,{"inputs":[{"name":"geobounds"}],"output":{"name":"json"}}],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"geobounds"}],"output":{"name":"aggregation"}}],[11,"fmt","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"str"}],"output":{"name":"scriptedmetric"}}],[11,"with_init_script","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_combine_script","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_reduce_script","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_params","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_reduce_params","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lang","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_init_script_file","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_init_script_id","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_map_script_file","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_map_script_id","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_combine_script_file","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_combine_script_id","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_reduce_script_file","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_reduce_script_id","","",94,{"inputs":[{"name":"scriptedmetric"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",94,{"inputs":[{"name":"scriptedmetric"}],"output":{"name":"json"}}],[11,"fmt","","",75,{"inputs":[{"name":"metricsaggregation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",75,{"inputs":[{"name":"metricsaggregation"}],"output":{"name":"json"}}],[11,"fmt","","",95,{"inputs":[{"name":"global"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",95,{"inputs":[{"name":"global"}],"output":{"name":"global"}}],[11,"to_json","","",95,{"inputs":[{"name":"global"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"global"}],"output":{"name":"aggregation"}}],[11,"fmt","","",96,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",96,{"inputs":[{"name":"filter"},{"name":"filter"}],"output":{"name":"filter"}}],[11,"to_json","","",96,{"inputs":[{"name":"filter"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"filter"}],"output":{"name":"aggregation"}}],[11,"fmt","","",97,{"inputs":[{"name":"filters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",97,{"inputs":[{"name":"filters"},{"name":"hashmap"}],"output":{"name":"filters"}}],[11,"from","","",97,{"inputs":[{"name":"filters"},{"name":"vec"}],"output":{"name":"filters"}}],[11,"to_json","","",97,{"inputs":[{"name":"filters"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"filters"}],"output":{"name":"aggregation"}}],[11,"fmt","","",36,{"inputs":[{"name":"missing"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"missing"},{"name":"str"}],"output":{"name":"missing"}}],[11,"to_json","","",36,{"inputs":[{"name":"missing"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"missing"}],"output":{"name":"aggregation"}}],[11,"fmt","","",37,{"inputs":[{"name":"nested"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",37,{"inputs":[{"name":"nested"},{"name":"str"}],"output":{"name":"nested"}}],[11,"to_json","","",37,{"inputs":[{"name":"nested"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"nested"}],"output":{"name":"aggregation"}}],[11,"fmt","","",98,{"inputs":[{"name":"reversenested"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",98,{"inputs":[{"name":"reversenested"}],"output":{"name":"reversenested"}}],[11,"to_json","","",98,{"inputs":[{"name":"reversenested"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"reversenested"}],"output":{"name":"aggregation"}}],[11,"fmt","","",99,{"inputs":[{"name":"children"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",99,{"inputs":[{"name":"children"},{"name":"str"}],"output":{"name":"children"}}],[11,"to_json","","",99,{"inputs":[{"name":"children"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"children"}],"output":{"name":"aggregation"}}],[11,"fmt","","",76,{"inputs":[{"name":"orderkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",76,{"inputs":[{"name":"orderkey"},{"name":"str"}],"output":{"name":"orderkey"}}],[11,"to_string","","",76,{"inputs":[{"name":"orderkey"}],"output":{"name":"string"}}],[11,"fmt","","",100,{"inputs":[{"name":"order"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"asc","","Create an `Order` ascending",100,{"inputs":[{"name":"order"},{"name":"o"}],"output":{"name":"order"}}],[11,"desc","","Create an `Order` descending",100,{"inputs":[{"name":"order"},{"name":"o"}],"output":{"name":"order"}}],[11,"to_json","","",100,{"inputs":[{"name":"order"}],"output":{"name":"json"}}],[11,"fmt","","",101,{"inputs":[{"name":"terms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",101,{"inputs":[{"name":"terms"},{"name":"fos"}],"output":{"name":"terms"}}],[11,"with_size","","",101,{"inputs":[{"name":"terms"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_shard_size","","",101,{"inputs":[{"name":"terms"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_order","","",101,{"inputs":[{"name":"terms"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",101,{"inputs":[{"name":"terms"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"terms"}],"output":{"name":"aggregation"}}],[11,"fmt","","",102,{"inputs":[{"name":"rangeinst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",102,{"inputs":[{"name":"rangeinst"}],"output":{"name":"rangeinst"}}],[11,"with_from","","",102,{"inputs":[{"name":"rangeinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_to","","",102,{"inputs":[{"name":"rangeinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_key","","",102,{"inputs":[{"name":"rangeinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",102,{"inputs":[{"name":"rangeinst"}],"output":{"name":"json"}}],[11,"fmt","","",103,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",103,{"inputs":[{"name":"range"},{"name":"fos"},{"name":"vec"}],"output":{"name":"range"}}],[11,"inst","","",103,{"inputs":[{"name":"range"}],"output":{"name":"rangeinst"}}],[11,"to_json","","",103,{"inputs":[{"name":"range"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"range"}],"output":{"name":"aggregation"}}],[11,"fmt","","",104,{"inputs":[{"name":"daterangeinst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",104,{"inputs":[{"name":"daterangeinst"}],"output":{"name":"daterangeinst"}}],[11,"with_from","","",104,{"inputs":[{"name":"daterangeinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_to","","",104,{"inputs":[{"name":"daterangeinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",104,{"inputs":[{"name":"daterangeinst"}],"output":{"name":"json"}}],[11,"fmt","","",105,{"inputs":[{"name":"daterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",105,{"inputs":[{"name":"daterange"},{"name":"fos"},{"name":"vec"}],"output":{"name":"daterange"}}],[11,"inst","","",105,{"inputs":[{"name":"daterange"}],"output":{"name":"daterangeinst"}}],[11,"to_json","","",105,{"inputs":[{"name":"daterange"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"daterange"}],"output":{"name":"aggregation"}}],[11,"fmt","","",106,{"inputs":[{"name":"extendedbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",106,{"inputs":[{"name":"extendedbounds"},{"name":"i64"},{"name":"i64"}],"output":{"name":"extendedbounds"}}],[11,"to_json","","",106,{"inputs":[{"name":"extendedbounds"}],"output":{"name":"json"}}],[11,"from","","",106,null],[11,"fmt","","",107,{"inputs":[{"name":"histogram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",107,{"inputs":[{"name":"histogram"},{"name":"str"}],"output":{"name":"histogram"}}],[11,"with_interval","","",107,{"inputs":[{"name":"histogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_doc_count","","",107,{"inputs":[{"name":"histogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_extended_bounds","","",107,{"inputs":[{"name":"histogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_order","","",107,{"inputs":[{"name":"histogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",107,{"inputs":[{"name":"histogram"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"histogram"}],"output":{"name":"aggregation"}}],[11,"fmt","","",77,{"inputs":[{"name":"timezone"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",77,{"inputs":[{"name":"timezone"}],"output":{"name":"json"}}],[11,"from","","",77,{"inputs":[{"name":"timezone"},{"name":"str"}],"output":{"name":"timezone"}}],[11,"from","","",77,{"inputs":[{"name":"timezone"},{"name":"u64"}],"output":{"name":"timezone"}}],[11,"fmt","","",78,{"inputs":[{"name":"interval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",78,{"inputs":[{"name":"interval"}],"output":{"name":"json"}}],[11,"fmt","","",108,{"inputs":[{"name":"datehistogram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",108,{"inputs":[{"name":"datehistogram"},{"name":"str"},{"name":"i"}],"output":{"name":"datehistogram"}}],[11,"with_time_zone","","",108,{"inputs":[{"name":"datehistogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_offset","","",108,{"inputs":[{"name":"datehistogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_format","","",108,{"inputs":[{"name":"datehistogram"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",108,{"inputs":[{"name":"datehistogram"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"datehistogram"}],"output":{"name":"aggregation"}}],[11,"fmt","","",109,{"inputs":[{"name":"geodistanceinst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",109,{"inputs":[{"name":"geodistanceinst"}],"output":{"name":"geodistanceinst"}}],[11,"with_from","","",109,{"inputs":[{"name":"geodistanceinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_to","","",109,{"inputs":[{"name":"geodistanceinst"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",109,{"inputs":[{"name":"geodistanceinst"}],"output":{"name":"json"}}],[11,"fmt","","",110,{"inputs":[{"name":"geodistance"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",110,null],[11,"with_unit","","",110,{"inputs":[{"name":"geodistance"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_distance_type","","",110,{"inputs":[{"name":"geodistance"},{"name":"t"}],"output":{"name":"self"}}],[11,"inst","","",110,{"inputs":[{"name":"geodistance"}],"output":{"name":"geodistanceinst"}}],[11,"to_json","","",110,{"inputs":[{"name":"geodistance"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"geodistance"}],"output":{"name":"aggregation"}}],[11,"fmt","","",111,{"inputs":[{"name":"geohash"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",111,{"inputs":[{"name":"geohash"},{"name":"str"}],"output":{"name":"geohash"}}],[11,"with_precision","","",111,{"inputs":[{"name":"geohash"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_size","","",111,{"inputs":[{"name":"geohash"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_shard_size","","",111,{"inputs":[{"name":"geohash"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","",111,{"inputs":[{"name":"geohash"}],"output":{"name":"json"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"aggregation"},{"name":"geohash"}],"output":{"name":"aggregation"}}],[11,"fmt","","",79,{"inputs":[{"name":"bucketaggregation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"aggregation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",80,{"inputs":[{"name":"aggregation"}],"output":{"name":"json"}}],[11,"fmt","","",112,{"inputs":[{"name":"aggregations"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty-set of aggregations, individual aggregations should be\nadded via the `add` method",112,{"inputs":[{"name":"aggregations"}],"output":{"name":"aggregations"}}],[11,"add","","Add an aggregation to the set of aggregations",112,{"inputs":[{"name":"aggregations"},{"name":"str"},{"name":"a"}],"output":null}],[11,"from","","",112,{"inputs":[{"name":"aggregations"},{"name":"vec"}],"output":{"name":"aggregations"}}],[11,"from","","",112,null],[11,"to_json","","",112,{"inputs":[{"name":"aggregations"}],"output":{"name":"json"}}],[11,"fmt","","",38,{"inputs":[{"name":"minresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",38,{"inputs":[{"name":"minresult"},{"name":"json"}],"output":{"name":"minresult"}}],[11,"fmt","","",39,{"inputs":[{"name":"maxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",39,{"inputs":[{"name":"maxresult"},{"name":"json"}],"output":{"name":"maxresult"}}],[11,"fmt","","",40,{"inputs":[{"name":"sumresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",40,{"inputs":[{"name":"sumresult"},{"name":"json"}],"output":{"name":"sumresult"}}],[11,"fmt","","",41,{"inputs":[{"name":"avgresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",41,{"inputs":[{"name":"avgresult"},{"name":"json"}],"output":{"name":"avgresult"}}],[11,"fmt","","",42,{"inputs":[{"name":"statsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",42,{"inputs":[{"name":"statsresult"},{"name":"json"}],"output":{"name":"statsresult"}}],[11,"fmt","","",43,{"inputs":[{"name":"bounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",43,{"inputs":[{"name":"bounds"},{"name":"json"}],"output":{"name":"bounds"}}],[11,"fmt","","",44,{"inputs":[{"name":"extendedstatsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",44,{"inputs":[{"name":"extendedstatsresult"},{"name":"json"}],"output":{"name":"extendedstatsresult"}}],[11,"fmt","","",45,{"inputs":[{"name":"valuecountresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",45,{"inputs":[{"name":"valuecountresult"},{"name":"json"}],"output":{"name":"valuecountresult"}}],[11,"fmt","","",46,{"inputs":[{"name":"percentilesresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",46,{"inputs":[{"name":"percentilesresult"},{"name":"json"}],"output":{"name":"percentilesresult"}}],[11,"fmt","","",47,{"inputs":[{"name":"percentileranksresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",47,{"inputs":[{"name":"percentileranksresult"},{"name":"json"}],"output":{"name":"percentileranksresult"}}],[11,"fmt","","",48,{"inputs":[{"name":"cardinalityresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",48,{"inputs":[{"name":"cardinalityresult"},{"name":"json"}],"output":{"name":"cardinalityresult"}}],[11,"fmt","","",49,{"inputs":[{"name":"geoboundsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",49,{"inputs":[{"name":"geoboundsresult"},{"name":"json"}],"output":{"name":"geoboundsresult"}}],[11,"fmt","","",50,{"inputs":[{"name":"scriptedmetricresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",50,{"inputs":[{"name":"scriptedmetricresult"},{"name":"json"}],"output":{"name":"scriptedmetricresult"}}],[11,"fmt","","",51,{"inputs":[{"name":"globalresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",51,{"inputs":[{"name":"globalresult"}],"output":{"name":"option"}}],[11,"fmt","","",52,{"inputs":[{"name":"filterresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",52,{"inputs":[{"name":"filterresult"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"filtersbucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",53,{"inputs":[{"name":"filtersbucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"filtersresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"missingresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",55,{"inputs":[{"name":"missingresult"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"nestedresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",56,{"inputs":[{"name":"nestedresult"}],"output":{"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"reversenestedresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"childrenresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",58,{"inputs":[{"name":"childrenresult"}],"output":{"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"termsbucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",59,{"inputs":[{"name":"termsbucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",60,{"inputs":[{"name":"termsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"rangebucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",61,{"inputs":[{"name":"rangebucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",62,{"inputs":[{"name":"rangeresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"daterangebucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",63,{"inputs":[{"name":"daterangebucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",64,{"inputs":[{"name":"daterangeresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"histogrambucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",65,{"inputs":[{"name":"histogrambucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",66,{"inputs":[{"name":"histogramresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"datehistogrambucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",67,{"inputs":[{"name":"datehistogrambucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",68,{"inputs":[{"name":"datehistogramresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"geodistancebucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",69,{"inputs":[{"name":"geodistancebucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",70,{"inputs":[{"name":"geodistanceresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"geohashbucketresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"aggs_ref","","",71,{"inputs":[{"name":"geohashbucketresult"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"geohashresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"aggregationresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_min","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_max","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_sum","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_avg","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_stats","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_extended_stats","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_value_count","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_percentiles","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_percentile_ranks","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_cardinality","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_geo_bounds","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_scripted_metric","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_global","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_filter","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_filters","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_missing","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_nested","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_reverse_nested","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_children","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_terms","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_range","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_date_range","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_histogram","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_date_histogram","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_geo_distance","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"as_geo_hash","","",81,{"inputs":[{"name":"aggregationresult"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"aggregationsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",113,{"inputs":[{"name":"aggregationsresult"},{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",113,{"inputs":[{"name":"aggregationsresult"},{"name":"aggregations"},{"name":"json"}],"output":{"name":"aggregationsresult"}}],[11,"to_string","rs_es::operations::search","",30,{"inputs":[{"name":"searchtype"}],"output":{"name":"string"}}],[11,"fmt","","",31,{"inputs":[{"name":"order"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",31,{"inputs":[{"name":"order"}],"output":{"name":"string"}}],[11,"to_json","","",31,{"inputs":[{"name":"order"}],"output":{"name":"json"}}],[11,"to_json","","",32,{"inputs":[{"name":"mode"}],"output":{"name":"json"}}],[11,"to_json","","",33,{"inputs":[{"name":"missing"}],"output":{"name":"json"}}],[11,"from","","",33,{"inputs":[{"name":"missing"},{"name":"s"}],"output":{"name":"missing"}}],[11,"new","","Create a `SortField` for a given `field` and `order`",114,{"inputs":[{"name":"sortfield"},{"name":"s"},{"name":"option"}],"output":{"name":"sortfield"}}],[11,"with_mode","","",114,{"inputs":[{"name":"sortfield"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_nested_path","","",114,{"inputs":[{"name":"sortfield"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_nested_filter","","",114,{"inputs":[{"name":"sortfield"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_missing","","",114,{"inputs":[{"name":"sortfield"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_unmapped_type","","",114,{"inputs":[{"name":"sortfield"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",114,{"inputs":[{"name":"sortfield"}],"output":{"name":"sortby"}}],[11,"to_string","","",114,{"inputs":[{"name":"sortfield"}],"output":{"name":"string"}}],[11,"to_json","","",114,{"inputs":[{"name":"sortfield"}],"output":{"name":"json"}}],[11,"new","","",115,{"inputs":[{"name":"geodistance"},{"name":"s"}],"output":{"name":"geodistance"}}],[11,"with_location","","",115,{"inputs":[{"name":"geodistance"},{"name":"l"}],"output":{"name":"self"}}],[11,"with_locations","","",115,{"inputs":[{"name":"geodistance"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_order","","",115,{"inputs":[{"name":"geodistance"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_unit","","",115,{"inputs":[{"name":"geodistance"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_mode","","",115,{"inputs":[{"name":"geodistance"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_distance_type","","",115,{"inputs":[{"name":"geodistance"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",115,{"inputs":[{"name":"geodistance"}],"output":{"name":"sortby"}}],[11,"to_json","","",115,{"inputs":[{"name":"geodistance"}],"output":{"name":"json"}}],[11,"new","","",116,{"inputs":[{"name":"script"},{"name":"s"},{"name":"st"}],"output":{"name":"script"}}],[11,"with_order","","",116,{"inputs":[{"name":"script"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_param","","",116,{"inputs":[{"name":"script"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"build","","",116,{"inputs":[{"name":"script"}],"output":{"name":"sortby"}}],[11,"to_json","","",116,{"inputs":[{"name":"script"}],"output":{"name":"json"}}],[11,"to_string","","",34,{"inputs":[{"name":"sortby"}],"output":{"name":"string"}}],[11,"to_json","","",34,{"inputs":[{"name":"sortby"}],"output":{"name":"json"}}],[11,"new","","",117,{"inputs":[{"name":"sort"},{"name":"vec"}],"output":{"name":"sort"}}],[11,"field","","Convenience function for a single field default",117,{"inputs":[{"name":"sort"},{"name":"s"}],"output":{"name":"sort"}}],[11,"field_order","","",117,{"inputs":[{"name":"sort"},{"name":"s"},{"name":"order"}],"output":{"name":"sort"}}],[11,"fields","","",117,{"inputs":[{"name":"sort"},{"name":"vec"}],"output":{"name":"sort"}}],[11,"field_orders","","",117,{"inputs":[{"name":"sort"},{"name":"vec"}],"output":{"name":"sort"}}],[11,"from","rs_es::operations::common","",7,{"inputs":[{"name":"optionval"},{"name":"sort"}],"output":{"name":"optionval"}}],[11,"to_json","rs_es::operations::search","",117,{"inputs":[{"name":"sort"}],"output":{"name":"json"}}],[11,"new","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"client"}],"output":{"name":"searchurioperation"}}],[11,"with_indexes","","",118,null],[11,"with_types","","",118,null],[11,"with_query","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_df","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lowercase_expanded_terms","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyze_wildcard","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_default_operator","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lenient","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_explain","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_source","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_sort","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_routing","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_track_scores","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_timeout","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_terminate_after","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_from","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_size","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_search_type","","",118,{"inputs":[{"name":"searchurioperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fields","","",118,null],[11,"send","","",118,{"inputs":[{"name":"searchurioperation"}],"output":{"name":"result"}}],[11,"include","","An include-only source filter",35,null],[11,"exclude","","An exclude-only source filter",35,null],[11,"filter","","An include and exclude source filter",35,null],[11,"to_json","","",35,{"inputs":[{"name":"source"}],"output":{"name":"json"}}],[11,"new","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"client"}],"output":{"name":"searchqueryoperation"}}],[11,"with_indexes","","",119,null],[11,"with_types","","",119,null],[11,"with_query","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"query"}],"output":{"name":"self"}}],[11,"with_timeout","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_from","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"u64"}],"output":{"name":"self"}}],[11,"with_size","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"u64"}],"output":{"name":"self"}}],[11,"with_terminate_after","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"u64"}],"output":{"name":"self"}}],[11,"with_stats","","",119,null],[11,"with_min_score","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"f64"}],"output":{"name":"self"}}],[11,"with_sort","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"sort"}],"output":{"name":"self"}}],[11,"with_track_scores","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_source","","Specify source filtering, by default full source will be returned in a hit",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"source"}],"output":{"name":"self"}}],[11,"with_aggs","","Specify any aggregations",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"aggregations"}],"output":{"name":"self"}}],[11,"with_routing","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_search_type","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_query_cache","","",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"t"}],"output":{"name":"self"}}],[11,"send","","Performs the search with the specified query and options",119,{"inputs":[{"name":"searchqueryoperation"}],"output":{"name":"result"}}],[11,"scan","","Begins a scan with the specified query and options",119,{"inputs":[{"name":"searchqueryoperation"},{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"searchhitshitsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"source","","Get the source document as a struct, the raw JSON version is available\ndirectly from the source field",26,{"inputs":[{"name":"searchhitshitsresult"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"searchhitshitsresult"},{"name":"json"}],"output":{"name":"searchhitshitsresult"}}],[11,"fmt","","",27,{"inputs":[{"name":"searchhitsresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hits","","",27,{"inputs":[{"name":"searchhitsresult"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"searchhitsresult"},{"name":"json"}],"output":{"name":"searchhitsresult"}}],[11,"aggs_ref","","Take a reference to any aggregations in this result",28,{"inputs":[{"name":"searchresult"}],"output":{"name":"option"}}],[11,"from","","",28,{"inputs":[{"name":"searchresult"},{"name":"json"}],"output":{"name":"searchresult"}}],[11,"drop","","",120,{"inputs":[{"name":"scaniterator"}],"output":null}],[11,"next","","",120,{"inputs":[{"name":"scaniterator"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator from which hits can be read",29,{"inputs":[{"name":"scanresult"},{"name":"client"}],"output":{"name":"scaniterator"}}],[11,"scroll","","Calls the `/_search/scroll` ES end-point for the next page",29,{"inputs":[{"name":"scanresult"},{"name":"client"}],"output":{"name":"result"}}],[11,"close","","Calls ES to close the server-side part of the scan/scroll operation",29,{"inputs":[{"name":"scanresult"},{"name":"client"}],"output":{"name":"result"}}],[0,"analyze","rs_es::operations","Implementation of ElasticSearch Analyze operation",null,null],[3,"AnalyzeOperation","rs_es::operations::analyze","",null,null],[3,"AnalyzeResult","","The result of an analyze operation",null,null],[12,"tokens","","",121,null],[3,"Token","","",null,null],[12,"token","","",122,null],[12,"token_type","","",122,null],[12,"position","","",122,null],[12,"start_offset","","",122,null],[12,"end_offset","","",122,null],[11,"new","","",123,{"inputs":[{"name":"analyzeoperation"},{"name":"client"},{"name":"str"}],"output":{"name":"analyzeoperation"}}],[11,"with_index","","",123,{"inputs":[{"name":"analyzeoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_analyzer","","",123,{"inputs":[{"name":"analyzeoperation"},{"name":"str"}],"output":{"name":"self"}}],[11,"send","","",123,{"inputs":[{"name":"analyzeoperation"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"analyzeresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",121,{"inputs":[{"name":"analyzeresult"},{"name":"json"}],"output":{"name":"analyzeresult"}}],[11,"new","rs_es::operations","",124,{"inputs":[{"name":"refreshoperation"},{"name":"client"}],"output":{"name":"refreshoperation"}}],[11,"with_indexes","","",124,null],[11,"send","","",124,{"inputs":[{"name":"refreshoperation"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"shardcountresult"},{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"shardcountresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"refreshresult"},{"name":"json"}],"output":{"name":"refreshresult"}}],[0,"query","rs_es","Implementation of the ElasticSearch Query DSL.",null,null],[3,"MatchAllQuery","rs_es::query","",null,null],[3,"MatchQuery","","",null,null],[3,"MultiMatchQuery","","",null,null],[3,"BoolQuery","","",null,null],[3,"BoostingQuery","","",null,null],[3,"CommonQuery","","",null,null],[3,"CombinationMinimumShouldMatch","","",null,null],[3,"ConstantScoreQuery","","",null,null],[3,"DisMaxQuery","","",null,null],[3,"FilteredQuery","","",null,null],[3,"FuzzyLikeThisQuery","","",null,null],[3,"FuzzyLikeThisFieldQuery","","",null,null],[3,"FunctionScoreQuery","","",null,null],[3,"FuzzyQuery","","",null,null],[3,"Shape","","",null,null],[3,"IndexedShape","","",null,null],[3,"GeoShapeQuery","","",null,null],[3,"HasChildQuery","","",null,null],[3,"HasParentQuery","","",null,null],[3,"IdsQuery","","",null,null],[3,"IndicesQuery","","",null,null],[3,"Doc","","",null,null],[3,"MoreLikeThisQuery","","",null,null],[3,"NestedQuery","","",null,null],[3,"PrefixQuery","","",null,null],[3,"QueryStringQuery","","",null,null],[3,"SimpleQueryStringQuery","","",null,null],[3,"RangeQuery","","",null,null],[3,"RegexpQuery","","",null,null],[3,"Flags","","",null,null],[3,"SpanFirstQuery","","",null,null],[3,"SpanMultiQuery","","",null,null],[3,"SpanNearQuery","","",null,null],[3,"SpanNotQuery","","",null,null],[3,"SpanOrQuery","","",null,null],[3,"SpanTermQuery","","",null,null],[3,"TermQuery","","",null,null],[3,"TermsQuery","","",null,null],[3,"WildcardQuery","","",null,null],[3,"AndFilter","","",null,null],[3,"BoolFilter","","",null,null],[3,"ExistsFilter","","",null,null],[3,"GeoBoundingBoxFilter","","",null,null],[3,"GeoDistanceFilter","","",null,null],[3,"Distance","","",null,null],[3,"GeoPolygonFilter","","",null,null],[3,"GeoShapeFilter","","",null,null],[3,"GeohashCellFilter","","",null,null],[3,"HasChildFilter","","",null,null],[3,"HasParentFilter","","",null,null],[3,"IdsFilter","","",null,null],[3,"IndicesFilter","","",null,null],[3,"MatchAllFilter","","",null,null],[3,"MissingFilter","","",null,null],[3,"NestedFilter","","",null,null],[3,"NotFilter","","",null,null],[3,"OrFilter","","",null,null],[3,"PrefixFilter","","",null,null],[3,"QueryFilter","","",null,null],[3,"RangeFilter","","",null,null],[3,"RegexpFilter","","",null,null],[3,"ScriptFilter","","",null,null],[3,"TermFilter","","",null,null],[3,"TermsFilter","","",null,null],[3,"TypeFilter","","",null,null],[3,"ScriptScoreFunc","","",null,null],[3,"RandomScoreFunc","","",null,null],[3,"FieldValueFactorFunc","","",null,null],[3,"LinearFunc","","",null,null],[3,"ExpFunc","","",null,null],[3,"GaussFunc","","",null,null],[3,"Function","","",null,null],[4,"Query","","",null,null],[13,"MatchAll","","",125,null],[13,"Match","","",125,null],[13,"MultiMatch","","",125,null],[13,"Bool","","",125,null],[13,"Boosting","","",125,null],[13,"Common","","",125,null],[13,"ConstantScore","","",125,null],[13,"DisMax","","",125,null],[13,"Filtered","","",125,null],[13,"FuzzyLikeThis","","",125,null],[13,"FuzzyLikeThisField","","",125,null],[13,"FunctionScore","","",125,null],[13,"Fuzzy","","",125,null],[13,"GeoShape","","",125,null],[13,"HasChild","","",125,null],[13,"HasParent","","",125,null],[13,"Ids","","",125,null],[13,"Indices","","",125,null],[13,"MoreLikeThis","","",125,null],[13,"Nested","","",125,null],[13,"Prefix","","",125,null],[13,"QueryString","","",125,null],[13,"SimpleQueryString","","",125,null],[13,"Range","","",125,null],[13,"Regexp","","",125,null],[13,"SpanFirst","","",125,null],[13,"SpanMulti","","",125,null],[13,"SpanNear","","",125,null],[13,"SpanNot","","",125,null],[13,"SpanOr","","",125,null],[13,"SpanTerm","","",125,null],[13,"Term","","",125,null],[13,"Terms","","",125,null],[13,"Wildcard","","",125,null],[4,"Filter","","",null,null],[13,"And","","",126,null],[13,"Bool","","",126,null],[13,"Exists","","",126,null],[13,"GeoBoundingBox","","",126,null],[13,"GeoDistance","","",126,null],[13,"GeoPolygon","","",126,null],[13,"GeoShape","","",126,null],[13,"GeohashCell","","",126,null],[13,"HasChild","","",126,null],[13,"HasParent","","",126,null],[13,"Ids","","",126,null],[13,"Indices","","",126,null],[13,"MatchAll","","",126,null],[13,"Missing","","",126,null],[13,"Nested","","",126,null],[13,"Not","","",126,null],[13,"Or","","",126,null],[13,"Prefix","","",126,null],[13,"Query","","",126,null],[13,"Range","","",126,null],[13,"Regexp","","",126,null],[13,"Script","","",126,null],[13,"Term","","",126,null],[13,"Terms","","",126,null],[13,"Type","","",126,null],[4,"ZeroTermsQuery","","",null,null],[13,"None","","",127,null],[13,"All","","",127,null],[4,"Fuzziness","","",null,null],[13,"Auto","","",128,null],[13,"LevenshteinDistance","","",128,null],[13,"Proportionate","","",128,null],[4,"MatchType","","",null,null],[13,"Phrase","","",129,null],[13,"PhrasePrefix","","",129,null],[4,"MatchQueryType","","",null,null],[13,"BestFields","","",130,null],[13,"MostFields","","",130,null],[13,"CrossFields","","",130,null],[13,"Phrase","","",130,null],[13,"PhrasePrefix","","",130,null],[4,"MinimumShouldMatch","","",null,null],[13,"Integer","","",131,null],[13,"Percentage","","",131,null],[13,"Combination","","",131,null],[13,"MultipleCombination","","",131,null],[13,"LowHigh","","",131,null],[4,"Strategy","","",null,null],[13,"LeapFrogQueryFirst","","",132,null],[13,"LeapFrogFilterFirst","","",132,null],[13,"QueryFirst","","",132,null],[13,"RandomAccess","","",132,null],[13,"RandomAccessAlways","","",132,null],[4,"ScoreMode","","",null,null],[13,"Multiply","","",133,null],[13,"Sum","","",133,null],[13,"Avg","","",133,null],[13,"First","","",133,null],[13,"Max","","",133,null],[13,"Min","","",133,null],[4,"BoostMode","","",null,null],[13,"Multiply","","",134,null],[13,"Replace","","",134,null],[13,"Sum","","",134,null],[13,"Avg","","",134,null],[13,"Max","","",134,null],[13,"Min","","",134,null],[4,"Rewrite","","",null,null],[13,"ConstantScoreAuto","","",135,null],[13,"ScoringBoolean","","",135,null],[13,"ConstantScoreBoolean","","",135,null],[13,"ConstantScoreFilter","","",135,null],[13,"TopTerms","","",135,null],[13,"TopTermsBoost","","",135,null],[4,"Flag","","",null,null],[13,"All","","",136,null],[13,"AnyString","","",136,null],[13,"Complement","","",136,null],[13,"Intersection","","",136,null],[13,"Interval","","",136,null],[13,"None","","",136,null],[4,"OptimizeBbox","","",null,null],[13,"Memory","","",137,null],[13,"Indexed","","",137,null],[13,"None","","",137,null],[4,"Precision","","",null,null],[13,"Geohash","","",138,null],[13,"Distance","","",138,null],[4,"NoMatchFilter","","",null,null],[13,"None","","",139,null],[13,"All","","",139,null],[13,"Filter","","",139,null],[4,"Execution","","",null,null],[13,"Plain","","",140,null],[13,"Fielddata","","",140,null],[13,"Bool","","",140,null],[13,"BoolNocache","","",140,null],[13,"And","","",140,null],[13,"AndNocache","","",140,null],[13,"Or","","",140,null],[13,"OrNocache","","",140,null],[4,"Func","","",null,null],[13,"ScriptScore","","",141,null],[13,"RandomScore","","",141,null],[13,"FieldValueFactor","","",141,null],[13,"Linear","","",141,null],[13,"Exp","","",141,null],[13,"Gauss","","",141,null],[4,"Modifier","","",null,null],[13,"None","","",142,null],[13,"Log","","",142,null],[13,"Log1p","","",142,null],[13,"Log2p","","",142,null],[13,"Ln","","",142,null],[13,"Ln1p","","",142,null],[13,"Ln2p","","",142,null],[13,"Square","","",142,null],[13,"Sqrt","","",142,null],[13,"Reciprocal","","",142,null],[4,"MultiValueMode","","",null,null],[13,"Min","","",143,null],[13,"Max","","",143,null],[13,"Avg","","",143,null],[13,"Sum","","",143,null],[11,"from","alloc::boxed","",144,{"inputs":[{"name":"box"},{"name":"filter"}],"output":{"name":"box"}}],[11,"from","","",144,{"inputs":[{"name":"box"},{"name":"query"}],"output":{"name":"box"}}],[11,"fmt","rs_es::query","",125,{"inputs":[{"name":"query"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_match_all","","",125,{"inputs":[{"name":"query"}],"output":{"name":"matchallquery"}}],[11,"build_match","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"matchquery"}}],[11,"build_multi_match","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"multimatchquery"}}],[11,"build_bool","","",125,{"inputs":[{"name":"query"}],"output":{"name":"boolquery"}}],[11,"build_boosting","","",125,{"inputs":[{"name":"query"}],"output":{"name":"boostingquery"}}],[11,"build_common","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"commonquery"}}],[11,"build_constant_score","","",125,{"inputs":[{"name":"query"}],"output":{"name":"constantscorequery"}}],[11,"build_dis_max","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"dismaxquery"}}],[11,"build_filtered","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"filteredquery"}}],[11,"build_fuzzy_like_this","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"fuzzylikethisquery"}}],[11,"build_fuzzy_like_this_field","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"fuzzylikethisfieldquery"}}],[11,"build_function_score","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"functionscorequery"}}],[11,"build_fuzzy","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"fuzzyquery"}}],[11,"build_geo_shape","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"geoshapequery"}}],[11,"build_has_child","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"haschildquery"}}],[11,"build_has_parent","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"hasparentquery"}}],[11,"build_ids","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"idsquery"}}],[11,"build_indices","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"indicesquery"}}],[11,"build_more_like_this","","",125,{"inputs":[{"name":"query"}],"output":{"name":"morelikethisquery"}}],[11,"build_nested","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"nestedquery"}}],[11,"build_prefix","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"prefixquery"}}],[11,"build_query_string","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"querystringquery"}}],[11,"build_simple_query_string","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"simplequerystringquery"}}],[11,"build_range","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"rangequery"}}],[11,"build_regexp","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"regexpquery"}}],[11,"build_span_first","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"spanfirstquery"}}],[11,"build_span_multi","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"spanmultiquery"}}],[11,"build_span_near","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"spannearquery"}}],[11,"build_span_not","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"spannotquery"}}],[11,"build_span_or","","",125,{"inputs":[{"name":"query"},{"name":"a"}],"output":{"name":"spanorquery"}}],[11,"build_span_term","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"spantermquery"}}],[11,"build_term","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"termquery"}}],[11,"build_terms","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"termsquery"}}],[11,"build_wildcard","","",125,{"inputs":[{"name":"query"},{"name":"a"},{"name":"b"}],"output":{"name":"wildcardquery"}}],[11,"to_json","","",125,{"inputs":[{"name":"query"}],"output":{"name":"json"}}],[11,"fmt","","",126,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_and","","",126,{"inputs":[{"name":"filter"}],"output":{"name":"andfilter"}}],[11,"build_bool","","",126,{"inputs":[{"name":"filter"}],"output":{"name":"boolfilter"}}],[11,"build_exists","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"existsfilter"}}],[11,"build_geo_bounding_box","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"geoboundingboxfilter"}}],[11,"build_geo_distance","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"},{"name":"c"}],"output":{"name":"geodistancefilter"}}],[11,"build_geo_polygon","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"geopolygonfilter"}}],[11,"build_geo_shape","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"geoshapefilter"}}],[11,"build_geohash_cell","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"geohashcellfilter"}}],[11,"build_has_child","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"haschildfilter"}}],[11,"build_has_parent","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"hasparentfilter"}}],[11,"build_ids","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"idsfilter"}}],[11,"build_indices","","",126,{"inputs":[{"name":"filter"}],"output":{"name":"indicesfilter"}}],[11,"build_match_all","","",126,{"inputs":[{"name":"filter"}],"output":{"name":"matchallfilter"}}],[11,"build_missing","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"missingfilter"}}],[11,"build_nested","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"nestedfilter"}}],[11,"build_not","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"notfilter"}}],[11,"build_or","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"orfilter"}}],[11,"build_prefix","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"prefixfilter"}}],[11,"build_query","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"queryfilter"}}],[11,"build_range","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"rangefilter"}}],[11,"build_regexp","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"regexpfilter"}}],[11,"build_script","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"scriptfilter"}}],[11,"build_term","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"termfilter"}}],[11,"build_terms","","",126,{"inputs":[{"name":"filter"},{"name":"a"},{"name":"b"}],"output":{"name":"termsfilter"}}],[11,"build_type","","",126,{"inputs":[{"name":"filter"},{"name":"a"}],"output":{"name":"typefilter"}}],[11,"to_json","","",126,{"inputs":[{"name":"filter"}],"output":{"name":"json"}}],[11,"fmt","","",127,{"inputs":[{"name":"zerotermsquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",127,{"inputs":[{"name":"zerotermsquery"}],"output":{"name":"json"}}],[11,"fmt","","",128,{"inputs":[{"name":"fuzziness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",128,{"inputs":[{"name":"fuzziness"},{"name":"i64"}],"output":{"name":"fuzziness"}}],[11,"from","","",128,{"inputs":[{"name":"fuzziness"},{"name":"f64"}],"output":{"name":"fuzziness"}}],[11,"to_json","","",128,{"inputs":[{"name":"fuzziness"}],"output":{"name":"json"}}],[11,"fmt","","",129,{"inputs":[{"name":"matchtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",129,{"inputs":[{"name":"matchtype"}],"output":{"name":"json"}}],[11,"fmt","","",130,{"inputs":[{"name":"matchquerytype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",130,{"inputs":[{"name":"matchquerytype"}],"output":{"name":"json"}}],[11,"fmt","","",145,{"inputs":[{"name":"matchallquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",145,{"inputs":[{"name":"matchallquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",145,{"inputs":[{"name":"matchallquery"}],"output":{"name":"query"}}],[11,"to_json","","",145,{"inputs":[{"name":"matchallquery"}],"output":{"name":"json"}}],[11,"fmt","","",146,{"inputs":[{"name":"matchquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_type","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cutoff_frequency","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lenient","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_operator","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzziness","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_prefix_length","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_expansions","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_rewrite","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_zero_terms_query","","",146,{"inputs":[{"name":"matchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",146,{"inputs":[{"name":"matchquery"}],"output":{"name":"query"}}],[11,"to_json","","",146,{"inputs":[{"name":"matchquery"}],"output":{"name":"json"}}],[11,"fmt","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_use_dis_max","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_type","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_operator","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzziness","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_prefix_length","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_expansions","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_rewrite","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_zero_terms_query","","",147,{"inputs":[{"name":"multimatchquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",147,{"inputs":[{"name":"multimatchquery"}],"output":{"name":"query"}}],[11,"to_json","","",147,{"inputs":[{"name":"multimatchquery"}],"output":{"name":"json"}}],[11,"fmt","","",148,{"inputs":[{"name":"boolquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_must","","",148,{"inputs":[{"name":"boolquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_must_not","","",148,{"inputs":[{"name":"boolquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_should","","",148,{"inputs":[{"name":"boolquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",148,{"inputs":[{"name":"boolquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",148,{"inputs":[{"name":"boolquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",148,{"inputs":[{"name":"boolquery"}],"output":{"name":"query"}}],[11,"to_json","","",148,{"inputs":[{"name":"boolquery"}],"output":{"name":"json"}}],[11,"fmt","","",149,{"inputs":[{"name":"boostingquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_positive","","",149,{"inputs":[{"name":"boostingquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_negative","","",149,{"inputs":[{"name":"boostingquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_negative_boost","","",149,{"inputs":[{"name":"boostingquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",149,{"inputs":[{"name":"boostingquery"}],"output":{"name":"query"}}],[11,"to_json","","",149,{"inputs":[{"name":"boostingquery"}],"output":{"name":"json"}}],[11,"fmt","","",150,{"inputs":[{"name":"commonquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cutoff_frequency","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_low_freq_operator","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_high_freq_operator","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_disable_coord","","",150,{"inputs":[{"name":"commonquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",150,{"inputs":[{"name":"commonquery"}],"output":{"name":"query"}}],[11,"fmt","","",151,{"inputs":[{"name":"combinationminimumshouldmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",151,{"inputs":[{"name":"combinationminimumshouldmatch"},{"name":"a"},{"name":"b"}],"output":{"name":"combinationminimumshouldmatch"}}],[11,"to_string","","",151,{"inputs":[{"name":"combinationminimumshouldmatch"}],"output":{"name":"string"}}],[11,"to_json","","",151,{"inputs":[{"name":"combinationminimumshouldmatch"}],"output":{"name":"json"}}],[11,"fmt","","",131,{"inputs":[{"name":"minimumshouldmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",131,{"inputs":[{"name":"minimumshouldmatch"},{"name":"i64"}],"output":{"name":"minimumshouldmatch"}}],[11,"from","","",131,{"inputs":[{"name":"minimumshouldmatch"},{"name":"f64"}],"output":{"name":"minimumshouldmatch"}}],[11,"from","","",131,{"inputs":[{"name":"minimumshouldmatch"},{"name":"combinationminimumshouldmatch"}],"output":{"name":"minimumshouldmatch"}}],[11,"from","","",131,{"inputs":[{"name":"minimumshouldmatch"},{"name":"vec"}],"output":{"name":"minimumshouldmatch"}}],[11,"from","","",131,null],[11,"to_string","","",131,{"inputs":[{"name":"minimumshouldmatch"}],"output":{"name":"string"}}],[11,"to_json","","",131,{"inputs":[{"name":"minimumshouldmatch"}],"output":{"name":"json"}}],[11,"to_json","","",150,{"inputs":[{"name":"commonquery"}],"output":{"name":"json"}}],[11,"fmt","","",152,{"inputs":[{"name":"constantscorequery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_filter","","",152,{"inputs":[{"name":"constantscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_query","","",152,{"inputs":[{"name":"constantscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",152,{"inputs":[{"name":"constantscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",152,{"inputs":[{"name":"constantscorequery"}],"output":{"name":"query"}}],[11,"to_json","","",152,{"inputs":[{"name":"constantscorequery"}],"output":{"name":"json"}}],[11,"fmt","","",153,{"inputs":[{"name":"dismaxquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_tie_breaker","","",153,{"inputs":[{"name":"dismaxquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",153,{"inputs":[{"name":"dismaxquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",153,{"inputs":[{"name":"dismaxquery"}],"output":{"name":"query"}}],[11,"to_json","","",153,{"inputs":[{"name":"dismaxquery"}],"output":{"name":"json"}}],[11,"fmt","","",154,{"inputs":[{"name":"filteredquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_query","","",154,{"inputs":[{"name":"filteredquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_strategy","","",154,{"inputs":[{"name":"filteredquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",154,{"inputs":[{"name":"filteredquery"}],"output":{"name":"query"}}],[11,"fmt","","",132,{"inputs":[{"name":"strategy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",132,{"inputs":[{"name":"strategy"},{"name":"i64"}],"output":{"name":"strategy"}}],[11,"to_json","","",132,{"inputs":[{"name":"strategy"}],"output":{"name":"json"}}],[11,"to_json","","",154,{"inputs":[{"name":"filteredquery"}],"output":{"name":"json"}}],[11,"fmt","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_fields","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_ignore_tf","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_query_terms","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzziness","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_prefix_length","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",155,{"inputs":[{"name":"fuzzylikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",155,{"inputs":[{"name":"fuzzylikethisquery"}],"output":{"name":"query"}}],[11,"to_json","","",155,{"inputs":[{"name":"fuzzylikethisquery"}],"output":{"name":"json"}}],[11,"fmt","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_ignore_tf","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_query_terms","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzziness","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_prefix_length","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"}],"output":{"name":"query"}}],[11,"to_json","","",156,{"inputs":[{"name":"fuzzylikethisfieldquery"}],"output":{"name":"json"}}],[11,"fmt","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_query","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_filter","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_boost","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_score_mode","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost_mode","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_score","","",157,{"inputs":[{"name":"functionscorequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",157,{"inputs":[{"name":"functionscorequery"}],"output":{"name":"query"}}],[11,"fmt","","",133,{"inputs":[{"name":"scoremode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",133,{"inputs":[{"name":"scoremode"}],"output":{"name":"json"}}],[11,"fmt","","",134,{"inputs":[{"name":"boostmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",134,{"inputs":[{"name":"boostmode"}],"output":{"name":"json"}}],[11,"to_json","","",157,{"inputs":[{"name":"functionscorequery"}],"output":{"name":"json"}}],[11,"fmt","","",158,{"inputs":[{"name":"fuzzyquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",158,{"inputs":[{"name":"fuzzyquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzziness","","",158,{"inputs":[{"name":"fuzzyquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_prefix_length","","",158,{"inputs":[{"name":"fuzzyquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_expansions","","",158,{"inputs":[{"name":"fuzzyquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",158,{"inputs":[{"name":"fuzzyquery"}],"output":{"name":"query"}}],[11,"to_json","","",158,{"inputs":[{"name":"fuzzyquery"}],"output":{"name":"json"}}],[11,"fmt","","",159,{"inputs":[{"name":"shape"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",159,{"inputs":[{"name":"shape"},{"name":"a"},{"name":"vec"}],"output":{"name":"shape"}}],[11,"to_json","","",159,{"inputs":[{"name":"shape"}],"output":{"name":"json"}}],[11,"fmt","","",160,{"inputs":[{"name":"indexedshape"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",160,{"inputs":[{"name":"indexedshape"},{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"indexedshape"}}],[11,"to_json","","",160,{"inputs":[{"name":"indexedshape"}],"output":{"name":"json"}}],[11,"fmt","","",161,{"inputs":[{"name":"geoshapequery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_shape","","",161,{"inputs":[{"name":"geoshapequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_indexed_shape","","",161,{"inputs":[{"name":"geoshapequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",161,{"inputs":[{"name":"geoshapequery"}],"output":{"name":"query"}}],[11,"to_json","","",161,{"inputs":[{"name":"geoshapequery"}],"output":{"name":"json"}}],[11,"fmt","","",162,{"inputs":[{"name":"haschildquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_score_mode","","",162,{"inputs":[{"name":"haschildquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_children","","",162,{"inputs":[{"name":"haschildquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_children","","",162,{"inputs":[{"name":"haschildquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",162,{"inputs":[{"name":"haschildquery"}],"output":{"name":"query"}}],[11,"to_json","","",162,{"inputs":[{"name":"haschildquery"}],"output":{"name":"json"}}],[11,"fmt","","",163,{"inputs":[{"name":"hasparentquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_score_mode","","",163,{"inputs":[{"name":"hasparentquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",163,{"inputs":[{"name":"hasparentquery"}],"output":{"name":"query"}}],[11,"to_json","","",163,{"inputs":[{"name":"hasparentquery"}],"output":{"name":"json"}}],[11,"fmt","","",164,{"inputs":[{"name":"idsquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_type","","",164,{"inputs":[{"name":"idsquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",164,{"inputs":[{"name":"idsquery"}],"output":{"name":"query"}}],[11,"to_json","","",164,{"inputs":[{"name":"idsquery"}],"output":{"name":"json"}}],[11,"fmt","","",165,{"inputs":[{"name":"indicesquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_index","","",165,{"inputs":[{"name":"indicesquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_indices","","",165,{"inputs":[{"name":"indicesquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_no_match_query","","",165,{"inputs":[{"name":"indicesquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",165,{"inputs":[{"name":"indicesquery"}],"output":{"name":"query"}}],[11,"to_json","","",165,{"inputs":[{"name":"indicesquery"}],"output":{"name":"json"}}],[11,"fmt","","",166,{"inputs":[{"name":"doc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_doc","","",166,{"inputs":[{"name":"doc"},{"name":"a"},{"name":"b"},{"name":"json"}],"output":{"name":"doc"}}],[11,"id","","",166,{"inputs":[{"name":"doc"},{"name":"a"},{"name":"b"},{"name":"c"}],"output":{"name":"doc"}}],[11,"to_json","","",166,{"inputs":[{"name":"doc"}],"output":{"name":"json"}}],[11,"fmt","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_fields","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_like_text","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_ids","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_docs","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_query_terms","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_term_freq","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_doc_freq","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_doc_freq","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_word_length","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_word_length","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_stop_words","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost_terms","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_include","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",167,{"inputs":[{"name":"morelikethisquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",167,{"inputs":[{"name":"morelikethisquery"}],"output":{"name":"query"}}],[11,"to_json","","",167,{"inputs":[{"name":"morelikethisquery"}],"output":{"name":"json"}}],[11,"fmt","","",168,{"inputs":[{"name":"nestedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_score_mode","","",168,{"inputs":[{"name":"nestedquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",168,{"inputs":[{"name":"nestedquery"}],"output":{"name":"query"}}],[11,"to_json","","",168,{"inputs":[{"name":"nestedquery"}],"output":{"name":"json"}}],[11,"fmt","","",169,{"inputs":[{"name":"prefixquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",169,{"inputs":[{"name":"prefixquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_rewrite","","",169,{"inputs":[{"name":"prefixquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",169,{"inputs":[{"name":"prefixquery"}],"output":{"name":"query"}}],[11,"fmt","","",135,{"inputs":[{"name":"rewrite"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",135,{"inputs":[{"name":"rewrite"}],"output":{"name":"json"}}],[11,"to_json","","",169,{"inputs":[{"name":"prefixquery"}],"output":{"name":"json"}}],[11,"fmt","","",170,{"inputs":[{"name":"querystringquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_default_field","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_default_operator","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_allow_leading_wildcard","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lowercase_expanded_terms","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_enable_position_increments","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzzy_max_expansions","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzziness","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_fuzzy_prefix_length","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_phrase_slop","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyze_wildcard","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_auto_generate_phrase_queries","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_determined_states","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lenient","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_locale","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_time_zone","","",170,{"inputs":[{"name":"querystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",170,{"inputs":[{"name":"querystringquery"}],"output":{"name":"query"}}],[11,"to_json","","",170,{"inputs":[{"name":"querystringquery"}],"output":{"name":"json"}}],[11,"fmt","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_fields","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_default_operator","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_analyzer","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_flags","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lowercase_expanded_terms","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_locale","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lenient","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_minimum_should_match","","",171,{"inputs":[{"name":"simplequerystringquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",171,{"inputs":[{"name":"simplequerystringquery"}],"output":{"name":"query"}}],[11,"to_json","","",171,{"inputs":[{"name":"simplequerystringquery"}],"output":{"name":"json"}}],[11,"fmt","","",172,{"inputs":[{"name":"rangequery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_gte","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_gt","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lte","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lt","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_time_zone","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_format","","",172,{"inputs":[{"name":"rangequery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",172,{"inputs":[{"name":"rangequery"}],"output":{"name":"query"}}],[11,"to_json","","",172,{"inputs":[{"name":"rangequery"}],"output":{"name":"json"}}],[11,"fmt","","",173,{"inputs":[{"name":"regexpquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",173,{"inputs":[{"name":"regexpquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_flags","","",173,{"inputs":[{"name":"regexpquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_determined_states","","",173,{"inputs":[{"name":"regexpquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",173,{"inputs":[{"name":"regexpquery"}],"output":{"name":"query"}}],[11,"fmt","","",136,{"inputs":[{"name":"flag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",136,{"inputs":[{"name":"flag"}],"output":{"name":"string"}}],[11,"fmt","","",174,{"inputs":[{"name":"flags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",174,{"inputs":[{"name":"flags"}],"output":{"name":"flags"}}],[11,"add_flag","","",174,{"inputs":[{"name":"flags"},{"name":"flag"}],"output":{"name":"self"}}],[11,"to_json","","",174,{"inputs":[{"name":"flags"}],"output":{"name":"json"}}],[11,"to_json","","",173,{"inputs":[{"name":"regexpquery"}],"output":{"name":"json"}}],[11,"fmt","","",175,{"inputs":[{"name":"spanfirstquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","",175,{"inputs":[{"name":"spanfirstquery"}],"output":{"name":"query"}}],[11,"to_json","","",175,{"inputs":[{"name":"spanfirstquery"}],"output":{"name":"json"}}],[11,"fmt","","",176,{"inputs":[{"name":"spanmultiquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","",176,{"inputs":[{"name":"spanmultiquery"}],"output":{"name":"query"}}],[11,"to_json","","",176,{"inputs":[{"name":"spanmultiquery"}],"output":{"name":"json"}}],[11,"fmt","","",177,{"inputs":[{"name":"spannearquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_in_order","","",177,{"inputs":[{"name":"spannearquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_collect_payloads","","",177,{"inputs":[{"name":"spannearquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",177,{"inputs":[{"name":"spannearquery"}],"output":{"name":"query"}}],[11,"to_json","","",177,{"inputs":[{"name":"spannearquery"}],"output":{"name":"json"}}],[11,"fmt","","",178,{"inputs":[{"name":"spannotquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_pre","","",178,{"inputs":[{"name":"spannotquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_post","","",178,{"inputs":[{"name":"spannotquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_dist","","",178,{"inputs":[{"name":"spannotquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",178,{"inputs":[{"name":"spannotquery"}],"output":{"name":"query"}}],[11,"to_json","","",178,{"inputs":[{"name":"spannotquery"}],"output":{"name":"json"}}],[11,"fmt","","",179,{"inputs":[{"name":"spanorquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","",179,{"inputs":[{"name":"spanorquery"}],"output":{"name":"query"}}],[11,"to_json","","",179,{"inputs":[{"name":"spanorquery"}],"output":{"name":"json"}}],[11,"fmt","","",180,{"inputs":[{"name":"spantermquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",180,{"inputs":[{"name":"spantermquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",180,{"inputs":[{"name":"spantermquery"}],"output":{"name":"query"}}],[11,"to_json","","",180,{"inputs":[{"name":"spantermquery"}],"output":{"name":"json"}}],[11,"fmt","","",181,{"inputs":[{"name":"termquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",181,{"inputs":[{"name":"termquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",181,{"inputs":[{"name":"termquery"}],"output":{"name":"query"}}],[11,"to_json","","",181,{"inputs":[{"name":"termquery"}],"output":{"name":"json"}}],[11,"fmt","","",182,{"inputs":[{"name":"termsquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_minimum_should_match","","",182,{"inputs":[{"name":"termsquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",182,{"inputs":[{"name":"termsquery"}],"output":{"name":"query"}}],[11,"to_json","","",182,{"inputs":[{"name":"termsquery"}],"output":{"name":"json"}}],[11,"fmt","","",183,{"inputs":[{"name":"wildcardquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",183,{"inputs":[{"name":"wildcardquery"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",183,{"inputs":[{"name":"wildcardquery"}],"output":{"name":"query"}}],[11,"to_json","","",183,{"inputs":[{"name":"wildcardquery"}],"output":{"name":"json"}}],[11,"fmt","","",184,{"inputs":[{"name":"andfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_filters","","",184,{"inputs":[{"name":"andfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",184,{"inputs":[{"name":"andfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",184,{"inputs":[{"name":"andfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",184,{"inputs":[{"name":"andfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",184,{"inputs":[{"name":"andfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",184,{"inputs":[{"name":"andfilter"}],"output":{"name":"json"}}],[11,"fmt","","",185,{"inputs":[{"name":"boolfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_must","","",185,{"inputs":[{"name":"boolfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_must_not","","",185,{"inputs":[{"name":"boolfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_should","","",185,{"inputs":[{"name":"boolfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",185,{"inputs":[{"name":"boolfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",185,{"inputs":[{"name":"boolfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",185,{"inputs":[{"name":"boolfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",185,{"inputs":[{"name":"boolfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",185,{"inputs":[{"name":"boolfilter"}],"output":{"name":"json"}}],[11,"fmt","","",186,{"inputs":[{"name":"existsfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",186,{"inputs":[{"name":"existsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",186,{"inputs":[{"name":"existsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",186,{"inputs":[{"name":"existsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",186,{"inputs":[{"name":"existsfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",186,{"inputs":[{"name":"existsfilter"}],"output":{"name":"json"}}],[11,"fmt","","",187,{"inputs":[{"name":"geoboundingboxfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",187,{"inputs":[{"name":"geoboundingboxfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",187,{"inputs":[{"name":"geoboundingboxfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",187,{"inputs":[{"name":"geoboundingboxfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",187,{"inputs":[{"name":"geoboundingboxfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",187,{"inputs":[{"name":"geoboundingboxfilter"}],"output":{"name":"json"}}],[11,"fmt","","",188,{"inputs":[{"name":"geodistancefilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_distance_type","","",188,{"inputs":[{"name":"geodistancefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_optimize_bbox","","",188,{"inputs":[{"name":"geodistancefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",188,{"inputs":[{"name":"geodistancefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",188,{"inputs":[{"name":"geodistancefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",188,{"inputs":[{"name":"geodistancefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",188,{"inputs":[{"name":"geodistancefilter"}],"output":{"name":"filter"}}],[11,"fmt","","",189,{"inputs":[{"name":"distance"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",189,{"inputs":[{"name":"distance"},{"name":"f64"},{"name":"distanceunit"}],"output":{"name":"distance"}}],[11,"to_json","","",189,{"inputs":[{"name":"distance"}],"output":{"name":"json"}}],[11,"fmt","","",137,{"inputs":[{"name":"optimizebbox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",137,{"inputs":[{"name":"optimizebbox"}],"output":{"name":"json"}}],[11,"to_json","","",188,{"inputs":[{"name":"geodistancefilter"}],"output":{"name":"json"}}],[11,"fmt","","",190,{"inputs":[{"name":"geopolygonfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",190,{"inputs":[{"name":"geopolygonfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",190,{"inputs":[{"name":"geopolygonfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",190,{"inputs":[{"name":"geopolygonfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",190,{"inputs":[{"name":"geopolygonfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",190,{"inputs":[{"name":"geopolygonfilter"}],"output":{"name":"json"}}],[11,"fmt","","",191,{"inputs":[{"name":"geoshapefilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_shape","","",191,{"inputs":[{"name":"geoshapefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_indexed_shape","","",191,{"inputs":[{"name":"geoshapefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",191,{"inputs":[{"name":"geoshapefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",191,{"inputs":[{"name":"geoshapefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",191,{"inputs":[{"name":"geoshapefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",191,{"inputs":[{"name":"geoshapefilter"}],"output":{"name":"filter"}}],[11,"to_json","","",191,{"inputs":[{"name":"geoshapefilter"}],"output":{"name":"json"}}],[11,"fmt","","",192,{"inputs":[{"name":"geohashcellfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_precision","","",192,{"inputs":[{"name":"geohashcellfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_neighbors","","",192,{"inputs":[{"name":"geohashcellfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",192,{"inputs":[{"name":"geohashcellfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",192,{"inputs":[{"name":"geohashcellfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",192,{"inputs":[{"name":"geohashcellfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",192,{"inputs":[{"name":"geohashcellfilter"}],"output":{"name":"filter"}}],[11,"fmt","","",138,{"inputs":[{"name":"precision"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",138,{"inputs":[{"name":"precision"},{"name":"u64"}],"output":{"name":"precision"}}],[11,"from","","",138,{"inputs":[{"name":"precision"},{"name":"distance"}],"output":{"name":"precision"}}],[11,"to_json","","",138,{"inputs":[{"name":"precision"}],"output":{"name":"json"}}],[11,"to_json","","",192,{"inputs":[{"name":"geohashcellfilter"}],"output":{"name":"json"}}],[11,"fmt","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_query","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_filter","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_min_children","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_children","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",193,{"inputs":[{"name":"haschildfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",193,{"inputs":[{"name":"haschildfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",193,{"inputs":[{"name":"haschildfilter"}],"output":{"name":"json"}}],[11,"fmt","","",194,{"inputs":[{"name":"hasparentfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_query","","",194,{"inputs":[{"name":"hasparentfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_filter","","",194,{"inputs":[{"name":"hasparentfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",194,{"inputs":[{"name":"hasparentfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",194,{"inputs":[{"name":"hasparentfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",194,{"inputs":[{"name":"hasparentfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",194,{"inputs":[{"name":"hasparentfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",194,{"inputs":[{"name":"hasparentfilter"}],"output":{"name":"json"}}],[11,"fmt","","",195,{"inputs":[{"name":"idsfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_type","","",195,{"inputs":[{"name":"idsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",195,{"inputs":[{"name":"idsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",195,{"inputs":[{"name":"idsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",195,{"inputs":[{"name":"idsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",195,{"inputs":[{"name":"idsfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",195,{"inputs":[{"name":"idsfilter"}],"output":{"name":"json"}}],[11,"fmt","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_index","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_indices","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_filter","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_no_match_filter","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",196,{"inputs":[{"name":"indicesfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",196,{"inputs":[{"name":"indicesfilter"}],"output":{"name":"filter"}}],[11,"fmt","","",139,{"inputs":[{"name":"nomatchfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",139,{"inputs":[{"name":"nomatchfilter"},{"name":"filter"}],"output":{"name":"nomatchfilter"}}],[11,"to_json","","",139,{"inputs":[{"name":"nomatchfilter"}],"output":{"name":"json"}}],[11,"to_json","","",196,{"inputs":[{"name":"indicesfilter"}],"output":{"name":"json"}}],[11,"fmt","","",197,{"inputs":[{"name":"matchallfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",197,{"inputs":[{"name":"matchallfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",197,{"inputs":[{"name":"matchallfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",197,{"inputs":[{"name":"matchallfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",197,{"inputs":[{"name":"matchallfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",197,{"inputs":[{"name":"matchallfilter"}],"output":{"name":"json"}}],[11,"fmt","","",198,{"inputs":[{"name":"missingfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_existence","","",198,{"inputs":[{"name":"missingfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_null_value","","",198,{"inputs":[{"name":"missingfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",198,{"inputs":[{"name":"missingfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",198,{"inputs":[{"name":"missingfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",198,{"inputs":[{"name":"missingfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",198,{"inputs":[{"name":"missingfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",198,{"inputs":[{"name":"missingfilter"}],"output":{"name":"json"}}],[11,"fmt","","",199,{"inputs":[{"name":"nestedfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_score_mode","","",199,{"inputs":[{"name":"nestedfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_join","","",199,{"inputs":[{"name":"nestedfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",199,{"inputs":[{"name":"nestedfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",199,{"inputs":[{"name":"nestedfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",199,{"inputs":[{"name":"nestedfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",199,{"inputs":[{"name":"nestedfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",199,{"inputs":[{"name":"nestedfilter"}],"output":{"name":"json"}}],[11,"fmt","","",200,{"inputs":[{"name":"notfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",200,{"inputs":[{"name":"notfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",200,{"inputs":[{"name":"notfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",200,{"inputs":[{"name":"notfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",200,{"inputs":[{"name":"notfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",200,{"inputs":[{"name":"notfilter"}],"output":{"name":"json"}}],[11,"fmt","","",201,{"inputs":[{"name":"orfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",201,{"inputs":[{"name":"orfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",201,{"inputs":[{"name":"orfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",201,{"inputs":[{"name":"orfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",201,{"inputs":[{"name":"orfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",201,{"inputs":[{"name":"orfilter"}],"output":{"name":"json"}}],[11,"fmt","","",202,{"inputs":[{"name":"prefixfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",202,{"inputs":[{"name":"prefixfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",202,{"inputs":[{"name":"prefixfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",202,{"inputs":[{"name":"prefixfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",202,{"inputs":[{"name":"prefixfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",202,{"inputs":[{"name":"prefixfilter"}],"output":{"name":"json"}}],[11,"fmt","","",203,{"inputs":[{"name":"queryfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",203,{"inputs":[{"name":"queryfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",203,{"inputs":[{"name":"queryfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",203,{"inputs":[{"name":"queryfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",203,{"inputs":[{"name":"queryfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",203,{"inputs":[{"name":"queryfilter"}],"output":{"name":"json"}}],[11,"fmt","","",204,{"inputs":[{"name":"rangefilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_gte","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_gt","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lte","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_lt","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_boost","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_time_zone","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_format","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",204,{"inputs":[{"name":"rangefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",204,{"inputs":[{"name":"rangefilter"}],"output":{"name":"filter"}}],[11,"to_json","","",204,{"inputs":[{"name":"rangefilter"}],"output":{"name":"json"}}],[11,"fmt","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_boost","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_flags","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_max_determined_states","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",205,{"inputs":[{"name":"regexpfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",205,{"inputs":[{"name":"regexpfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",205,{"inputs":[{"name":"regexpfilter"}],"output":{"name":"json"}}],[11,"fmt","","",206,{"inputs":[{"name":"scriptfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_params","","",206,{"inputs":[{"name":"scriptfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",206,{"inputs":[{"name":"scriptfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",206,{"inputs":[{"name":"scriptfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",206,{"inputs":[{"name":"scriptfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",206,{"inputs":[{"name":"scriptfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",206,{"inputs":[{"name":"scriptfilter"}],"output":{"name":"json"}}],[11,"fmt","","",207,{"inputs":[{"name":"termfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",207,{"inputs":[{"name":"termfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",207,{"inputs":[{"name":"termfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",207,{"inputs":[{"name":"termfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",207,{"inputs":[{"name":"termfilter"}],"output":{"name":"filter"}}],[11,"to_json","","",207,{"inputs":[{"name":"termfilter"}],"output":{"name":"json"}}],[11,"fmt","","",208,{"inputs":[{"name":"termsfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_execution","","",208,{"inputs":[{"name":"termsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache","","",208,{"inputs":[{"name":"termsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",208,{"inputs":[{"name":"termsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",208,{"inputs":[{"name":"termsfilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",208,{"inputs":[{"name":"termsfilter"}],"output":{"name":"filter"}}],[11,"fmt","","",140,{"inputs":[{"name":"execution"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",140,{"inputs":[{"name":"execution"}],"output":{"name":"json"}}],[11,"to_json","","",208,{"inputs":[{"name":"termsfilter"}],"output":{"name":"json"}}],[11,"fmt","","",209,{"inputs":[{"name":"typefilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_cache","","",209,{"inputs":[{"name":"typefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_cache_key","","",209,{"inputs":[{"name":"typefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_name","","",209,{"inputs":[{"name":"typefilter"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",209,{"inputs":[{"name":"typefilter"}],"output":{"name":"filter"}}],[11,"to_json","","",209,{"inputs":[{"name":"typefilter"}],"output":{"name":"json"}}],[11,"fmt","","",141,{"inputs":[{"name":"func"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_script_score","","",141,{"inputs":[{"name":"func"},{"name":"a"}],"output":{"name":"scriptscorefunc"}}],[11,"build_random_score","","",141,{"inputs":[{"name":"func"},{"name":"a"}],"output":{"name":"randomscorefunc"}}],[11,"build_field_value_factor","","",141,{"inputs":[{"name":"func"},{"name":"a"}],"output":{"name":"fieldvaluefactorfunc"}}],[11,"build_linear","","",141,{"inputs":[{"name":"func"},{"name":"a"},{"name":"b"}],"output":{"name":"linearfunc"}}],[11,"build_exp","","",141,{"inputs":[{"name":"func"},{"name":"a"},{"name":"b"}],"output":{"name":"expfunc"}}],[11,"build_gauss","","",141,{"inputs":[{"name":"func"},{"name":"a"},{"name":"b"}],"output":{"name":"gaussfunc"}}],[11,"to_json","","",141,{"inputs":[{"name":"func"}],"output":{"name":"json"}}],[11,"fmt","","",210,{"inputs":[{"name":"scriptscorefunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_lang","","",210,{"inputs":[{"name":"scriptscorefunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_params","","",210,{"inputs":[{"name":"scriptscorefunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",210,{"inputs":[{"name":"scriptscorefunc"}],"output":{"name":"func"}}],[11,"to_json","","",210,{"inputs":[{"name":"scriptscorefunc"}],"output":{"name":"json"}}],[11,"fmt","","",211,{"inputs":[{"name":"randomscorefunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","",211,{"inputs":[{"name":"randomscorefunc"}],"output":{"name":"func"}}],[11,"to_json","","",211,{"inputs":[{"name":"randomscorefunc"}],"output":{"name":"json"}}],[11,"fmt","","",212,{"inputs":[{"name":"fieldvaluefactorfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_factor","","",212,{"inputs":[{"name":"fieldvaluefactorfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_modifier","","",212,{"inputs":[{"name":"fieldvaluefactorfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",212,{"inputs":[{"name":"fieldvaluefactorfunc"}],"output":{"name":"func"}}],[11,"fmt","","",142,{"inputs":[{"name":"modifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",142,{"inputs":[{"name":"modifier"}],"output":{"name":"json"}}],[11,"to_json","","",212,{"inputs":[{"name":"fieldvaluefactorfunc"}],"output":{"name":"json"}}],[11,"fmt","","",213,{"inputs":[{"name":"linearfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_scale","","",213,{"inputs":[{"name":"linearfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_offset","","",213,{"inputs":[{"name":"linearfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_decay","","",213,{"inputs":[{"name":"linearfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_multi_value_mode","","",213,{"inputs":[{"name":"linearfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",213,{"inputs":[{"name":"linearfunc"}],"output":{"name":"func"}}],[11,"fmt","","",143,{"inputs":[{"name":"multivaluemode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",143,{"inputs":[{"name":"multivaluemode"}],"output":{"name":"json"}}],[11,"to_json","","",213,{"inputs":[{"name":"linearfunc"}],"output":{"name":"json"}}],[11,"fmt","","",214,{"inputs":[{"name":"expfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_scale","","",214,{"inputs":[{"name":"expfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_offset","","",214,{"inputs":[{"name":"expfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_decay","","",214,{"inputs":[{"name":"expfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_multi_value_mode","","",214,{"inputs":[{"name":"expfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",214,{"inputs":[{"name":"expfunc"}],"output":{"name":"func"}}],[11,"to_json","","",214,{"inputs":[{"name":"expfunc"}],"output":{"name":"json"}}],[11,"fmt","","",215,{"inputs":[{"name":"gaussfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_scale","","",215,{"inputs":[{"name":"gaussfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_offset","","",215,{"inputs":[{"name":"gaussfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_decay","","",215,{"inputs":[{"name":"gaussfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"with_multi_value_mode","","",215,{"inputs":[{"name":"gaussfunc"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",215,{"inputs":[{"name":"gaussfunc"}],"output":{"name":"func"}}],[11,"to_json","","",215,{"inputs":[{"name":"gaussfunc"}],"output":{"name":"json"}}],[11,"fmt","","",216,{"inputs":[{"name":"function"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",216,{"inputs":[{"name":"function"},{"name":"func"}],"output":{"name":"function"}}],[11,"with_filter","","",216,{"inputs":[{"name":"function"},{"name":"filter"}],"output":{"name":"function"}}],[11,"with_weight","","",216,{"inputs":[{"name":"function"},{"name":"f64"}],"output":{"name":"function"}}],[11,"to_json","","",216,{"inputs":[{"name":"function"}],"output":{"name":"json"}}],[0,"units","rs_es","Various re-occuring types that are used by the ElasticSearch API.",null,null],[3,"Duration","rs_es::units","A time-period unit, will be formatted into the ElasticSearch standard format",null,null],[4,"DurationUnit","","The units by which duration is measured.",null,null],[13,"Week","","",217,null],[13,"Day","","",217,null],[13,"Hour","","",217,null],[13,"Minute","","",217,null],[13,"Month","","",217,null],[4,"Location","","Representing a geographic location",null,null],[13,"LatLon","","",218,null],[13,"GeoHash","","",218,null],[4,"GeoBox","","Representing a geographic box",null,null],[13,"Corners","","",219,null],[13,"Vertices","","",219,null],[4,"OneOrMany","","A non-specific holder for an option which can either be a single thing, or\nmultiple instances of that thing.",null,null],[13,"One","","",220,null],[13,"Many","","",220,null],[4,"DistanceType","","DistanceType",null,null],[13,"SloppyArc","","",221,null],[13,"Arc","","",221,null],[13,"Plane","","",221,null],[4,"DistanceUnit","","DistanceUnit",null,null],[13,"Mile","","",222,null],[13,"Yard","","",222,null],[13,"Feet","","",222,null],[13,"Inch","","",222,null],[13,"Kilometer","","",222,null],[13,"Meter","","",222,null],[13,"Centimeter","","",222,null],[13,"Millimeter","","",222,null],[13,"NauticalMile","","",222,null],[4,"JsonVal","","A Json value that's not a structural thing - i.e. just String, i64 and f64,\nno array or object",null,null],[13,"String","","",223,null],[13,"I64","","",223,null],[13,"U64","","",223,null],[13,"F64","","",223,null],[11,"fmt","","",217,{"inputs":[{"name":"durationunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",217,{"inputs":[{"name":"durationunit"}],"output":{"name":"string"}}],[11,"fmt","","",224,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",224,{"inputs":[{"name":"duration"},{"name":"i64"},{"name":"durationunit"}],"output":{"name":"duration"}}],[11,"to_string","","",224,{"inputs":[{"name":"duration"}],"output":{"name":"string"}}],[11,"to_json","","",224,{"inputs":[{"name":"duration"}],"output":{"name":"json"}}],[11,"from","rs_es::operations::common","",7,{"inputs":[{"name":"optionval"},{"name":"duration"}],"output":{"name":"optionval"}}],[11,"from","","",7,{"inputs":[{"name":"optionval"},{"name":"duration"}],"output":{"name":"optionval"}}],[11,"fmt","rs_es::units","",218,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",218,{"inputs":[{"name":"location"},{"name":"json"}],"output":{"name":"location"}}],[11,"from","","",218,null],[11,"from","","",218,{"inputs":[{"name":"location"},{"name":"string"}],"output":{"name":"location"}}],[11,"to_json","","",218,{"inputs":[{"name":"location"}],"output":{"name":"json"}}],[11,"fmt","","",219,{"inputs":[{"name":"geobox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",219,{"inputs":[{"name":"geobox"},{"name":"json"}],"output":{"name":"geobox"}}],[11,"from","","",219,null],[11,"from","","",219,null],[11,"from","","",219,null],[11,"to_json","","",219,{"inputs":[{"name":"geobox"}],"output":{"name":"json"}}],[11,"fmt","","",220,{"inputs":[{"name":"oneormany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",220,{"inputs":[{"name":"oneormany"},{"name":"t"}],"output":{"name":"oneormany"}}],[11,"from","","",220,{"inputs":[{"name":"oneormany"},{"name":"vec"}],"output":{"name":"oneormany"}}],[11,"to_json","","",220,{"inputs":[{"name":"oneormany"}],"output":{"name":"json"}}],[11,"fmt","","",221,{"inputs":[{"name":"distancetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",221,{"inputs":[{"name":"distancetype"}],"output":{"name":"json"}}],[11,"fmt","","",222,{"inputs":[{"name":"distanceunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",222,{"inputs":[{"name":"distanceunit"}],"output":{"name":"string"}}],[11,"to_json","","",222,{"inputs":[{"name":"distanceunit"}],"output":{"name":"json"}}],[11,"fmt","","",223,{"inputs":[{"name":"jsonval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",223,{"inputs":[{"name":"jsonval"}],"output":{"name":"json"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"string"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"str"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"f64"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"i32"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"i64"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"u32"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"u64"}],"output":{"name":"jsonval"}}],[11,"from","","",223,{"inputs":[{"name":"jsonval"},{"name":"json"}],"output":{"name":"jsonval"}}],[11,"new","rs_es","Create a new client",225,{"inputs":[{"name":"client"},{"name":"str"},{"name":"u32"}],"output":{"name":"client"}}],[11,"full_url","","Take a nearly complete ElasticSearch URL, and stick the host/port part\non the front.",225,{"inputs":[{"name":"client"},{"name":"str"}],"output":{"name":"string"}}],[11,"version","","Calls the base ES path, returning the version number",225,{"inputs":[{"name":"client"}],"output":{"name":"result"}}],[11,"refresh","","Refresh",225,{"inputs":[{"name":"client"}],"output":{"name":"refreshoperation"}}],[11,"index","","An index operation to index a document in the specified index.",225,{"inputs":[{"name":"client"},{"name":"str"},{"name":"str"}],"output":{"name":"indexoperation"}}],[11,"get","","Implementation of the ES GET API",225,{"inputs":[{"name":"client"},{"name":"str"},{"name":"str"}],"output":{"name":"getoperation"}}],[11,"delete","","Delete by ID",225,{"inputs":[{"name":"client"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"deleteoperation"}}],[11,"delete_by_query","","Delete by query",225,{"inputs":[{"name":"client"}],"output":{"name":"deletebyqueryoperation"}}],[11,"bulk","","Bulk",225,null],[11,"analyze","","Analyze",225,{"inputs":[{"name":"client"},{"name":"str"}],"output":{"name":"analyzeoperation"}}],[11,"search_uri","","Search via the query parameter",225,{"inputs":[{"name":"client"}],"output":{"name":"searchurioperation"}}],[11,"search_query","","Search via the query DSL",225,{"inputs":[{"name":"client"}],"output":{"name":"searchqueryoperation"}}]],"paths":[[8,"StrJoin"],[4,"EsError"],[3,"ShardCountResult"],[3,"RefreshResult"],[4,"VersionType"],[4,"Consistency"],[4,"DefaultOperator"],[3,"OptionVal"],[3,"Options"],[3,"ActionResult"],[3,"BulkResult"],[4,"ActionType"],[3,"ActionSource"],[3,"Action"],[3,"BulkOperation"],[3,"DeleteResult"],[3,"DeleteByQueryIndexResult"],[3,"DeleteByQueryResult"],[3,"DeleteOperation"],[3,"DeleteByQueryOperation"],[3,"GetResult"],[4,"Preference"],[3,"GetOperation"],[3,"IndexResult"],[4,"OpType"],[3,"IndexOperation"],[3,"SearchHitsHitsResult"],[3,"SearchHitsResult"],[3,"SearchResult"],[3,"ScanResult"],[4,"SearchType"],[4,"Order"],[4,"Mode"],[4,"Missing"],[4,"SortBy"],[4,"Source"],[3,"Missing"],[3,"Nested"],[3,"MinResult"],[3,"MaxResult"],[3,"SumResult"],[3,"AvgResult"],[3,"StatsResult"],[3,"Bounds"],[3,"ExtendedStatsResult"],[3,"ValueCountResult"],[3,"PercentilesResult"],[3,"PercentileRanksResult"],[3,"CardinalityResult"],[3,"GeoBoundsResult"],[3,"ScriptedMetricResult"],[3,"GlobalResult"],[3,"FilterResult"],[3,"FiltersBucketResult"],[3,"FiltersResult"],[3,"MissingResult"],[3,"NestedResult"],[3,"ReverseNestedResult"],[3,"ChildrenResult"],[3,"TermsBucketResult"],[3,"TermsResult"],[3,"RangeBucketResult"],[3,"RangeResult"],[3,"DateRangeBucketResult"],[3,"DateRangeResult"],[3,"HistogramBucketResult"],[3,"HistogramResult"],[3,"DateHistogramBucketResult"],[3,"DateHistogramResult"],[3,"GeoDistanceBucketResult"],[3,"GeoDistanceResult"],[3,"GeoHashBucketResult"],[3,"GeoHashResult"],[4,"Scripts"],[4,"FieldOrScript"],[4,"MetricsAggregation"],[4,"OrderKey"],[4,"TimeZone"],[4,"Interval"],[4,"BucketAggregation"],[4,"Aggregation"],[4,"AggregationResult"],[3,"Script"],[3,"Min"],[3,"Max"],[3,"Sum"],[3,"Avg"],[3,"Stats"],[3,"ExtendedStats"],[3,"ValueCount"],[3,"Percentiles"],[3,"PercentileRanks"],[3,"Cardinality"],[3,"GeoBounds"],[3,"ScriptedMetric"],[3,"Global"],[3,"Filter"],[3,"Filters"],[3,"ReverseNested"],[3,"Children"],[3,"Order"],[3,"Terms"],[3,"RangeInst"],[3,"Range"],[3,"DateRangeInst"],[3,"DateRange"],[3,"ExtendedBounds"],[3,"Histogram"],[3,"DateHistogram"],[3,"GeoDistanceInst"],[3,"GeoDistance"],[3,"GeoHash"],[3,"Aggregations"],[3,"AggregationsResult"],[3,"SortField"],[3,"GeoDistance"],[3,"Script"],[3,"Sort"],[3,"SearchURIOperation"],[3,"SearchQueryOperation"],[3,"ScanIterator"],[3,"AnalyzeResult"],[3,"Token"],[3,"AnalyzeOperation"],[3,"RefreshOperation"],[4,"Query"],[4,"Filter"],[4,"ZeroTermsQuery"],[4,"Fuzziness"],[4,"MatchType"],[4,"MatchQueryType"],[4,"MinimumShouldMatch"],[4,"Strategy"],[4,"ScoreMode"],[4,"BoostMode"],[4,"Rewrite"],[4,"Flag"],[4,"OptimizeBbox"],[4,"Precision"],[4,"NoMatchFilter"],[4,"Execution"],[4,"Func"],[4,"Modifier"],[4,"MultiValueMode"],[3,"Box"],[3,"MatchAllQuery"],[3,"MatchQuery"],[3,"MultiMatchQuery"],[3,"BoolQuery"],[3,"BoostingQuery"],[3,"CommonQuery"],[3,"CombinationMinimumShouldMatch"],[3,"ConstantScoreQuery"],[3,"DisMaxQuery"],[3,"FilteredQuery"],[3,"FuzzyLikeThisQuery"],[3,"FuzzyLikeThisFieldQuery"],[3,"FunctionScoreQuery"],[3,"FuzzyQuery"],[3,"Shape"],[3,"IndexedShape"],[3,"GeoShapeQuery"],[3,"HasChildQuery"],[3,"HasParentQuery"],[3,"IdsQuery"],[3,"IndicesQuery"],[3,"Doc"],[3,"MoreLikeThisQuery"],[3,"NestedQuery"],[3,"PrefixQuery"],[3,"QueryStringQuery"],[3,"SimpleQueryStringQuery"],[3,"RangeQuery"],[3,"RegexpQuery"],[3,"Flags"],[3,"SpanFirstQuery"],[3,"SpanMultiQuery"],[3,"SpanNearQuery"],[3,"SpanNotQuery"],[3,"SpanOrQuery"],[3,"SpanTermQuery"],[3,"TermQuery"],[3,"TermsQuery"],[3,"WildcardQuery"],[3,"AndFilter"],[3,"BoolFilter"],[3,"ExistsFilter"],[3,"GeoBoundingBoxFilter"],[3,"GeoDistanceFilter"],[3,"Distance"],[3,"GeoPolygonFilter"],[3,"GeoShapeFilter"],[3,"GeohashCellFilter"],[3,"HasChildFilter"],[3,"HasParentFilter"],[3,"IdsFilter"],[3,"IndicesFilter"],[3,"MatchAllFilter"],[3,"MissingFilter"],[3,"NestedFilter"],[3,"NotFilter"],[3,"OrFilter"],[3,"PrefixFilter"],[3,"QueryFilter"],[3,"RangeFilter"],[3,"RegexpFilter"],[3,"ScriptFilter"],[3,"TermFilter"],[3,"TermsFilter"],[3,"TypeFilter"],[3,"ScriptScoreFunc"],[3,"RandomScoreFunc"],[3,"FieldValueFactorFunc"],[3,"LinearFunc"],[3,"ExpFunc"],[3,"GaussFunc"],[3,"Function"],[4,"DurationUnit"],[4,"Location"],[4,"GeoBox"],[4,"OneOrMany"],[4,"DistanceType"],[4,"DistanceUnit"],[4,"JsonVal"],[3,"Duration"],[3,"Client"]]};
searchIndex['hyper'] = {"items":[[0,"","hyper","# Hyper",null,null],[11,"parse","url","Parse an URL with the default `UrlParser` parameters.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",0,null],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"clone","url::encoding","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"encodingoverride"}}],[11,"utf8","","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"encodingoverride"}}],[11,"lookup","","",1,null],[11,"is_utf8","","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"bool"}}],[11,"decode","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"encodingoverride"},{"name":"str"}],"output":{"name":"cow"}}],[11,"cmp","url::host","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"ipv6address"}],"output":{"name":"ipv6address"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"host"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","Serialize the host as a string.",2,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",3,{"inputs":[{"name":"ipv6address"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","Serialize the IPv6 address to a string.",3,{"inputs":[{"name":"ipv6address"}],"output":{"name":"string"}}],[11,"fmt","","",3,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","url::parser","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"context"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"context"},{"name":"context"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"charranges"}],"output":{"name":"option"}}],[11,"clone","url::percent_encoding","",7,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[11,"fmt","url::format","",8,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","url","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Return a new UrlParser with default parameters.",13,{"inputs":[{"name":"urlparser"}],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",13,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",13,null],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",13,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",13,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",13,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",14,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",14,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",14,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"url"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",12,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",12,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Url","hyper","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",0,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",0,null],[12,"query","","The query string of the URL.",0,null],[12,"fragment","","The fragment identifier of the URL.",0,null],[11,"matches","language_tags","Matches language tags like described in\n[RFC4647#Extended filtering](https://tools.ietf.org/html/rfc4647#section-3.3.2)",15,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",16,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"fmt","","",15,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"default","","",15,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"from_str","","",15,{"inputs":[{"name":"languagetag"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"LanguageTag","hyper","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",15,null],[12,"extlang","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",15,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",15,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",15,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",15,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",15,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",15,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",17,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",17,null],[13,"BufBody","","A String has a size, and uses Content-Length.",17,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don't follow any redirects.",18,null],[13,"FollowAll","","Follow all redirects.",18,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",18,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections *per host*.",19,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",19,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",20,{"inputs":[{"name":"pool"},{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",20,{"inputs":[{"name":"pool"},{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",20,{"inputs":[{"name":"pool"}],"output":null}],[11,"connect","","",20,{"inputs":[{"name":"pool"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",21,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"close","","",21,{"inputs":[{"name":"pooledstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",21,{"inputs":[{"name":"pooledstream"},{"name":"bool"}],"output":null}],[11,"previous_response_expected_no_content","","",21,{"inputs":[{"name":"pooledstream"}],"output":{"name":"bool"}}],[11,"drop","","",21,{"inputs":[{"name":"pooledstream"}],"output":null}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server.\nThe W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",22,null],[12,"version","","The HTTP version of this request.",22,null],[11,"headers","","Read the Request headers.",22,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",22,{"inputs":[{"name":"request"}],"output":{"name":"method"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication\nwith the server. This implies that the given `HttpMessage` instance has already been\nproperly initialized by the caller (e.g. a TCP connection's already established).",22,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",22,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",22,{"inputs":[{"name":"request"},{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",22,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",22,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",22,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",23,null],[12,"headers","","The headers from the server.",23,null],[12,"version","","The HTTP version of this response from the server.",23,null],[12,"url","","The final URL of this response.",23,null],[11,"fmt","","",23,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",23,{"inputs":[{"name":"response"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",23,{"inputs":[{"name":"response"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",23,{"inputs":[{"name":"response"}],"output":{"name":"rawstatus"}}],[11,"read","","",23,null],[11,"drop","","",23,{"inputs":[{"name":"response"}],"output":null}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",24,{"inputs":[{"name":"intourl"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",25,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",25,{"inputs":[{"name":"client"},{"name":"config"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",25,{"inputs":[{"name":"client"},{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",25,{"inputs":[{"name":"client"},{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",25,{"inputs":[{"name":"client"},{"name":"redirectpolicy"}],"output":null}],[11,"get","","Build a Get request.",25,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",25,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",25,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",25,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",25,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",25,{"inputs":[{"name":"client"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",25,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",26,{"inputs":[{"name":"requestbuilder"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",26,{"inputs":[{"name":"requestbuilder"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",26,{"inputs":[{"name":"requestbuilder"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",26,{"inputs":[{"name":"requestbuilder"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"from","","",17,{"inputs":[{"name":"body"},{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","hyper","",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"clone","hyper::client","",18,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",18,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"Error","hyper::error","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",27,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",27,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",27,null],[13,"Header","","An invalid `Header`.",27,null],[13,"TooLarge","","A message head is too large to be reasonable.",27,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",27,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",27,null],[13,"Ssl","","An error from a SSL library.",27,null],[13,"Http2","","An HTTP/2-specific error, coming from the `solicit` library.",27,null],[13,"Utf8","","Parsing a field as string failed",27,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",27,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"sslerror"}],"output":{"name":"error"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",27,{"inputs":[{"name":"error"},{"name":"http2error"}],"output":{"name":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",28,null],[13,"Get","","GET",28,null],[13,"Post","","POST",28,null],[13,"Put","","PUT",28,null],[13,"Delete","","DELETE",28,null],[13,"Head","","HEAD",28,null],[13,"Trace","","TRACE",28,null],[13,"Connect","","CONNECT",28,null],[13,"Patch","","PATCH",28,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",28,null],[11,"fmt","","",28,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"as_ref","","",28,{"inputs":[{"name":"method"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is\nessentially read-only.",28,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has\nthe same result is executed multiple times.",28,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"from_str","","",28,{"inputs":[{"name":"method"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[3,"EntityTag","hyper::header","An entity tag, defined in [RFC7232](https://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[12,"weak","","Weakness indicator for the tag",29,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-5.3.1).",null,null],[12,"item","","The actual contents of the field.",30,null],[12,"quality","","The quality (client or server preference) for the value.",30,null],[3,"Accept","","`Accept` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.2)",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-methods-response-header)",null,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-max-age-response-header)",null,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-headers-request-header)",null,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-method-request-header)",null,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.3)",null,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.4)",null,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.5)",null,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-2.3)",null,null],[3,"Allow","","`Allow` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.1)",null,null],[3,"Authorization","","`Authorization` header, defined in [RFC7235](https://tools.ietf.org/html/rfc7235#section-4.2)",null,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",31,null],[12,"password","","The password. `None` if the `:` delimiter character was not\npart of the parsed input.",31,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",32,null],[3,"CacheControl","","`Cache-Control` header, defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2)",null,null],[3,"Connection","","`Connection` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-6.1)",null,null],[3,"ContentLength","","`Content-Length` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.2)",null,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.2.2)",null,null],[3,"ContentLanguage","","`Content-Language` header, defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-3.1.3.2)",null,null],[3,"ContentRange","","`Content-Range` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[3,"ContentType","","`Content-Type` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.1.5)",null,null],[3,"Cookie","","`Cookie` header, defined in [RFC6265](http://tools.ietf.org/html/rfc6265#section-5.4)",null,null],[3,"Date","","`Date` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.1.2)",null,null],[3,"ETag","","`ETag` header, defined in [RFC7232](http://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[3,"Expires","","`Expires` header, defined in [RFC7234](http://tools.ietf.org/html/rfc7234#section-5.3)",null,null],[3,"From","","`From` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.1)",null,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",33,null],[12,"port","","An optional port number.",33,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.3)",null,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.4)",null,null],[3,"LastModified","","`Last-Modified` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-2.2)",null,null],[3,"Location","","`Location` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.2)",null,null],[3,"Referer","","`Referer` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.2)",null,null],[3,"Server","","`Server` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.2)",null,null],[3,"SetCookie","","`Set-Cookie` header, defined [RFC6265](http://tools.ietf.org/html/rfc6265#section-4.1)",null,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in [RFC6797](https://tools.ietf.org/html/rfc6797)",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as\nany subdomains of the host's domain name.",34,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header\nfield, during which the UA regards the host (from whom the message was\nreceived) as a Known HSTS Host.",34,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.1)",null,null],[3,"Upgrade","","`Upgrade` header, defined in [RFC7230](http://tools.ietf.org/html/rfc7230#section-6.7)",null,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",35,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",35,null],[3,"UserAgent","","`User-Agent` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.3)",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",36,null],[13,"Iso_8859_1","","ISO-8859-1",36,null],[13,"Iso_8859_2","","ISO-8859-2",36,null],[13,"Iso_8859_3","","ISO-8859-3",36,null],[13,"Iso_8859_4","","ISO-8859-4",36,null],[13,"Iso_8859_5","","ISO-8859-5",36,null],[13,"Iso_8859_6","","ISO-8859-6",36,null],[13,"Iso_8859_7","","ISO-8859-7",36,null],[13,"Iso_8859_8","","ISO-8859-8",36,null],[13,"Iso_8859_9","","ISO-8859-9",36,null],[13,"Iso_8859_10","","ISO-8859-10",36,null],[13,"Shift_Jis","","Shift_JIS",36,null],[13,"Euc_Jp","","EUC-JP",36,null],[13,"Iso_2022_Kr","","ISO-2022-KR",36,null],[13,"Euc_Kr","","EUC-KR",36,null],[13,"Iso_2022_Jp","","ISO-2022-JP",36,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",36,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",36,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",36,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",36,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",36,null],[13,"Gb2312","","GB2312",36,null],[13,"Big5","","Big5",36,null],[13,"Koi8_R","","KOI8-R",36,null],[13,"Ext","","An arbitrary charset specified as a string",36,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding`\nor `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",37,null],[13,"Gzip","","The `gzip` encoding.",37,null],[13,"Deflate","","The `deflate` encoding.",37,null],[13,"Compress","","The `compress` encoding.",37,null],[13,"Identity","","The `identity` encoding.",37,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",37,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header,\npart of [CORS](http://www.w3.org/TR/cors/#access-control-allow-origin-response-header)",null,null],[13,"Any","","Allow all origins",38,null],[13,"Null","","A hidden origin",38,null],[13,"Value","","Allow one particular origin",38,null],[4,"RangeUnit","","Range Units, described in [RFC7233](http://tools.ietf.org/html/rfc7233#section-2)",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",39,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",39,null],[13,"Unregistered","","The given range unit is not registered at IANA.",39,null],[4,"CacheDirective","","CacheControl contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",40,null],[13,"NoStore","","\"no-store\"",40,null],[13,"NoTransform","","\"no-transform\"",40,null],[13,"OnlyIfCached","","\"only-if-cached\"",40,null],[13,"MaxAge","","\"max-age=delta\"",40,null],[13,"MaxStale","","\"max-stale=delta\"",40,null],[13,"MinFresh","","\"min-fresh=delta\"",40,null],[13,"MustRevalidate","","\"must-revalidate\"",40,null],[13,"Public","","\"public\"",40,null],[13,"Private","","\"private\"",40,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",40,null],[13,"SMaxAge","","\"s-maxage=delta\"",40,null],[13,"Extension","","Extension directives. Optionally include an argument.",40,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",41,null],[13,"Close","","The `close` connection value.",41,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",41,null],[4,"ContentRangeSpec","","Content-Range, described in [RFC7233](https://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[13,"Bytes","","Byte range",42,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be\nsatisfied",42,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",42,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",42,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",42,null],[12,"resp","","other-range-resp",42,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",43,null],[4,"IfMatch","","`If-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.1)",null,null],[13,"Any","","Any value is a match",44,null],[13,"Items","","Only the listed items are a match",44,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.2)",null,null],[13,"Any","","Any value is a match",45,null],[13,"Items","","Only the listed items are a match",45,null],[4,"IfRange","","`If-Range` header, defined in [RFC7233](http://tools.ietf.org/html/rfc7233#section-3.2)",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",46,null],[13,"Date","","The date when the client retrieved the resource",46,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",47,null],[13,"Ext","","Every value other than `no-cache`.",47,null],[4,"Range","","`Range` header, defined in [RFC7233](https://tools.ietf.org/html/rfc7233#section-3.1)",null,null],[13,"Bytes","","Byte range",48,null],[13,"Unregistered","","Custom range, with unit not registered at IANA\n(`other-range-unit`: String , `other-range-set`: String)",48,null],[4,"ByteRangeSpec","","Each Range::Bytes header can contain one or more ByteRangeSpecs.\nEach ByteRangeSpec defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",49,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",49,null],[13,"Last","","Get last x bytes (\"-x\")",49,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive\nexcept for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",50,null],[13,"Tls","","`TLS` value, Transport Layer Security [RFC2817](http://tools.ietf.org/html/rfc2817)",50,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol\n[RFC6455](http://tools.ietf.org/html/rfc6455)",50,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",50,null],[13,"Unregistered","","Any other protocol name not known to hyper",50,null],[4,"Vary","","`Vary` header, defined in [RFC7231](https://tools.ietf.org/html/rfc7231#section-7.1.4)",null,null],[13,"Any","","Any value is a match",51,null],[13,"Items","","Only the listed items are a match",51,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem`\nSets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` fromt a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[11,"eq","","",52,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"accept"}],"output":{"name":"accept"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",53,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",53,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",53,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",53,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",53,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",53,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",53,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",53,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",53,null],[11,"as_slice","","Extracts a slice containing the entire vector.",53,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",53,null],[11,"set_len","","Sets the length of a vector.",53,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",53,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",53,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",53,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",53,null],[11,"push","","Appends an element to the back of a collection.",53,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",53,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",53,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",53,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",53,null],[11,"len","","Returns the number of elements in the vector.",53,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",53,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",53,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",53,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",53,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",53,null],[11,"clone","collections::binary_heap","",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",54,null],[11,"default","","",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",54,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",54,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",54,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",54,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",54,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",54,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",54,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",54,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",54,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",54,null],[11,"drop","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",54,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",54,null],[11,"extend","","",54,null],[11,"next","collections::btree::node","",59,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",59,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",59,null],[11,"drop","","",60,null],[11,"as_slices","","",60,null],[11,"as_slices_mut","","",60,null],[11,"as_slices_internal","","",60,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",60,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",60,null],[11,"keys_mut","","",60,null],[11,"vals","","",60,null],[11,"vals_mut","","",60,null],[11,"edges","","",60,null],[11,"edges_mut","","",60,null],[11,"clone","","",60,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",60,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",60,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",60,null],[11,"len","","How many key-value pairs the node contains",60,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",60,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",60,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",60,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",60,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",60,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",61,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",61,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",61,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",61,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",61,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",61,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",61,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",61,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",61,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",61,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",61,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",61,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",61,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",61,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",60,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",60,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",60,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",60,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",60,null],[11,"clone","","",62,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",62,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",62,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",62,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",62,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",63,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",63,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",63,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",63,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",63,null],[11,"clone","","",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",64,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",65,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",65,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",65,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",66,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",66,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",66,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",68,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",67,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",67,null],[11,"get","","Returns a reference to the value corresponding to the key.",67,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",67,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",67,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",67,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",67,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",69,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",70,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",70,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",71,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",71,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",72,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",72,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",72,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",72,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",72,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",67,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"hash","","",67,null],[11,"default","","",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",67,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",67,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",67,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",64,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",64,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",64,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",68,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",76,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",76,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",77,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",78,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",79,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",80,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",80,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",81,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",82,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",82,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",82,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",82,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",82,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",67,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",67,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",67,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",67,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",83,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",83,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",83,null],[11,"contains","","Returns `true` if the set contains a value.",83,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",83,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",83,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",83,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",83,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",83,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",83,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",83,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"default","","",83,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",83,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",86,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",87,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",88,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",89,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",90,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",91,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",91,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",91,null],[11,"into_owned","","Extracts the owned data.",91,null],[11,"deref","","",91,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",91,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",91,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",91,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"into_cow","","",91,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",91,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",92,null],[11,"cmp","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",92,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",92,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",92,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",92,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",92,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",92,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",92,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",92,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",92,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",92,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",93,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",93,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"from_iter","","",92,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",92,null],[11,"extend","","",92,null],[11,"clone","core::fmt::rt::v1","",94,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",95,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",96,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",97,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",98,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",99,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",100,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",101,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",101,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",102,null],[11,"iter","","Provides a forward iterator.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",102,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",102,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",102,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",102,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",102,null],[11,"next","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",103,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",102,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",102,null],[11,"extend","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",102,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",102,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",102,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"start","core::ops","",104,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",105,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",106,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",106,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",53,null],[11,"borrow_mut","","",53,null],[11,"clone","collections::str","",107,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",107,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"borrow","collections::string","",108,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",109,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",110,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",111,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",110,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",110,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",110,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",112,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",113,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",114,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",115,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",116,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",117,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",115,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",115,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",115,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",115,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",118,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",119,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",119,null],[11,"matching","","",119,null],[11,"use_early_reject","","",120,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",120,null],[11,"matching","","",120,null],[11,"cmp","collections::string","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",121,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",108,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",108,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",108,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",108,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",108,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",108,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",108,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",108,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",108,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",108,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",108,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",108,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",108,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",108,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",108,null],[11,"push","","Adds the given character to the end of the string.",108,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",108,null],[11,"truncate","","Shortens a string to the specified length.",108,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",108,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",108,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",108,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",108,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",108,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",108,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",108,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",108,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",108,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",108,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",121,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",121,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",121,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",108,null],[11,"from_iter","","",108,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",108,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",108,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",108,null],[11,"extend","","",108,null],[11,"extend","","",108,null],[11,"extend","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",91,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",108,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",91,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",108,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",108,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"add","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",108,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",108,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",108,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",108,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",108,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",108,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",108,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",123,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",123,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",108,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",108,null],[11,"from","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",91,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",91,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",108,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",108,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",108,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",108,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",124,null],[11,"next","","",124,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",53,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",53,null],[11,"hash","","",53,null],[11,"index","","",53,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",53,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",53,null],[11,"index","","",53,null],[11,"index","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"index_mut","","",53,null],[11,"index_mut","","",53,null],[11,"index_mut","","",53,null],[11,"deref","","",53,null],[11,"deref_mut","","",53,null],[11,"from_iter","","",53,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",53,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","collections::borrow","",91,null],[11,"ne","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"partial_cmp","","",53,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",53,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",53,null],[11,"default","","",53,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",53,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",53,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",53,null],[11,"from","","",53,null],[11,"from","","",53,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",91,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",53,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",125,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"count","","",125,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",125,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",125,null],[11,"next","","",126,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",126,null],[11,"clone","collections::vec_deque","",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",127,null],[11,"default","","",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",127,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",127,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",127,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",127,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",127,null],[11,"iter","","Returns a front-to-back iterator.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",127,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",127,null],[11,"len","","Returns the number of elements in the `VecDeque`.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",127,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",127,null],[11,"push_back","","Appends an element to the back of a buffer",127,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",127,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",127,null],[11,"retain","","Retains only the elements specified by the predicate.",127,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",127,null],[11,"clone","","",128,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",128,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",129,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next_back","","",129,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",130,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next_back","","",130,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",131,null],[11,"next","","",131,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",127,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",127,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",127,null],[11,"index","","",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",127,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",127,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",127,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",127,null],[11,"extend","","",127,null],[11,"fmt","","",127,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",132,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"fmt","","",132,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",133,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",134,null],[11,"make_place","","",134,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",134,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",135,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",133,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",134,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",135,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",135,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",135,null],[11,"default","","",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",135,null],[11,"clone","","",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",135,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",135,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",135,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",135,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",135,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",135,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",135,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",135,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",135,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",135,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",135,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","hyper::header","",52,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"header_name","","",52,{"inputs":[{"name":"accept"}],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"fmt_header","","",52,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",136,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"deref","","",136,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",136,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",136,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",136,null],[11,"fmt_header","","",136,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"fmt","","",137,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"deref","","",137,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"deref_mut","","",137,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"header_name","","",137,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"str"}}],[11,"parse_header","","",137,null],[11,"fmt_header","","",137,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"header_name","","",38,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"str"}}],[11,"parse_header","","",38,null],[11,"fmt_header","","",38,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"accesscontrolmaxage"}}],[11,"deref","","",138,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"deref_mut","","",138,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"header_name","","",138,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"str"}}],[11,"parse_header","","",138,null],[11,"fmt_header","","",138,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"deref","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"str"}}],[11,"parse_header","","",139,null],[11,"fmt_header","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"deref","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"deref_mut","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"header_name","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"str"}}],[11,"parse_header","","",140,null],[11,"fmt_header","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"acceptcharset"}}],[11,"deref","","",141,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"deref_mut","","",141,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"header_name","","",141,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"str"}}],[11,"parse_header","","",141,null],[11,"fmt_header","","",141,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"acceptencoding"}}],[11,"deref","","",142,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",142,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",142,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",142,null],[11,"fmt_header","","",142,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"acceptlanguage"}}],[11,"deref","","",143,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",143,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",143,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"str"}}],[11,"parse_header","","",143,null],[11,"fmt_header","","",143,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"acceptranges"}],"output":{"name":"acceptranges"}}],[11,"deref","","",144,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"deref_mut","","",144,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"header_name","","",144,{"inputs":[{"name":"acceptranges"}],"output":{"name":"str"}}],[11,"parse_header","","",144,null],[11,"fmt_header","","",144,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"rangeunit"}],"output":{"name":"rangeunit"}}],[11,"from_str","","",39,{"inputs":[{"name":"rangeunit"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"allow"}],"output":{"name":"allow"}}],[11,"deref","","",145,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"deref_mut","","",145,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"header_name","","",145,{"inputs":[{"name":"allow"}],"output":{"name":"str"}}],[11,"parse_header","","",145,null],[11,"fmt_header","","",145,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"authorization"}],"output":{"name":"authorization"}}],[11,"deref","","",146,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"deref_mut","","",146,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"header_name","","",146,{"inputs":[{"name":"authorization"}],"output":{"name":"str"}}],[11,"parse_header","","",146,null],[11,"fmt_header","","",146,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","collections::string","",108,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",108,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header","",31,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"basic"}],"output":{"name":"basic"}}],[11,"scheme","","",31,{"inputs":[{"name":"basic"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",31,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",31,{"inputs":[{"name":"basic"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"bearer"}],"output":{"name":"bearer"}}],[11,"scheme","","",32,{"inputs":[{"name":"bearer"}],"output":{"name":"option"}}],[11,"fmt_scheme","","",32,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",32,{"inputs":[{"name":"bearer"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"cachecontrol"}}],[11,"eq","","",147,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"deref","","",147,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"deref_mut","","",147,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"header_name","","",147,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"str"}}],[11,"parse_header","","",147,null],[11,"fmt_header","","",147,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"cachedirective"}],"output":{"name":"cachedirective"}}],[11,"eq","","",40,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",40,{"inputs":[{"name":"cachedirective"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"deref","","",148,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",148,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"header_name","","",148,{"inputs":[{"name":"cookie"}],"output":{"name":"str"}}],[11,"parse_header","","",148,null],[11,"fmt_header","","",148,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",148,null],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",148,{"inputs":[{"name":"cookie"},{"name":"cookiejar"}],"output":{"name":"cookie"}}],[11,"fmt","","",41,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"connectionoption"}],"output":{"name":"connectionoption"}}],[11,"from_str","","",41,{"inputs":[{"name":"connectionoption"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"deref","","",149,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"deref_mut","","",149,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"header_name","","",149,{"inputs":[{"name":"connection"}],"output":{"name":"str"}}],[11,"parse_header","","",149,null],[11,"fmt_header","","",149,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",149,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",149,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"eq","","",150,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"contentencoding"}],"output":{"name":"contentencoding"}}],[11,"deref","","",150,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",150,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",150,{"inputs":[{"name":"contentencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",150,null],[11,"fmt_header","","",150,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"contentlanguage"}}],[11,"deref","","",151,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",151,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",151,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"str"}}],[11,"parse_header","","",151,null],[11,"fmt_header","","",151,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"contentlength"}],"output":{"name":"contentlength"}}],[11,"header_name","","",152,{"inputs":[{"name":"contentlength"}],"output":{"name":"str"}}],[11,"parse_header","","",152,null],[11,"fmt_header","","",152,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",152,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"deref_mut","","",152,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"eq","","",153,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrange"}}],[11,"deref","","",153,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",153,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",153,{"inputs":[{"name":"contentrange"}],"output":{"name":"str"}}],[11,"parse_header","","",153,null],[11,"fmt_header","","",153,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"contentrangespec"}],"output":{"name":"contentrangespec"}}],[11,"eq","","",42,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"from_str","","",42,{"inputs":[{"name":"contentrangespec"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"get_param","mime_crate","",155,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"fmt","","",155,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",155,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",156,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",156,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",156,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",108,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime_crate","",156,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",156,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",157,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",157,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",157,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",108,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime_crate","",157,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",157,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",158,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",158,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",158,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",108,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime_crate","",158,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",158,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",159,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",159,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",159,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",108,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime_crate","",159,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",159,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",155,{"inputs":[{"name":"mime"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","hyper::header","",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"deref_mut","","",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"header_name","","",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"str"}}],[11,"parse_header","","",154,null],[11,"fmt_header","","",154,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json; charset=utf-8` header.",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",154,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"eq","","",160,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"deref","","",160,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",160,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"header_name","","",160,{"inputs":[{"name":"date"}],"output":{"name":"str"}}],[11,"parse_header","","",160,null],[11,"fmt_header","","",160,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"etag"}],"output":{"name":"etag"}}],[11,"deref","","",161,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",161,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"header_name","","",161,{"inputs":[{"name":"etag"}],"output":{"name":"str"}}],[11,"parse_header","","",161,null],[11,"fmt_header","","",161,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"expect"}],"output":{"name":"expect"}}],[11,"header_name","","",43,{"inputs":[{"name":"expect"}],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"fmt_header","","",43,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"expires"}],"output":{"name":"expires"}}],[11,"deref","","",162,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",162,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"header_name","","",162,{"inputs":[{"name":"expires"}],"output":{"name":"str"}}],[11,"parse_header","","",162,null],[11,"fmt_header","","",162,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"from"}],"output":{"name":"from"}}],[11,"deref","","",163,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"deref_mut","","",163,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"header_name","","",163,{"inputs":[{"name":"from"}],"output":{"name":"str"}}],[11,"parse_header","","",163,null],[11,"fmt_header","","",163,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"header_name","","",33,{"inputs":[{"name":"host"}],"output":{"name":"str"}}],[11,"parse_header","","",33,null],[11,"fmt_header","","",33,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"ifmatch"}],"output":{"name":"ifmatch"}}],[11,"header_name","","",44,{"inputs":[{"name":"ifmatch"}],"output":{"name":"str"}}],[11,"parse_header","","",44,null],[11,"fmt_header","","",44,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"ifmodifiedsince"}}],[11,"deref","","",164,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",164,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",164,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"str"}}],[11,"parse_header","","",164,null],[11,"fmt_header","","",164,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"ifnonematch"}}],[11,"header_name","","",45,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"str"}}],[11,"parse_header","","",45,null],[11,"fmt_header","","",45,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"ifrange"}],"output":{"name":"ifrange"}}],[11,"header_name","","",46,{"inputs":[{"name":"ifrange"}],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"fmt_header","","",46,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"ifunmodifiedsince"}}],[11,"deref","","",165,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",165,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",165,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"str"}}],[11,"parse_header","","",165,null],[11,"fmt_header","","",165,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"lastmodified"}],"output":{"name":"lastmodified"}}],[11,"deref","","",166,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",166,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"header_name","","",166,{"inputs":[{"name":"lastmodified"}],"output":{"name":"str"}}],[11,"parse_header","","",166,null],[11,"fmt_header","","",166,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"location"}],"output":{"name":"location"}}],[11,"deref","","",167,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"deref_mut","","",167,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"header_name","","",167,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"parse_header","","",167,null],[11,"fmt_header","","",167,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"pragma"}],"output":{"name":"pragma"}}],[11,"header_name","","",47,{"inputs":[{"name":"pragma"}],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"fmt_header","","",47,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",48,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"byterangespec"}],"output":{"name":"byterangespec"}}],[11,"eq","","",49,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",48,{"inputs":[{"name":"range"},{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges\n(\"bytes=from1-to1,from2-to2,fromX-toX\")",48,{"inputs":[{"name":"range"},{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",49,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"range"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"byterangespec"},{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",48,{"inputs":[{"name":"range"}],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"fmt_header","","",48,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"referer"}],"output":{"name":"referer"}}],[11,"deref","","",168,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"deref_mut","","",168,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"header_name","","",168,{"inputs":[{"name":"referer"}],"output":{"name":"str"}}],[11,"parse_header","","",168,null],[11,"fmt_header","","",168,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"fmt","","",169,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"server"}],"output":{"name":"server"}}],[11,"deref","","",169,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"deref_mut","","",169,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"header_name","","",169,{"inputs":[{"name":"server"}],"output":{"name":"str"}}],[11,"parse_header","","",169,null],[11,"fmt_header","","",169,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"setcookie"}],"output":{"name":"setcookie"}}],[11,"deref","","",170,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",170,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"header_name","","",170,{"inputs":[{"name":"setcookie"}],"output":{"name":"str"}}],[11,"parse_header","","",170,null],[11,"fmt_header","","",170,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",170,{"inputs":[{"name":"setcookie"},{"name":"cookiejar"}],"output":{"name":"setcookie"}}],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",170,{"inputs":[{"name":"setcookie"},{"name":"cookiejar"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"stricttransportsecurity"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",34,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"str"}}],[11,"parse_header","","",34,null],[11,"fmt_header","","",34,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",171,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"transferencoding"}],"output":{"name":"transferencoding"}}],[11,"deref","","",171,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",171,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",171,{"inputs":[{"name":"transferencoding"}],"output":{"name":"str"}}],[11,"parse_header","","",171,null],[11,"fmt_header","","",171,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"fmt","","",172,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"upgrade"}],"output":{"name":"upgrade"}}],[11,"deref","","",172,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"deref_mut","","",172,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"header_name","","",172,{"inputs":[{"name":"upgrade"}],"output":{"name":"str"}}],[11,"parse_header","","",172,null],[11,"fmt_header","","",172,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"protocolname"}],"output":{"name":"protocolname"}}],[11,"from_str","","",50,{"inputs":[{"name":"protocolname"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"protocol"}],"output":{"name":"protocol"}}],[11,"new","","Creates a new Protocol with the given name and version",35,{"inputs":[{"name":"protocol"},{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",35,{"inputs":[{"name":"protocol"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"fmt","","",173,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"useragent"}],"output":{"name":"useragent"}}],[11,"deref","","",173,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"deref_mut","","",173,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"header_name","","",173,{"inputs":[{"name":"useragent"}],"output":{"name":"str"}}],[11,"parse_header","","",173,null],[11,"fmt_header","","",173,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"vary"}],"output":{"name":"vary"}}],[11,"header_name","","",51,{"inputs":[{"name":"vary"}],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"fmt_header","","",51,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",174,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",174,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",174,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",174,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",174,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",174,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",174,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",174,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",174,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",174,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",174,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",174,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",174,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",174,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",174,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",174,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",174,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",174,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",174,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",174,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",174,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",174,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"fmt","core::num","",175,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",175,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",175,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",175,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",176,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",177,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",178,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",178,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",178,null],[11,"clone","","",179,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",179,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",179,null],[11,"fmt","","",180,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",181,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",181,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",182,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",183,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",183,null],[11,"eq","","",184,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",184,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",185,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",185,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",186,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",187,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",187,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",187,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",187,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",187,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",187,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",187,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",187,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",187,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",187,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",187,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",187,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",187,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",187,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",187,null],[11,"eq","","",187,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",187,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",187,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",187,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",187,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",188,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",188,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",188,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",188,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",188,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",188,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",188,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",188,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",188,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",188,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",188,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",188,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",188,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",188,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",188,null],[11,"eq","","",188,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",188,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",188,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",188,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",188,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",189,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",189,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",189,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",189,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",190,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",190,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",191,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",191,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",192,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",193,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",193,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",194,null],[11,"get","","Dereferences the content.",194,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",194,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",195,null],[11,"eq","","",195,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",195,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",195,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",195,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",196,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",196,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",106,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",104,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",105,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",197,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",197,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",197,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",197,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","hyper::header::internals","",198,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",198,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",198,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",198,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",198,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",198,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",198,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",199,null],[11,"fmt","","",199,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",199,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",200,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",201,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",202,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",203,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",204,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",200,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",200,null],[11,"swap","","Stores a value into the bool, returning the old value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",201,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",201,null],[11,"swap","","Stores a value into the isize, returning the old value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",202,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",202,null],[11,"swap","","Stores a value into the usize, returning the old value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",203,null],[11,"load","","Loads a value from the pointer.",203,null],[11,"store","","Stores a value into the pointer.",203,null],[11,"swap","","Stores a value into the pointer, returning the old value.",203,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",203,null],[11,"fmt","","",202,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",205,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",205,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",205,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",205,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",205,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",205,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",205,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",206,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",207,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",207,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",207,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",207,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",207,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",207,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",207,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",207,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",207,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",208,null],[11,"clone","","",208,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",209,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",209,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",209,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",209,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",210,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",210,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",211,null],[11,"deref","","",210,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",210,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",212,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",212,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",212,null],[11,"clone","core::char","",213,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",214,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",213,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"clone","","",215,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",216,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",215,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",217,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",217,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",217,null],[11,"next_back","","",217,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",218,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",218,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",218,null],[11,"next_back","","",218,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",219,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",219,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",219,null],[11,"clone","","",220,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",221,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",220,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",220,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",220,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",220,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"next_back","","",220,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",222,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",222,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"next_back","","",222,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",223,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",223,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",223,null],[11,"next_back","","",223,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",224,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",224,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",224,null],[11,"next_back","","",224,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",225,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",225,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"next_back","","",225,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",226,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",226,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"nth","","",226,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",226,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",226,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",227,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",227,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",227,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",227,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",227,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",227,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",227,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",228,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"clone","","",229,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",229,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",230,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",230,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",230,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",230,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",230,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"clone","","",231,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",231,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",231,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"clone","","",232,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",232,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"clone","","",233,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",233,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"next_back","","",233,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",234,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",234,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",234,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",234,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",234,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",234,null],[11,"next_back","","",234,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",235,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",235,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"next_back","","",235,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",236,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",104,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",106,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",236,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"clone","","",237,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",237,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"next_back","","",237,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",236,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next","core::ops","",106,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",238,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",238,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"next_back","","",238,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",239,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"next_back","","",239,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",239,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",239,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",239,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",240,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",240,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"next_back","","",240,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",240,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",174,null],[11,"fmt","","",174,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",174,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",174,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",241,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",241,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"next_back","","",241,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",242,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"next_back","","",242,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",242,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",243,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"next_back","","",243,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"next_back","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",174,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",245,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",246,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",247,null],[11,"fmt","","",247,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",247,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",247,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",247,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",247,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",247,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",247,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",247,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",247,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",247,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",247,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",247,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",247,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",247,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",247,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",247,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",247,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",247,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",247,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",247,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",247,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",247,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",247,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",248,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"next_back","","",248,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",248,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",249,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"next_back","","",249,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",250,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"next_back","","",250,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",247,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",251,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",251,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",252,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",252,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",253,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",253,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",254,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",254,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",255,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",255,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",256,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",256,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",257,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",257,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",258,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",258,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",259,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",259,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",260,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",260,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",259,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",260,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",259,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",260,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",259,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",260,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",259,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",260,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",255,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",256,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",257,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",258,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",251,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",252,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",253,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",254,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",261,null],[11,"next","","",261,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"count","","",261,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",261,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",261,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",261,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",261,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",262,null],[11,"next","","",262,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"count","","",262,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",262,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",262,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",262,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",263,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",263,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"next_back","","",263,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",263,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",264,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",264,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"next_back","","",264,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",265,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"next","","",266,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[11,"next","","",267,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"next","","",268,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"next","","",269,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"clone","","",270,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",270,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"count","","",270,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",270,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",270,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",270,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",271,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",271,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",271,null],[11,"count","","",271,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",271,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",271,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",271,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",272,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",272,null],[11,"count","","",272,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",272,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",272,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",272,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"eq","core::str","",273,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",273,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",273,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",274,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",274,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",274,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",274,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",274,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",274,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",275,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",275,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"next_back","","",275,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",275,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",276,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",276,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",276,null],[11,"next_back","","",276,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",276,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"count","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",277,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",278,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",279,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",279,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",280,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",280,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",279,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",280,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",281,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",281,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",282,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",282,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",281,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",282,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",283,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",284,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",284,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",285,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",285,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",286,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",287,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",287,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",288,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",288,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",287,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",288,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",289,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",290,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",290,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",291,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",291,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",290,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",291,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",292,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",292,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"next_back","","",292,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",293,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",294,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",294,null],[11,"call_mut","","",294,null],[11,"call_once","","",294,null],[11,"next","","",293,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"next_back","","",293,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",295,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",296,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",296,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",296,null],[11,"finish","","",296,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",296,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",296,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",297,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",297,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",298,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",298,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",299,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",299,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",300,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",300,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",301,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",301,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",302,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",302,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",303,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",304,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",305,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",305,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",306,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",306,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",306,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",307,null],[11,"entry","","Adds a new entry to the set output.",308,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",308,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",308,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",309,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",309,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",309,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",310,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",310,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",310,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",311,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",311,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",312,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",313,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",314,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",314,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",315,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",315,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",315,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",315,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",315,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",315,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",315,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",315,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",315,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",315,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",315,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",315,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",315,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",315,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",315,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",315,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",315,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",195,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",205,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header","",36,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"charset"}],"output":{"name":"charset"}}],[11,"fmt","","",36,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",36,{"inputs":[{"name":"charset"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"encoding"}],"output":{"name":"encoding"}}],[11,"fmt","","",37,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",37,{"inputs":[{"name":"encoding"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"entitytag"}],"output":{"name":"entitytag"}}],[11,"new","","Constructs a new EntityTag.\n# Panics\nIf the tag contains invalid characters.",29,{"inputs":[{"name":"entitytag"},{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag.\n# Panics\nIf the tag contains invalid characters.",29,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag.\n# Panics\nIf the tag contains invalid characters.",29,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",29,{"inputs":[{"name":"entitytag"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag.\n# Panics\nIf the tag contains invalid characters.",29,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their\nopaque-tags match character-by-character.",29,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their\nopaque-tags match character-by-character, regardless of either or\nboth being tagged as \"weak\".",29,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",29,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",29,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",29,{"inputs":[{"name":"entitytag"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"fmt","","",316,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",316,{"inputs":[{"name":"httpdate"}],"output":{"name":"httpdate"}}],[11,"from_str","","",316,{"inputs":[{"name":"httpdate"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"cmp","","",317,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"fmt","","",317,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",317,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",317,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",317,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",30,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"qualityitem"}],"output":{"name":"qualityitem"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality.\nThe item can be of any type.\nThe quality should be a value in the range [0, 1].",30,{"inputs":[{"name":"qualityitem"},{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",30,{"inputs":[{"name":"qualityitem"},{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","hyper::header::parsing","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"from_one_comma_delimited","","Reads a comma-delimited raw string into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",318,{"inputs":[{"name":"scheme"}],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",318,{"inputs":[{"name":"scheme"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",319,{"inputs":[{"name":"header"}],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",319,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",320,{"inputs":[{"name":"headerformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","alloc::boxed","",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","hyper::header","",321,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",321,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",321,{"inputs":[{"name":"headers"},{"name":"h"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",321,{"inputs":[{"name":"headers"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",321,{"inputs":[{"name":"headers"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove_raw","","Remove a header set by set_raw",321,{"inputs":[{"name":"headers"},{"name":"str"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",321,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",321,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",321,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",321,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",321,{"inputs":[{"name":"headers"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",321,{"inputs":[{"name":"headers"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",321,{"inputs":[{"name":"headers"}],"output":null}],[11,"eq","","",321,{"inputs":[{"name":"headers"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",321,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",321,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",322,{"inputs":[{"name":"headersitems"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",323,{"inputs":[{"name":"headerview"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",323,{"inputs":[{"name":"headerview"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",323,{"inputs":[{"name":"headerview"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",323,{"inputs":[{"name":"headerview"}],"output":{"name":"string"}}],[11,"fmt","","",323,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",323,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",321,{"inputs":[{"name":"headers"},{"name":"i"}],"output":null}],[11,"from_iter","","",321,{"inputs":[{"name":"headers"},{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",324,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",324,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"inputs":[{"name":"httpversion"},{"name":"headers"}],"output":{"name":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",325,null],[12,"subject","","Subject (request line or status line) of Incoming message.",325,null],[12,"headers","","Headers of the Incoming message.",325,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",326,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",326,null],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",326,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",326,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",327,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",327,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",327,null],[13,"EmptyWriter","","A writer that should not write any body.",327,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",328,{"inputs":[{"name":"http11message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",328,null],[11,"flush","","",328,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"read","","",328,null],[11,"set_outgoing","","",328,{"inputs":[{"name":"http11message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",328,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"has_body","","",328,{"inputs":[{"name":"http11message"}],"output":{"name":"bool"}}],[11,"close_connection","","",328,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",328,{"inputs":[{"name":"http11message"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",328,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",328,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to\nthe peer.",328,{"inputs":[{"name":"http11message"},{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",328,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"new_message","","",329,{"inputs":[{"name":"http11protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for\nestablishing HTTP connections.",329,{"inputs":[{"name":"http11protocol"},{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",326,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",326,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",326,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"fmt","","",326,{"inputs":[{"name":"httpreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",326,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",327,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",327,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",327,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",327,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"enderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",331,{"inputs":[{"name":"error"},{"name":"enderror"}],"output":{"name":"error"}}],[11,"write","hyper::http::h1","",327,null],[11,"flush","","",327,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",327,{"inputs":[{"name":"httpwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",325,{"inputs":[{"name":"incoming"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"h2","hyper::http","Adapts the `solicit`-provided HTTP/2 implementation into the `HttpMessage` API.",null,null],[3,"Http2Protocol","hyper::http::h2","The `Protocol` implementation that provides HTTP/2 messages (i.e. `Http2Message`).",null,null],[3,"Http2Message","","An implementation of the `HttpMessage` trait for HTTP/2.",null,null],[5,"new_protocol","","A convenience method that creates a default `Http2Protocol` that uses a `net::HttpConnector`\n(which produces an `HttpStream` for the underlying transport layer).",null,{"inputs":[],"output":{"name":"http2protocol"}}],[8,"CloneableStream","","A trait alias representing all types that are both `NetworkStream` and `Clone`.",null,null],[11,"with_connector","","Create a new `Http2Protocol` that will use the given `NetworkConnector` to establish TCP\nconnections to the server.",332,{"inputs":[{"name":"http2protocol"},{"name":"c"}],"output":{"name":"http2protocol"}}],[11,"new_message","","",332,{"inputs":[{"name":"http2protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"http2message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",333,null],[11,"flush","","",333,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"read","","",333,null],[11,"set_outgoing","","",333,{"inputs":[{"name":"http2message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",333,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"has_body","","",333,{"inputs":[{"name":"http2message"}],"output":{"name":"bool"}}],[11,"close_connection","","",333,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single\nrequest-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",334,null],[12,"method","","The method of the request",334,null],[12,"url","","The URL of the request",334,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",335,null],[12,"raw_status","","The raw status line of the response",335,null],[12,"version","","The HTTP/2 version which generated the response",335,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP\nprotocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",336,{"inputs":[{"name":"protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",337,{"inputs":[{"name":"httpmessage"},{"name":"requesthead"}],"output":{"name":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"fmt","","",334,{"inputs":[{"name":"requesthead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",334,{"inputs":[{"name":"requesthead"}],"output":{"name":"requesthead"}}],[11,"fmt","","",335,{"inputs":[{"name":"responsehead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",335,{"inputs":[{"name":"responsehead"}],"output":{"name":"responsehead"}}],[11,"is","hyper::http","Is the underlying type in this trait object a T?",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",337,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"rawstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",338,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",338,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"clone","","",338,{"inputs":[{"name":"rawstatus"}],"output":{"name":"rawstatus"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"Openssl","hyper::net","An implementation of `Ssl` for OpenSSL.",null,null],[12,"context","","The `SslContext` from openssl crate.",339,null],[3,"NetworkConnections","","An iterator wrapper over a NetworkAcceptor.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a TcpStream.",null,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",340,null],[13,"Https","","A stream protected by SSL.",340,null],[11,"clone","","",339,{"inputs":[{"name":"openssl"}],"output":{"name":"openssl"}}],[11,"fmt","","",339,{"inputs":[{"name":"openssl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",339,{"inputs":[{"name":"openssl"}],"output":{"name":"openssl"}}],[11,"with_cert_and_key","","Ease creating an `Openssl` with a certificate and key.",339,{"inputs":[{"name":"openssl"},{"name":"c"},{"name":"k"}],"output":{"name":"result"}}],[11,"wrap_client","","",339,{"inputs":[{"name":"openssl"},{"name":"httpstream"},{"name":"str"}],"output":{"name":"result"}}],[11,"wrap_server","","",339,{"inputs":[{"name":"openssl"},{"name":"httpstream"}],"output":{"name":"result"}}],[11,"peer_addr","openssl::ssl","",341,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"close","","",341,{"inputs":[{"name":"sslstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkListener","hyper::net","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",342,null],[10,"accept","","Returns an iterator of streams.",342,{"inputs":[{"name":"networklistener"}],"output":{"name":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",342,{"inputs":[{"name":"networklistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",342,{"inputs":[{"name":"networklistener"}],"output":{"name":"networkconnections"}}],[8,"NetworkStream","","An abstraction over streams that a Server can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",343,{"inputs":[{"name":"networkstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of Stream to create",344,null],[10,"connect","","Connect to a remote address.",344,{"inputs":[{"name":"networkconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"Ssl","","An abstraction to allow any SSL implementation to be used with HttpsStreams.",null,null],[16,"Stream","","The protected stream.",345,null],[10,"wrap_client","","Wrap a client stream with SSL.",345,{"inputs":[{"name":"ssl"},{"name":"httpstream"},{"name":"str"}],"output":{"name":"result"}}],[10,"wrap_server","","Wrap a server stream with SSL.",345,{"inputs":[{"name":"ssl"},{"name":"httpstream"}],"output":{"name":"result"}}],[11,"next","","",346,{"inputs":[{"name":"networkconnections"}],"output":{"name":"option"}}],[11,"from","alloc::boxed","",135,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"fmt","","",135,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","hyper","Is the underlying type in this trait object a T?",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",343,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"clone","hyper::net","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",347,{"inputs":[{"name":"httplistener"},{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",347,{"inputs":[{"name":"httplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",347,{"inputs":[{"name":"httplistener"},{"name":"rawfd"}],"output":{"name":"httplistener"}}],[11,"clone","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"httpstream"}}],[11,"fmt","","",348,{"inputs":[{"name":"httpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",348,null],[11,"write","","",348,null],[11,"flush","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",348,{"inputs":[{"name":"httpstream"},{"name":"rawfd"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",348,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"close","","",348,{"inputs":[{"name":"httpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"default","","",349,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"clone","","",349,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"fmt","","",349,{"inputs":[{"name":"httpconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",349,{"inputs":[{"name":"httpconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",340,{"inputs":[{"name":"httpsstream"}],"output":{"name":"httpsstream"}}],[11,"fmt","","",340,{"inputs":[{"name":"httpsstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",340,null],[11,"write","","",340,null],[11,"flush","","",340,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",340,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"close","","",340,{"inputs":[{"name":"httpsstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"httpslistener"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",350,{"inputs":[{"name":"httpslistener"},{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","",350,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"local_addr","","",350,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"default","","",351,{"inputs":[{"name":"httpsconnector"}],"output":{"name":"httpsconnector"}}],[11,"fmt","","",351,{"inputs":[{"name":"httpsconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new connector using the provided SSL implementation.",351,{"inputs":[{"name":"httpsconnector"},{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",351,{"inputs":[{"name":"httpsconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",352,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",353,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",353,null],[12,"headers","","The headers of the incoming request.",353,null],[12,"uri","","The target request-uri for this request.",353,null],[12,"version","","The version of HTTP for this request.",353,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",353,{"inputs":[{"name":"request"},{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",353,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected\nover HTTPS.",353,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",353,null],[11,"read","","",353,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",354,null],[11,"fmt","","",354,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",354,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",354,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",354,{"inputs":[{"name":"response"},{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",354,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",354,{"inputs":[{"name":"response"},{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",354,null],[11,"start","","Consume this Response<Fresh>, writing the Headers and Status and\ncreating a Response<Streaming>",354,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",354,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",354,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",354,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"write","","",354,null],[11,"flush","","",354,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"drop","","",354,{"inputs":[{"name":"response"}],"output":null}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",355,{"inputs":[{"name":"handler"},{"name":"request"},{"name":"response"}],"output":null}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",355,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a\nper-request basis, as a connection with keep-alive may handle multiple\nrequests)",355,{"inputs":[{"name":"handler"}],"output":null}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a\nper-request basis, as a connection with keep-alive may handle multiple\nrequests)",355,{"inputs":[{"name":"handler"}],"output":null}],[11,"fmt","","",356,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the provided handler.",356,{"inputs":[{"name":"server"},{"name":"l"}],"output":{"name":"server"}}],[11,"http","","Creates a new server that will handle `HttpStream`s.",356,{"inputs":[{"name":"server"},{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",356,{"inputs":[{"name":"server"},{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",356,{"inputs":[{"name":"server"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided\nnumber of threads.",356,{"inputs":[{"name":"server"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",352,{"inputs":[{"name":"listening"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",352,{"inputs":[{"name":"listening"}],"output":null}],[11,"close","","Stop the server from listening to its socket address.",352,{"inputs":[{"name":"listening"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue\n[[RFC7231, Section 6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)]",357,null],[13,"SwitchingProtocols","","101 Switching Protocols\n[[RFC7231, Section 6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)]",357,null],[13,"Processing","","102 Processing\n[[RFC2518](https://tools.ietf.org/html/rfc2518)]",357,null],[13,"Ok","","200 OK\n[[RFC7231, Section 6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)]",357,null],[13,"Created","","201 Created\n[[RFC7231, Section 6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)]",357,null],[13,"Accepted","","202 Accepted\n[[RFC7231, Section 6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)]",357,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information\n[[RFC7231, Section 6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)]",357,null],[13,"NoContent","","204 No Content\n[[RFC7231, Section 6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)]",357,null],[13,"ResetContent","","205 Reset Content\n[[RFC7231, Section 6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)]",357,null],[13,"PartialContent","","206 Partial Content\n[[RFC7233, Section 4.1](https://tools.ietf.org/html/rfc7233#section-4.1)]",357,null],[13,"MultiStatus","","207 Multi-Status\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",357,null],[13,"AlreadyReported","","208 Already Reported\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",357,null],[13,"ImUsed","","226 IM Used\n[[RFC3229](https://tools.ietf.org/html/rfc3229)]",357,null],[13,"MultipleChoices","","300 Multiple Choices\n[[RFC7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)]",357,null],[13,"MovedPermanently","","301 Moved Permanently\n[[RFC7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)]",357,null],[13,"Found","","302 Found\n[[RFC7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)]",357,null],[13,"SeeOther","","303 See Other\n[[RFC7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)]",357,null],[13,"NotModified","","304 Not Modified\n[[RFC7232, Section 4.1](https://tools.ietf.org/html/rfc7232#section-4.1)]",357,null],[13,"UseProxy","","305 Use Proxy\n[[RFC7231, Section 6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)]",357,null],[13,"TemporaryRedirect","","307 Temporary Redirect\n[[RFC7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)]",357,null],[13,"PermanentRedirect","","308 Permanent Redirect\n[[RFC7238](https://tools.ietf.org/html/rfc7238)]",357,null],[13,"BadRequest","","400 Bad Request\n[[RFC7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)]",357,null],[13,"Unauthorized","","401 Unauthorized\n[[RFC7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1)]",357,null],[13,"PaymentRequired","","402 Payment Required\n[[RFC7231, Section 6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)]",357,null],[13,"Forbidden","","403 Forbidden\n[[RFC7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)]",357,null],[13,"NotFound","","404 Not Found\n[[RFC7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)]",357,null],[13,"MethodNotAllowed","","405 Method Not Allowed\n[[RFC7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)]",357,null],[13,"NotAcceptable","","406 Not Acceptable\n[[RFC7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)]",357,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required\n[[RFC7235, Section 3.2](https://tools.ietf.org/html/rfc7235#section-3.2)]",357,null],[13,"RequestTimeout","","408 Request Timeout\n[[RFC7231, Section 6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)]",357,null],[13,"Conflict","","409 Conflict\n[[RFC7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)]",357,null],[13,"Gone","","410 Gone\n[[RFC7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)]",357,null],[13,"LengthRequired","","411 Length Required\n[[RFC7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)]",357,null],[13,"PreconditionFailed","","412 Precondition Failed\n[[RFC7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2)]",357,null],[13,"PayloadTooLarge","","413 Payload Too Large\n[[RFC7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)]",357,null],[13,"UriTooLong","","414 URI Too Long\n[[RFC7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)]",357,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type\n[[RFC7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)]",357,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable\n[[RFC7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4)]",357,null],[13,"ExpectationFailed","","417 Expectation Failed\n[[RFC7231, Section 6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)]",357,null],[13,"ImATeapot","","418 I'm a teapot\n[curiously, not registered by IANA, but [RFC2324](https://tools.ietf.org/html/rfc2324)]",357,null],[13,"UnprocessableEntity","","422 Unprocessable Entity\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",357,null],[13,"Locked","","423 Locked\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",357,null],[13,"FailedDependency","","424 Failed Dependency\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",357,null],[13,"UpgradeRequired","","426 Upgrade Required\n[[RFC7231, Section 6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)]",357,null],[13,"PreconditionRequired","","428 Precondition Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",357,null],[13,"TooManyRequests","","429 Too Many Requests\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",357,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",357,null],[13,"InternalServerError","","500 Internal Server Error\n[[RFC7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)]",357,null],[13,"NotImplemented","","501 Not Implemented\n[[RFC7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)]",357,null],[13,"BadGateway","","502 Bad Gateway\n[[RFC7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)]",357,null],[13,"ServiceUnavailable","","503 Service Unavailable\n[[RFC7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)]",357,null],[13,"GatewayTimeout","","504 Gateway Timeout\n[[RFC7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)]",357,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported\n[[RFC7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)]",357,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates\n[[RFC2295](https://tools.ietf.org/html/rfc2295)]",357,null],[13,"InsufficientStorage","","507 Insufficient Storage\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",357,null],[13,"LoopDetected","","508 Loop Detected\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",357,null],[13,"NotExtended","","510 Not Extended\n[[RFC2774](https://tools.ietf.org/html/rfc2774)]",357,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",357,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",357,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",358,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",358,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",358,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",358,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",358,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",358,null],[11,"hash","","",357,null],[11,"fmt","","",357,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"fmt","","",357,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",357,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",357,{"inputs":[{"name":"statuscode"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",357,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",357,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"lt","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"le","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"gt","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ge","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"eq","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"clone","","",358,{"inputs":[{"name":"statusclass"}],"output":{"name":"statusclass"}}],[11,"fmt","","",358,{"inputs":[{"name":"statusclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_code","","Get the default status code for the class.",358,{"inputs":[{"name":"statusclass"}],"output":{"name":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",359,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",359,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",359,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",359,null],[11,"clone","","",359,{"inputs":[{"name":"requesturi"}],"output":{"name":"requesturi"}}],[11,"eq","","",359,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"fmt","","",359,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",359,{"inputs":[{"name":"requesturi"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",359,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",360,null],[13,"Http10","","`HTTP/1.0`",360,null],[13,"Http11","","`HTTP/1.1`",360,null],[13,"Http20","","`HTTP/2.0`",360,null],[11,"fmt","","",360,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",360,null],[11,"cmp","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"clone","","",360,{"inputs":[{"name":"httpversion"}],"output":{"name":"httpversion"}}],[11,"partial_cmp","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"lt","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"le","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"gt","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ge","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"eq","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ne","","",360,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"fmt","","",360,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[14,"bench_header!","","",null,null],[14,"__hyper__deref!","","",null,null],[14,"__hyper__tm!","","",null,null],[14,"test_header!","","",null,null],[14,"__hyper_generate_header_serialization!","","",null,null],[14,"header!","","",null,null]],"paths":[[3,"Url"],[3,"EncodingOverride"],[4,"Host"],[3,"Ipv6Address"],[4,"ParseError"],[4,"Context"],[3,"CharRanges"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[4,"SchemeData"],[3,"RelativeSchemeData"],[3,"UrlParser"],[4,"SchemeType"],[3,"LanguageTag"],[4,"Error"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"QualityItem"],[3,"Basic"],[3,"Bearer"],[3,"Host"],[3,"StrictTransportSecurity"],[3,"Protocol"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ProtocolName"],[4,"Vary"],[3,"Accept"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"CacheControl"],[3,"Cookie"],[3,"Connection"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[3,"ContentType"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"UserAgent"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"PhantomData"],[3,"RangeFull"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"HttpDate"],[3,"Quality"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"HeaderFormatter"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"Error"],[3,"Http2Protocol"],[3,"Http2Message"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"RawStatus"],[3,"Openssl"],[4,"HttpsStream"],[3,"SslStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"Ssl"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpStream"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex['zookeeper'] = {"items":[[0,"","zookeeper","",null,null],[3,"Acl","","",null,null],[12,"perms","","",0,null],[12,"scheme","","",0,null],[12,"id","","",0,null],[3,"Stat","","",null,null],[12,"czxid","","",1,null],[12,"mzxid","","",1,null],[12,"ctime","","",1,null],[12,"mtime","","",1,null],[12,"version","","",1,null],[12,"cversion","","",1,null],[12,"aversion","","",1,null],[12,"ephemeral_owner","","",1,null],[12,"data_length","","",1,null],[12,"num_children","","",1,null],[12,"pzxid","","",1,null],[3,"WatchedEvent","","",null,null],[12,"event_type","","",2,null],[12,"keeper_state","","",2,null],[12,"path","","",2,null],[3,"ZooKeeper","","",null,null],[4,"ZkError","","",null,null],[13,"APIError","","",3,null],[13,"AuthFailed","","",3,null],[13,"BadArguments","","",3,null],[13,"BadVersion","","",3,null],[13,"ConnectionLoss","","",3,null],[13,"DataInconsistency","","",3,null],[13,"InvalidACL","","",3,null],[13,"InvalidCallback","","",3,null],[13,"MarshallingError","","",3,null],[13,"NoAuth","","",3,null],[13,"NoChildrenForEphemerals","","",3,null],[13,"NodeExists","","",3,null],[13,"NoNode","","",3,null],[13,"NotEmpty","","",3,null],[13,"OperationTimeout","","",3,null],[13,"RuntimeInconsistency","","",3,null],[13,"SessionExpired","","",3,null],[13,"SystemError","","",3,null],[13,"Unimplemented","","",3,null],[4,"CreateMode","","",null,null],[13,"Persistent","","",4,null],[13,"Ephemeral","","",4,null],[13,"PersistentSequential","","",4,null],[13,"EphemeralSequential","","",4,null],[4,"KeeperState","","",null,null],[13,"Disconnected","","",5,null],[13,"SyncConnected","","",5,null],[13,"AuthFailed","","",5,null],[13,"ConnectedReadOnly","","",5,null],[13,"SaslAuthenticated","","",5,null],[13,"Expired","","",5,null],[4,"WatchedEventType","","",null,null],[13,"None","","",6,null],[13,"NodeCreated","","",6,null],[13,"NodeDeleted","","",6,null],[13,"NodeDataChanged","","",6,null],[13,"NodeChildrenChanged","","",6,null],[13,"DataWatchRemoved","","",6,null],[13,"ChildWatchRemoved","","",6,null],[0,"acls","","",null,null],[3,"CREATOR_ALL_ACL","zookeeper::acls","",null,null],[3,"OPEN_ACL_UNSAFE","","",null,null],[3,"READ_ACL_UNSAFE","","",null,null],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",8,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"drop","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",8,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"next","collections::btree::node","",13,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",13,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",13,null],[11,"drop","","",14,null],[11,"as_slices","","",14,null],[11,"as_slices_mut","","",14,null],[11,"as_slices_internal","","",14,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",14,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",14,null],[11,"keys_mut","","",14,null],[11,"vals","","",14,null],[11,"vals_mut","","",14,null],[11,"edges","","",14,null],[11,"edges_mut","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",14,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",14,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",14,null],[11,"len","","How many key-value pairs the node contains",14,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",14,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",15,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",15,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",15,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",15,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",15,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",15,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",15,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",14,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",14,null],[11,"clone","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",19,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",19,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",19,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",20,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",20,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",20,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",21,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",21,null],[11,"get","","Returns a reference to the value corresponding to the key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",21,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",23,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",24,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",24,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",25,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",25,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",26,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",26,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",21,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"hash","","",21,null],[11,"default","","",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",21,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",31,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",32,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",32,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",33,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",34,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",34,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",35,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",36,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",21,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",21,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",21,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",37,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",37,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",37,null],[11,"contains","","Returns `true` if the set contains a value.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",37,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",37,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",37,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"default","","",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",37,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",41,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",42,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",43,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",44,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",45,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",45,null],[11,"into_owned","","Extracts the owned data.",45,null],[11,"deref","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"into_cow","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",46,null],[11,"cmp","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",46,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",46,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"from_iter","","",46,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"clone","core::fmt::rt::v1","",48,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",49,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",50,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",51,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",52,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",53,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",55,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",55,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",56,null],[11,"iter","","Provides a forward iterator.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",56,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",56,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",56,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",56,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",56,null],[11,"next","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",57,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",56,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",56,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"start","core::ops","",58,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",59,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",60,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",60,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",61,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",61,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"borrow","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",63,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",65,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",70,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",71,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",73,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",73,null],[11,"matching","","",73,null],[11,"use_early_reject","","",74,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",74,null],[11,"matching","","",74,null],[11,"cmp","collections::string","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",62,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",62,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",62,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",62,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",62,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",62,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",62,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",62,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",62,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",62,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",62,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",62,null],[11,"push","","Adds the given character to the end of the string.",62,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",62,null],[11,"truncate","","Shortens a string to the specified length.",62,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",62,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",62,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",62,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",62,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",62,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",62,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",62,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",62,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",62,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",75,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",75,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",75,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",62,null],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",62,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",62,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"add","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",77,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",62,null],[11,"from","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",62,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",62,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",78,null],[11,"next","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"count","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",79,null],[11,"next","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",80,null],[11,"clone","collections::vec_deque","",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",81,null],[11,"default","","",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",81,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",81,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",81,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",81,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",81,null],[11,"iter","","Returns a front-to-back iterator.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",81,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",81,null],[11,"len","","Returns the number of elements in the `VecDeque`.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",81,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",81,null],[11,"push_back","","Appends an element to the back of a buffer",81,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",81,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",81,null],[11,"retain","","Retains only the elements specified by the predicate.",81,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",81,null],[11,"clone","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",85,null],[11,"next","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"index","","",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",81,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",86,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",87,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",88,null],[11,"make_place","","",88,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",88,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",89,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",87,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",88,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",89,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",89,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",89,null],[11,"default","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",89,null],[11,"clone","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",89,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",89,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",89,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",89,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",89,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","zookeeper::acls","",90,{"inputs":[{"name":"creator_all_acl"}],"output":{"name":"vec"}}],[11,"deref","","",91,{"inputs":[{"name":"open_acl_unsafe"}],"output":{"name":"vec"}}],[11,"deref","","",92,{"inputs":[{"name":"read_acl_unsafe"}],"output":{"name":"vec"}}],[0,"perms","zookeeper","",null,null],[17,"READ","zookeeper::perms","",null,null],[17,"WRITE","","",null,null],[17,"CREATE","","",null,null],[17,"DELETE","","",null,null],[17,"ADMIN","","",null,null],[17,"ALL","","",null,null],[11,"fmt","zookeeper","",3,{"inputs":[{"name":"zkerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",3,{"inputs":[{"name":"zkerror"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"zkerror"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"zkerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"keeperstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",5,{"inputs":[{"name":"keeperstate"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"keeperstate"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"watchedeventtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",6,{"inputs":[{"name":"watchedeventtype"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"watchedeventtype"},{"name":"u64"}],"output":{"name":"option"}}],[11,"write_to","collections::string","",62,{"inputs":[{"name":"string"},{"name":"write"}],"output":{"name":"result"}}],[11,"write_to","collections::vec","",7,{"inputs":[{"name":"vec"},{"name":"write"}],"output":{"name":"result"}}],[11,"fmt","zookeeper","",0,{"inputs":[{"name":"acl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"acl"}],"output":{"name":"acl"}}],[11,"read_from","","",0,{"inputs":[{"name":"acl"},{"name":"r"}],"output":{"name":"acl"}}],[11,"write_to","","",0,{"inputs":[{"name":"acl"},{"name":"write"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"stat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read_from","","",1,{"inputs":[{"name":"stat"},{"name":"r"}],"output":{"name":"stat"}}],[11,"fmt","","",2,{"inputs":[{"name":"watchedevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read_from","","",2,{"inputs":[{"name":"watchedevent"},{"name":"r"}],"output":{"name":"watchedevent"}}],[11,"deref","zookeeper::acls","",90,{"inputs":[{"name":"creator_all_acl"}],"output":{"name":"vec"}}],[11,"deref","","",91,{"inputs":[{"name":"open_acl_unsafe"}],"output":{"name":"vec"}}],[11,"deref","","",92,{"inputs":[{"name":"read_acl_unsafe"}],"output":{"name":"vec"}}],[11,"clone","zookeeper","",93,{"inputs":[{"name":"zookeeper"}],"output":{"name":"zookeeper"}}],[11,"connect","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"duration"},{"name":"w"}],"output":{"name":"zkresult"}}],[11,"add_auth","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"vec"}],"output":{"name":"zkresult"}}],[11,"create","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"vec"},{"name":"vec"},{"name":"createmode"}],"output":{"name":"zkresult"}}],[11,"delete","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"i32"}],"output":{"name":"zkresult"}}],[11,"exists","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"bool"}],"output":{"name":"zkresult"}}],[11,"get_acl","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"}],"output":{"name":"zkresult"}}],[11,"get_children","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"bool"}],"output":{"name":"zkresult"}}],[11,"get_data","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"bool"}],"output":{"name":"zkresult"}}],[11,"set_acl","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"vec"},{"name":"i32"}],"output":{"name":"zkresult"}}],[11,"set_data","","",93,{"inputs":[{"name":"zookeeper"},{"name":"str"},{"name":"vec"},{"name":"i32"}],"output":{"name":"zkresult"}}],[11,"close","","",93,{"inputs":[{"name":"zookeeper"}],"output":null}],[11,"drop","","",93,{"inputs":[{"name":"zookeeper"}],"output":null}],[6,"ZkResult","","",null,null],[8,"Watcher","","",null,null],[10,"handle","","",94,{"inputs":[{"name":"watcher"},{"name":"watchedevent"}],"output":null}]],"paths":[[3,"Acl"],[3,"Stat"],[3,"WatchedEvent"],[4,"ZkError"],[4,"CreateMode"],[4,"KeeperState"],[4,"WatchedEventType"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CREATOR_ALL_ACL"],[3,"OPEN_ACL_UNSAFE"],[3,"READ_ACL_UNSAFE"],[3,"ZooKeeper"],[8,"Watcher"]]};
searchIndex['git2'] = {"items":[[0,"","git2","# libgit2 bindings for Rust",null,null],[3,"Blame","","Opaque structure to hold blame results.",null,null],[3,"BlameHunk","","Structure that represents a blame hunk.",null,null],[3,"BlameIter","","An iterator over the hunks in a blame.",null,null],[3,"BlameOptions","","Blame options",null,null],[3,"Blob","","A structure to represent a git [blob][1]",null,null],[3,"Branch","","A structure to represent a git [branch][1]",null,null],[3,"Branches","","An iterator over the branches inside of a repository.",null,null],[3,"Buf","","A structure to wrap an intermediate buffer used by libgit2.",null,null],[3,"Commit","","A structure to represent a git [commit][1]",null,null],[3,"Parents","","An iterator over the parent commits of a commit.",null,null],[3,"Config","","A structure representing a git configuration key/value store",null,null],[3,"ConfigEntry","","A struct representing a certain entry owned by a `Config` instance.",null,null],[3,"ConfigEntries","","An iterator over the `ConfigEntry` values of a `Config` structure.",null,null],[3,"Cred","","A structure to represent git credentials in libgit2.",null,null],[3,"CredentialHelper","","Management of the gitcredentials(7) interface.",null,null],[12,"username","","A public field representing the currently discovered username from\nconfiguration.",0,null],[3,"Diff","","The diff object that contains all individual file deltas.",null,null],[3,"DiffDelta","","Description of changes to one entry.",null,null],[3,"DiffFile","","Description of one side of a delta.",null,null],[3,"DiffOptions","","Structure describing options about how the diff should be executed.",null,null],[3,"Deltas","","An iterator over the diffs in a delta",null,null],[3,"DiffLine","","Structure describing a line (or data span) of a diff.",null,null],[3,"DiffHunk","","Structure describing a hunk of a diff.",null,null],[3,"DiffStats","","Structure describing a hunk of a diff.",null,null],[3,"DiffFindOptions","","Control behavior of rename and copy detection",null,null],[3,"AnnotatedCommit","","A structure to represent an annotated commit, the input to merge and rebase.",null,null],[3,"MergeOptions","","Options to specify when merging.",null,null],[3,"Error","","A structure to represent errors coming out of libgit2.",null,null],[3,"Index","","A structure to represent a git [index][1]",null,null],[3,"IndexEntry","","A structure to represent an entry or a file inside of an index.",null,null],[12,"ctime","","",1,null],[12,"mtime","","",1,null],[12,"dev","","",1,null],[12,"ino","","",1,null],[12,"mode","","",1,null],[12,"uid","","",1,null],[12,"gid","","",1,null],[12,"file_size","","",1,null],[12,"id","","",1,null],[12,"flags","","",1,null],[12,"flags_extended","","",1,null],[12,"path","","",1,null],[3,"IndexEntries","","An iterator over the entries in an index",null,null],[3,"Note","","A structure representing a [note][note] in git.",null,null],[3,"Notes","","An iterator over all of the notes within a repository.",null,null],[3,"Object","","A structure to represent a git [object][1]",null,null],[3,"Oid","","Unique identity of any object (commit, tree, blob, tag).",null,null],[3,"Pathspec","","Structure representing a compiled pathspec used for matching against various\nstructures.",null,null],[3,"PathspecMatchList","","List of filenames matching a pathspec.",null,null],[3,"PathspecFailedEntries","","Iterator over the failed list of pathspec items that did not match.",null,null],[3,"PathspecDiffEntries","","Iterator over the matching diff deltas.",null,null],[3,"PathspecEntries","","Iterator over the matched paths in a pathspec.",null,null],[3,"Reference","","A structure to represent a git [reference][1].",null,null],[3,"References","","An iterator over the references in a repository.",null,null],[3,"ReferenceNames","","An iterator over the names of references in a repository.",null,null],[3,"Reflog","","A reference log of a git repository.",null,null],[3,"ReflogEntry","","An entry inside the reflog of a repository",null,null],[3,"ReflogIter","","An iterator over the entries inside of a reflog.",null,null],[3,"Refspec","","A structure to represent a git [refspec][1].",null,null],[3,"Remote","","A structure representing a [remote][1] of a git repository.",null,null],[3,"Refspecs","","An iterator over the refspecs that a remote contains.",null,null],[3,"RemoteHead","","Description of a reference advertised bya remote server, given out on calls\nto `list`.",null,null],[3,"FetchOptions","","Options which can be specified to various fetch operations.",null,null],[3,"PushOptions","","Options to control the behavior of a git push.",null,null],[3,"RemoteCallbacks","","A structure to contain the callbacks which are invoked when a repository is\nbeing updated or downloaded.",null,null],[3,"Progress","","Struct representing the progress by an in-flight transfer.",null,null],[3,"Repository","","An owned git repository, representing all state associated with the\nunderlying filesystem.",null,null],[3,"RepositoryInitOptions","","Options which can be used to configure how a repository is initialized",null,null],[3,"Revspec","","A revspec represents a range of revisions within a repository.",null,null],[3,"Revwalk","","A revwalk allows traversal of the commit graph defined by including one or\nmore leaves and excluding one or more roots.",null,null],[3,"Signature","","A Signature is used to indicate authorship of various actions throughout the\nlibrary.",null,null],[3,"StatusOptions","","Options that can be provided to `repo.statuses()` to control how the status\ninformation is gathered.",null,null],[3,"Statuses","","A container for a list of status information about a repository.",null,null],[3,"StatusIter","","An iterator over the statuses in a `Statuses` instance.",null,null],[3,"StatusEntry","","A structure representing an entry in the `Statuses` structure.",null,null],[3,"Submodule","","A structure to represent a git [submodule][1]",null,null],[3,"Tag","","A structure to represent a git [tag][1]",null,null],[3,"Time","","Time in a signature",null,null],[3,"IndexTime","","Time structure used in a git index entry.",null,null],[3,"Tree","","A structure to represent a git [tree][1]",null,null],[3,"TreeEntry","","A structure representing an entry inside of a tree. An entry is borrowed\nfrom a tree.",null,null],[3,"TreeIter","","An iterator over the entries in a tree.",null,null],[3,"Sort","","",null,null],[3,"CredentialType","","",null,null],[3,"IndexAddOption","","",null,null],[3,"RevparseMode","","",null,null],[3,"Status","","Status flags for a single file",null,null],[3,"RepositoryInitMode","","",null,null],[3,"SubmoduleStatus","","",null,null],[3,"PathspecFlags","","...",null,null],[3,"DiffStatsFormat","","Formatting options for diff stats",null,null],[4,"StatusShow","","Enumeration of possible methods of what can be shown through a status\noperation.",null,null],[13,"Index","","Only gives status based on HEAD to index comparison, not looking at\nworking directory changes.",2,null],[13,"Workdir","","Only gives status based on index to working directory comparison, not\ncomparing the index to the HEAD.",2,null],[13,"IndexAndWorkdir","","The default, this roughly matches `git status --porcelain` regarding\nwhich files are included and in what order.",2,null],[4,"ErrorCode","","An enumeration of possible errors that can happen when working with a git\nrepository.",null,null],[13,"GenericError","","Generic error",3,null],[13,"NotFound","","Requested object could not be found",3,null],[13,"Exists","","Object exists preventing operation",3,null],[13,"Ambiguous","","More than one object matches",3,null],[13,"BufSize","","Output buffer too short to hold data",3,null],[13,"User","","Operation not allowed on bare repository",3,null],[13,"BareRepo","","Operation not allowed on bare repository",3,null],[13,"UnbornBranch","","HEAD refers to branch with no commits",3,null],[13,"Unmerged","","Merge in progress prevented operation",3,null],[13,"NotFastForward","","Reference was not fast-forwardable",3,null],[13,"InvalidSpec","","Name/ref spec was not in a valid format",3,null],[13,"Conflict","","Checkout conflicts prevented operation",3,null],[13,"Locked","","Lock file prevented operation",3,null],[13,"Modified","","Reference value does not match expected",3,null],[13,"Auth","","Authentication error",3,null],[13,"Certificate","","Server certificate is invalid",3,null],[13,"Applied","","Patch/merge has already been applied",3,null],[13,"Peel","","The requested peel operation is not possible",3,null],[13,"Eof","","Unexpected EOF",3,null],[13,"Invalid","","Invalid operation or input",3,null],[13,"Uncommitted","","Uncommitted changes in index prevented operation",3,null],[13,"Directory","","Operation was not valid for a directory,",3,null],[4,"RepositoryState","","A listing of the possible states that a repository can be in.",null,null],[13,"Clean","","",4,null],[13,"Merge","","",4,null],[13,"Revert","","",4,null],[13,"CherryPick","","",4,null],[13,"Bisect","","",4,null],[13,"Rebase","","",4,null],[13,"RebaseInteractive","","",4,null],[13,"RebaseMerge","","",4,null],[13,"ApplyMailbox","","",4,null],[13,"ApplyMailboxOrRebase","","",4,null],[4,"Direction","","An enumeration of the possible directions for a remote.",null,null],[13,"Fetch","","Data will be fetched (read) from this remote.",5,null],[13,"Push","","Data will be pushed (written) to this remote.",5,null],[4,"ResetType","","An enumeration of the operations that can be performed for the `reset`\nmethod on a `Repository`.",null,null],[13,"Soft","","Move the head to the given commit.",6,null],[13,"Mixed","","Soft plus reset the index to the commit.",6,null],[13,"Hard","","Mixed plus changes in the working tree are discarded.",6,null],[4,"ObjectType","","An enumeration all possible kinds objects may have.",null,null],[13,"Any","","An object which corresponds to a any git object",7,null],[13,"Commit","","An object which corresponds to a git commit",7,null],[13,"Tree","","An object which corresponds to a git tree",7,null],[13,"Blob","","An object which corresponds to a git blob",7,null],[13,"Tag","","An object which corresponds to a git tag",7,null],[4,"BranchType","","An enumeration for the possible types of branches",null,null],[13,"Local","","A local branch not on a remote.",8,null],[13,"Remote","","A branch for a remote.",8,null],[4,"ConfigLevel","","An enumeration of the possible priority levels of a config file.",null,null],[13,"System","","System-wide configuration file, e.g. /etc/gitconfig",9,null],[13,"XDG","","XDG-compatible configuration file, e.g. ~/.config/git/config",9,null],[13,"Global","","User-specific configuration, e.g. ~/.gitconfig",9,null],[13,"Local","","Reopsitory specific config, e.g. $PWD/.git/config",9,null],[13,"App","","Application specific configuration file",9,null],[13,"Highest","","Highest level available",9,null],[4,"FileFavor","","Merge file favor options for `MergeOptions` instruct the file-level\nmerging functionality how to deal with conflicting regions of the files.",null,null],[13,"Normal","","When a region of a file is changed in both branches, a conflict will be\nrecorded in the index so that git_checkout can produce a merge file with\nconflict markers in the working directory. This is the default.",10,null],[13,"Ours","","When a region of a file is changed in both branches, the file created\nin the index will contain the \"ours\" side of any conflicting region.\nThe index will not record a conflict.",10,null],[13,"Theirs","","When a region of a file is changed in both branches, the file created\nin the index will contain the \"theirs\" side of any conflicting region.\nThe index will not record a conflict.",10,null],[13,"Union","","When a region of a file is changed in both branches, the file created\nin the index will contain each unique line from each side, which has\nthe result of combining both files. The index will not record a conflict.",10,null],[4,"Delta","","What type of change is described by a `DiffDelta`?",null,null],[13,"Unmodified","","No changes",11,null],[13,"Added","","Entry does not exist in old version",11,null],[13,"Deleted","","Entry does not exist in new version",11,null],[13,"Modified","","Entry content changed between old and new",11,null],[13,"Renamed","","Entry was renamed wbetween old and new",11,null],[13,"Copied","","Entry was copied from another old entry",11,null],[13,"Ignored","","Entry is ignored item in workdir",11,null],[13,"Untracked","","Entry is untracked item in workdir",11,null],[13,"Typechange","","Type of entry changed between old and new",11,null],[13,"Unreadable","","Entry is unreadable",11,null],[13,"Conflicted","","Entry in the index is conflicted",11,null],[4,"SubmoduleIgnore","","Submodule ignore values",null,null],[13,"Unspecified","","Use the submodule's configuration",12,null],[13,"None","","Any change or untracked file is considered dirty",12,null],[13,"Untracked","","Only dirty if tracked files have changed",12,null],[13,"Dirty","","Only dirty if HEAD has moved",12,null],[13,"All","","Never dirty",12,null],[4,"DiffFormat","","Possible output formats for diff data",null,null],[13,"Patch","","full git diff",13,null],[13,"PatchHeader","","just the headers of the patch",13,null],[13,"Raw","","like git diff --raw",13,null],[13,"NameOnly","","like git diff --name-only",13,null],[13,"NameStatus","","like git diff --name-status",13,null],[4,"AutotagOption","","Automatic tag following options.",null,null],[13,"Unspecified","","Use the setting from the remote's configuration",14,null],[13,"Auto","","Ask the server for tags pointing to objects we're already downloading",14,null],[13,"None","","Don't ask for any tags beyond the refspecs",14,null],[13,"All","","Ask for all the tags",14,null],[4,"FetchPrune","","Configuration for how pruning is done on a fetch",null,null],[13,"Unspecified","","Use the setting from the configuration",15,null],[13,"On","","Force pruning on",15,null],[13,"Off","","Force pruning off",15,null],[11,"into_c_string","collections::string","",16,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[11,"into_c_string","std::ffi::c_str","",17,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_c_string","std::path","",18,{"inputs":[{"name":"pathbuf"}],"output":{"name":"result"}}],[11,"into_c_string","std::ffi::os_str","",19,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"into_c_string","collections::vec","",20,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"build","git2","Builder-pattern objects for configuration various git operations.",null,null],[3,"RepoBuilder","git2::build","A builder struct which is used to build configuration for cloning a new git\nrepository.",null,null],[3,"CheckoutBuilder","","A builder struct for configuring checkouts of a repository.",null,null],[6,"Progress","","Checkout progress notification callback.",null,null],[11,"new","","Creates a new repository builder with all of the default configuration.",21,{"inputs":[{"name":"repobuilder"}],"output":{"name":"repobuilder"}}],[11,"bare","","Indicate whether the repository will be cloned as a bare repository or\nnot.",21,{"inputs":[{"name":"repobuilder"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"branch","","Specify the name of the branch to check out after the clone.",21,{"inputs":[{"name":"repobuilder"},{"name":"str"}],"output":{"name":"repobuilder"}}],[11,"local","","Set the flag for bypassing the git aware transport mechanism for local\npaths.",21,{"inputs":[{"name":"repobuilder"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"hardlinks","","Set the flag for whether hardlinks are used when using a local git-aware\ntransport mechanism.",21,{"inputs":[{"name":"repobuilder"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"with_checkout","","Configure the checkout which will be performed by consuming a checkout\nbuilder.",21,{"inputs":[{"name":"repobuilder"},{"name":"checkoutbuilder"}],"output":{"name":"repobuilder"}}],[11,"fetch_options","","Options which control the fetch, including callbacks.",21,{"inputs":[{"name":"repobuilder"},{"name":"fetchoptions"}],"output":{"name":"repobuilder"}}],[11,"clone","","Clone a remote repository.",21,{"inputs":[{"name":"repobuilder"},{"name":"str"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","Creates a new builder for checkouts with all of its default\nconfiguration.",22,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"dry_run","","Indicate that this checkout should perform a dry run by checking for\nconflicts but not make any actual changes.",22,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"force","","Take any action necessary to get the working directory to match the\ntarget including potentially discarding modified files.",22,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"safe","","Indicate that the checkout should be performed safely, allowing new\nfiles to be created but not overwriting extisting files or changes.",22,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"allow_conflicts","","In safe mode, apply safe file updates even when there are conflicts\ninstead of canceling the checkout.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"remove_untracked","","Remove untracked files from the working dir.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"remove_ignored","","Remove ignored files from the working dir.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"update_only","","Only update the contents of files that already exist.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"update_index","","Prevents checkout from writing the updated files' information to the\nindex.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"refresh","","Indicate whether the index and git attributes should be refreshed from\ndisk before any operations.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"skip_unmerged","","Skip files with unmerged index entries.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"use_ours","","Indicate whether the checkout should proceed on conflicts by using the\nstage 2 version of the file (\"ours\").",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"use_theirs","","Indicate whether the checkout should proceed on conflicts by using the\nstage 3 version of the file (\"theirs\").",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"overwrite_ignored","","Indicate whether ignored files should be overwritten during the checkout.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"conflict_style_merge","","Indicate whether a normal merge file should be written for conflicts.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"conflict_style_diff3","","Indicates whether to include common ancestor data in diff3 format files\nfor conflicts.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"disable_filters","","Indicate whether to apply filters like CRLF conversion.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"dir_perm","","Set the mode with which new directories are created.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"i32"}],"output":{"name":"checkoutbuilder"}}],[11,"file_perm","","Set the mode with which new files are created.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"i32"}],"output":{"name":"checkoutbuilder"}}],[11,"path","","Add a path to be checked out.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"t"}],"output":{"name":"checkoutbuilder"}}],[11,"target_dir","","Set the directory to check out to",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"path"}],"output":{"name":"checkoutbuilder"}}],[11,"ancestor_label","","The name of the common ancestor side of conflicts",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"our_label","","The name of the common our side of conflicts",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"their_label","","The name of the common their side of conflicts",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"progress","","Set a callback to receive notifications of checkout progress.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"f"}],"output":{"name":"checkoutbuilder"}}],[11,"configure","","Configure a raw checkout options based on this configuration.",22,{"inputs":[{"name":"checkoutbuilder"},{"name":"git_checkout_options"}],"output":null}],[0,"cert","git2","Certificate types which are passed to `CertificateCheck` in\n`RemoteCallbacks`.",null,null],[3,"Cert","git2::cert","A certificate for a remote connection, viewable as one of `CertHostkey` or\n`CertX509` currently.",null,null],[3,"CertHostkey","","Hostkey information taken from libssh2",null,null],[3,"CertX509","","X.509 certificate information",null,null],[11,"as_hostkey","","Attempt to view this certificate as an SSH hostkey.",23,{"inputs":[{"name":"cert"}],"output":{"name":"option"}}],[11,"as_x509","","Attempt to view this certificate as an X.509 certificate.",23,{"inputs":[{"name":"cert"}],"output":{"name":"option"}}],[11,"hash_md5","","Returns the md5 hash of the hostkey, if available.",24,{"inputs":[{"name":"certhostkey"}],"output":{"name":"option"}}],[11,"hash_sha1","","Returns the SHA-1 hash of the hostkey, if available.",24,{"inputs":[{"name":"certhostkey"}],"output":{"name":"option"}}],[11,"data","","Return the X.509 certificate data as a byte slice",25,null],[0,"string_array","git2","Bindings to libgit2's raw git_strarray type",null,null],[3,"StringArray","git2::string_array","A string array structure used by libgit2",null,null],[3,"Iter","","A forward iterator over the strings of an array, casted to `&str`.",null,null],[3,"IterBytes","","A forward iterator over the strings of an array, casted to `&[u8]`.",null,null],[11,"get","","Returns None if the i'th string is not utf8 or if i is out of bounds.",26,{"inputs":[{"name":"stringarray"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_bytes","","Returns None if `i` is out of bounds.",26,{"inputs":[{"name":"stringarray"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the strings contained within this array.",26,{"inputs":[{"name":"stringarray"}],"output":{"name":"iter"}}],[11,"iter_bytes","","Returns an iterator over the strings contained within this array,\nyielding byte slices.",26,{"inputs":[{"name":"stringarray"}],"output":{"name":"iterbytes"}}],[11,"len","","Returns the number of strings in this array.",26,{"inputs":[{"name":"stringarray"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"iterbytes"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"iterbytes"}],"output":{"name":"option"}}],[11,"drop","","",26,{"inputs":[{"name":"stringarray"}],"output":null}],[0,"oid_array","git2","Bindings to libgit2's raw git_strarray type",null,null],[3,"OidArray","git2::oid_array","An oid array structure used by libgit2",null,null],[11,"deref","","",29,null],[11,"drop","","",29,{"inputs":[{"name":"oidarray"}],"output":null}],[0,"transport","git2","Interfaces for adding custom transports to libgit2",null,null],[3,"Transport","git2::transport","A transport is a structure which knows how to transfer data to and from a\nremote.",null,null],[4,"Service","","Actions that a smart transport can ask a subtransport to perform",null,null],[13,"UploadPackLs","","",30,null],[13,"UploadPack","","",30,null],[13,"ReceivePackLs","","",30,null],[13,"ReceivePack","","",30,null],[5,"register","","Add a custom transport definition, to be used in addition to the built-in\nset of transports that come with libgit2.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[8,"SmartSubtransport","","Interfaced used by smart transports.",null,null],[10,"action","","Indicates that this subtransport will be performing the specified action\non the specified URL.",31,{"inputs":[{"name":"smartsubtransport"},{"name":"str"},{"name":"service"}],"output":{"name":"result"}}],[10,"close","","Terminates a connection with the remote.",31,{"inputs":[{"name":"smartsubtransport"}],"output":{"name":"result"}}],[8,"SmartSubtransportStream","","An instance of a stream over which a smart transport will communicate with a\nremote.",null,null],[11,"clone","","",30,{"inputs":[{"name":"service"}],"output":{"name":"service"}}],[11,"smart","","Creates a new transport which will use the \"smart\" transport protocol\nfor transferring data.",32,{"inputs":[{"name":"transport"},{"name":"remote"},{"name":"bool"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",32,{"inputs":[{"name":"transport"}],"output":null}],[11,"len","git2","Gets the number of hunks that exist in the blame structure.",33,{"inputs":[{"name":"blame"}],"output":{"name":"usize"}}],[11,"get_index","","Gets the blame hunk at the given index.",33,{"inputs":[{"name":"blame"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_line","","Gets the hunk that relates to the given line number in the newest\ncommit.",33,{"inputs":[{"name":"blame"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the hunks in this blame.",33,{"inputs":[{"name":"blame"}],"output":{"name":"blameiter"}}],[11,"final_commit_id","","Returns OID of the commit where this line was last changed",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"oid"}}],[11,"final_signature","","Returns signature of the commit.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"signature"}}],[11,"final_start_line","","Returns line number where this hunk begins.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"usize"}}],[11,"orig_commit_id","","Returns the OID of the commit where this hunk was found.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"oid"}}],[11,"orig_signature","","Returns signature of the commit.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"signature"}}],[11,"orig_start_line","","Returns line number where this hunk begins.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"usize"}}],[11,"path","","Returns path to the file where this hunk originated.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"option"}}],[11,"is_boundary","","Tests whether this hunk has been tracked to a boundary commit\n(the root, or the commit specified in git_blame_options.oldest_commit).",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"bool"}}],[11,"lines_in_hunk","","Returns number of lines in this hunk.",34,{"inputs":[{"name":"blamehunk"}],"output":{"name":"usize"}}],[11,"new","","Initialize options",35,{"inputs":[{"name":"blameoptions"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_file","","Track lines that have moved within a file.",35,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_commit_moves","","Track lines that have moved across files in the same commit.",35,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_commit_copies","","Track lines that have been copied from another file that exists\nin the same commit.",35,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_any_commit_copies","","Track lines that have been copied from another file that exists\nin any commit.",35,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"first_parent","","Restrict the search of commits to those reachable following only\nthe first parents.",35,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"newest_commit","","Setter for the id of the newest commit to consider.",35,{"inputs":[{"name":"blameoptions"},{"name":"oid"}],"output":{"name":"blameoptions"}}],[11,"oldest_commit","","Setter for the id of the oldest commit to consider.",35,{"inputs":[{"name":"blameoptions"},{"name":"oid"}],"output":{"name":"blameoptions"}}],[11,"drop","","",33,{"inputs":[{"name":"blame"}],"output":null}],[11,"next","","",36,{"inputs":[{"name":"blameiter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"blameiter"}],"output":{"name":"option"}}],[11,"id","","Get the id (SHA1) of a repository blob",37,{"inputs":[{"name":"blob"}],"output":{"name":"oid"}}],[11,"is_binary","","Determine if the blob content is most certainly binary or not.",37,{"inputs":[{"name":"blob"}],"output":{"name":"bool"}}],[11,"content","","Get the content of this blob.",37,null],[11,"drop","","",37,{"inputs":[{"name":"blob"}],"output":null}],[11,"wrap","","Creates a new branch from a reference",38,{"inputs":[{"name":"branch"},{"name":"reference"}],"output":{"name":"branch"}}],[11,"get","","Gain access to the reference that is this branch",38,{"inputs":[{"name":"branch"}],"output":{"name":"reference"}}],[11,"into_reference","","Take ownership of the underlying reference.",38,{"inputs":[{"name":"branch"}],"output":{"name":"reference"}}],[11,"delete","","Delete an existing branch reference.",38,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"is_head","","Determine if the current local branch is pointed at by HEAD.",38,{"inputs":[{"name":"branch"}],"output":{"name":"bool"}}],[11,"rename","","Move/rename an existing local branch reference.",38,{"inputs":[{"name":"branch"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"name","","Return the name of the given local or remote branch.",38,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"name_bytes","","Return the name of the given local or remote branch.",38,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"upstream","","Return the reference supporting the remote tracking branch, given a\nlocal branch reference.",38,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"set_upstream","","Set the upstream configuration for a given local branch.",38,{"inputs":[{"name":"branch"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_raw","","Creates a new iterator from the raw pointer given.",39,null],[11,"next","","",39,{"inputs":[{"name":"branches"}],"output":{"name":"option"}}],[11,"drop","","",39,{"inputs":[{"name":"branches"}],"output":null}],[11,"new","","Creates a new empty buffer.",40,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"as_str","","Attempt to view this buffer as a string slice.",40,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[11,"drop","","",40,{"inputs":[{"name":"buf"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository commit",41,{"inputs":[{"name":"commit"}],"output":{"name":"oid"}}],[11,"tree_id","","Get the id of the tree pointed to by this commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"oid"}}],[11,"tree","","Get the tree pointed to by a commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"result"}}],[11,"raw","","Get access to the underlying raw pointer.",41,null],[11,"message","","Get the full message of a commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"message_bytes","","Get the full message of a commit as a byte slice.",41,null],[11,"message_encoding","","Get the encoding for the message of a commit, as a string representing a\nstandard encoding name.",41,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"message_raw","","Get the full raw message of a commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"message_raw_bytes","","Get the full raw message of a commit.",41,null],[11,"raw_header","","Get the full raw text of the commit header.",41,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"raw_header_bytes","","Get the full raw text of the commit header.",41,null],[11,"summary","","Get the short \"summary\" of the git commit message.",41,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"summary_bytes","","Get the short \"summary\" of the git commit message.",41,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"time","","Get the commit time (i.e. committer time) of a commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"time"}}],[11,"parents","","Creates a new iterator over the parents of this commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"parents"}}],[11,"parent_ids","","Creates a new iterator over the parents of this commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"parentids"}}],[11,"author","","Get the author of this commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"signature"}}],[11,"committer","","Get the committer of this commit.",41,{"inputs":[{"name":"commit"}],"output":{"name":"signature"}}],[11,"amend","","Amend this existing commit with all non-`None` values",41,{"inputs":[{"name":"commit"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"parent","","Get the specified parent of the commit.",41,{"inputs":[{"name":"commit"},{"name":"usize"}],"output":{"name":"result"}}],[11,"parent_id","","Get the specified parent id of the commit.",41,{"inputs":[{"name":"commit"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"parents"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"parents"}],"output":{"name":"option"}}],[11,"drop","","",41,{"inputs":[{"name":"commit"}],"output":null}],[11,"new","","Allocate a new configuration object",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"open","","Create a new config instance containing a single on-disk file",43,{"inputs":[{"name":"config"},{"name":"path"}],"output":{"name":"result"}}],[11,"open_default","","Open the global, XDG and system configuration files",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"find_global","","Locate the path to the global configuration file",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"find_system","","Locate the path to the system configuration file",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"find_xdg","","Locate the path to the global xdg compatible configuration file",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"add_file","","Add an on-disk config file instance to an existing config",43,{"inputs":[{"name":"config"},{"name":"path"},{"name":"configlevel"},{"name":"bool"}],"output":{"name":"result"}}],[11,"remove","","Delete a config variable from the config file with the highest level\n(usually the local one).",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_bool","","Get the value of a boolean config variable.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_i32","","Get the value of an integer config variable.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_i64","","Get the value of an integer config variable.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_str","","Get the value of a string config variable.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_bytes","","Get the value of a string config variable as a byte slice.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_string","","Get the value of a string config variable as an owned string.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_path","","Get the value of a path config variable as an owned .",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_entry","","Get the ConfigEntry for a config variable.",43,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"entries","","Iterate over all the config variables",43,{"inputs":[{"name":"config"},{"name":"option"}],"output":{"name":"result"}}],[11,"open_global","","Open the global/XDG configuration file according to git's rules",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"open_level","","Build a single-level focused config object from a multi-level one.",43,{"inputs":[{"name":"config"},{"name":"configlevel"}],"output":{"name":"result"}}],[11,"set_bool","","Set the value of a boolean config variable in the config file with the\nhighest level (usually the local one).",43,{"inputs":[{"name":"config"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_i32","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",43,{"inputs":[{"name":"config"},{"name":"str"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_i64","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",43,{"inputs":[{"name":"config"},{"name":"str"},{"name":"i64"}],"output":{"name":"result"}}],[11,"set_str","","Set the value of a string config variable in the config file with the\nhighest level (usually the local one).",43,{"inputs":[{"name":"config"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"snapshot","","Create a snapshot of the configuration",43,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"drop","","",43,{"inputs":[{"name":"config"}],"output":null}],[11,"name","","Gets the name of this entry.",44,{"inputs":[{"name":"configentry"}],"output":{"name":"option"}}],[11,"name_bytes","","Gets the name of this entry as a byte slice.",44,null],[11,"value","","Gets the value of this entry.",44,{"inputs":[{"name":"configentry"}],"output":{"name":"option"}}],[11,"value_bytes","","Gets the value of this entry as a byte slice.",44,null],[11,"level","","Gets the configuration level of this entry.",44,{"inputs":[{"name":"configentry"}],"output":{"name":"configlevel"}}],[11,"drop","","",45,{"inputs":[{"name":"configentries"}],"output":null}],[11,"drop","","",44,{"inputs":[{"name":"configentry"}],"output":null}],[11,"default","","Create a \"default\" credential usable for Negotiate mechanisms like NTLM\nor Kerberos authentication.",46,{"inputs":[{"name":"cred"}],"output":{"name":"result"}}],[11,"ssh_key_from_agent","","Create a new ssh key credential object used for querying an ssh-agent.",46,{"inputs":[{"name":"cred"},{"name":"str"}],"output":{"name":"result"}}],[11,"ssh_key","","Create a new passphrase-protected ssh key credential object.",46,{"inputs":[{"name":"cred"},{"name":"str"},{"name":"option"},{"name":"path"},{"name":"option"}],"output":{"name":"result"}}],[11,"userpass_plaintext","","Create a new plain-text username and password credential object.",46,{"inputs":[{"name":"cred"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"credential_helper","","Attempt to read `credential.helper` according to gitcredentials(7) [1]",46,{"inputs":[{"name":"cred"},{"name":"config"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"username","","Create a credential to specify a username.",46,{"inputs":[{"name":"cred"},{"name":"str"}],"output":{"name":"result"}}],[11,"has_username","","Check whether a credential object contains username information.",46,{"inputs":[{"name":"cred"}],"output":{"name":"bool"}}],[11,"credtype","","Return the type of credentials that this object represents.",46,{"inputs":[{"name":"cred"}],"output":{"name":"git_credtype_t"}}],[11,"unwrap","","Unwrap access to the underlying raw pointer, canceling the destructor",46,null],[11,"drop","","",46,{"inputs":[{"name":"cred"}],"output":null}],[11,"new","","Create a new credential helper object which will be used to probe git's\nlocal credential configuration.",0,{"inputs":[{"name":"credentialhelper"},{"name":"str"}],"output":{"name":"credentialhelper"}}],[11,"username","","Set the username that this credential helper will query with.",0,{"inputs":[{"name":"credentialhelper"},{"name":"option"}],"output":{"name":"credentialhelper"}}],[11,"config","","Query the specified configuration object to discover commands to\nexecute, usernames to query, etc.",0,{"inputs":[{"name":"credentialhelper"},{"name":"config"}],"output":{"name":"credentialhelper"}}],[11,"execute","","Execute this helper, attempting to discover a username/password pair.",0,{"inputs":[{"name":"credentialhelper"}],"output":{"name":"option"}}],[11,"tree_to_tree","","Create a diff with the difference between two tree objects.",47,{"inputs":[{"name":"diff"},{"name":"repository"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"tree_to_index","","Create a diff between a tree and repository index.",47,{"inputs":[{"name":"diff"},{"name":"repository"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"index_to_workdir","","Create a diff between the repository index and the workdir directory.",47,{"inputs":[{"name":"diff"},{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"tree_to_workdir","","Create a diff between a tree and the working directory.",47,{"inputs":[{"name":"diff"},{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"tree_to_workdir_with_index","","Create a diff between a tree and the working directory using index data\nto account for staged deletes, tracked files, etc.",47,{"inputs":[{"name":"diff"},{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"merge","","Merge one diff into another.",47,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"result"}}],[11,"deltas","","Returns an iterator over the deltas in this diff.",47,{"inputs":[{"name":"diff"}],"output":{"name":"deltas"}}],[11,"get_delta","","Return the diff delta for an entry in the diff list.",47,{"inputs":[{"name":"diff"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_sorted_icase","","Check if deltas are sorted case sensitively or insensitively.",47,{"inputs":[{"name":"diff"}],"output":{"name":"bool"}}],[11,"print","","Iterate over a diff generating formatted text output.",47,{"inputs":[{"name":"diff"},{"name":"diffformat"},{"name":"f"}],"output":{"name":"result"}}],[11,"stats","","Accumulate diff statistics for all patches.",47,{"inputs":[{"name":"diff"}],"output":{"name":"result"}}],[11,"find_similar","","Transform a diff marking file renames, copies, etc.",47,{"inputs":[{"name":"diff"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",47,{"inputs":[{"name":"diff"}],"output":null}],[11,"nfiles","","Returns the number of files in this delta.",48,{"inputs":[{"name":"diffdelta"}],"output":{"name":"u16"}}],[11,"status","","Returns the status of this entry",48,{"inputs":[{"name":"diffdelta"}],"output":{"name":"delta"}}],[11,"old_file","","Return the file which represents the \"from\" side of the diff.",48,{"inputs":[{"name":"diffdelta"}],"output":{"name":"difffile"}}],[11,"new_file","","Return the file which represents the \"to\" side of the diff.",48,{"inputs":[{"name":"diffdelta"}],"output":{"name":"difffile"}}],[11,"id","","Returns the Oid of this item.",49,{"inputs":[{"name":"difffile"}],"output":{"name":"oid"}}],[11,"path_bytes","","Returns the path, in bytes, of the entry relative to the working\ndirectory of the repository.",49,{"inputs":[{"name":"difffile"}],"output":{"name":"option"}}],[11,"path","","Returns the path of the entry relative to the working directory of the\nrepository.",49,{"inputs":[{"name":"difffile"}],"output":{"name":"option"}}],[11,"size","","Returns the size of this entry, in bytes",49,{"inputs":[{"name":"difffile"}],"output":{"name":"u64"}}],[11,"new","","Creates a new set of empty diff options.",50,{"inputs":[{"name":"diffoptions"}],"output":{"name":"diffoptions"}}],[11,"reverse","","Flag indicating whether the sides of the diff will be reversed.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_ignored","","Flag indicating whether ignored files are included.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"recurse_ignored_dirs","","Flag indicating whether ignored directories are traversed deeply or not.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_untracked","","Flag indicating whether untracked files are in the diff",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"recurse_untracked_dirs","","Flag indicating whether untracked directories are deeply traversed or\nnot.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unmodified","","Flag indicating whether unmodified files are in the diff.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_typechange","","If entrabled, then Typechange delta records are generated.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_typechange_trees","","Event with `include_typechange`, the tree treturned generally shows a\ndeleted blow. This flag correctly labels the tree transitions as a\ntypechange record with the `new_file`'s mode set to tree.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_filemode","","Flag indicating whether file mode changes are ignored.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_submodules","","Flag indicating whether all submodules should be treated as unmodified.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_case","","Flag indicating whether case insensitive filenames should be used.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"disable_pathspec_match","","If pathspecs are specified, this flag means that they should be applied\nas an exact match instead of a fnmatch pattern.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"skip_binary_check","","Disable updating the `binary` flag in delta records. This is useful when\niterating over a diff if you don't need hunk and data callbacks and want\nto avoid having to load a file completely.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"enable_fast_untracked_dirs","","When diff finds an untracked directory, to match the behavior of core\nGit, it scans the contents for ignored and untracked files. If all\ncontents are ignored, then the directory is ignored; if any contents are\nnot ignored, then the directory is untracked. This is extra work that\nmay not matter in many cases.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"update_index","","When diff finds a file in the working directory with stat information\ndifferent from the index, but the OID ends up being the same, write the\ncorrect stat information into the index. Note: without this flag, diff\nwill always leave the index untouched.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unreadable","","Include unreadable files in the diff",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unreadable_as_untracked","","Include unreadable files in the diff",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"force_text","","Treat all files as text, disabling binary attributes and detection.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"force_binary","","Treat all files as binary, disabling text diffs",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace","","Ignore all whitespace",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace_change","","Ignore changes in the amount of whitespace",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace_eol","","Ignore whitespace at tend of line",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_untracked_content","","When generating patch text, include the content of untracked files.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_unmodified","","When generating output, include the names of unmodified files if they\nare included in the `Diff`. Normally these are skipped in the formats\nthat list files (e.g. name-only, name-status, raw). Even with this these\nwill not be included in the patch format.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"patience","","Use the \"patience diff\" algorithm",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"minimal","","Take extra time to find the minimal diff",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_binary","","Include the necessary deflate/delta information so that `git-apply` can\napply given diff information to binary files.",50,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"context_lines","","Set the number of unchanged lines that define the boundary of a hunk\n(and to display before and after).",50,{"inputs":[{"name":"diffoptions"},{"name":"u32"}],"output":{"name":"diffoptions"}}],[11,"interhunk_lines","","Set the maximum number of unchanged lines between hunk boundaries before\nthe hunks will be merged into one.",50,{"inputs":[{"name":"diffoptions"},{"name":"u32"}],"output":{"name":"diffoptions"}}],[11,"id_abbrev","","The default value for this is `core.abbrev` or 7 if unset.",50,{"inputs":[{"name":"diffoptions"},{"name":"u16"}],"output":{"name":"diffoptions"}}],[11,"max_size","","Maximum size (in bytes) above which a blob will be marked as binary\nautomatically.",50,{"inputs":[{"name":"diffoptions"},{"name":"i64"}],"output":{"name":"diffoptions"}}],[11,"old_prefix","","The virtual \"directory\" to prefix old file names with in hunk headers.",50,{"inputs":[{"name":"diffoptions"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"new_prefix","","The virtual \"directory\" to prefix new file names with in hunk headers.",50,{"inputs":[{"name":"diffoptions"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"pathspec","","Add to the array of paths/fnmatch patterns to constrain the diff.",50,{"inputs":[{"name":"diffoptions"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"raw","","Acquire a pointer to the underlying raw options.",50,null],[11,"next","","",51,{"inputs":[{"name":"deltas"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"deltas"}],"output":{"name":"option"}}],[11,"old_lineno","","Line number in old file or `None` for added line",52,{"inputs":[{"name":"diffline"}],"output":{"name":"option"}}],[11,"new_lineno","","Line number in new file or `None` for deleted line",52,{"inputs":[{"name":"diffline"}],"output":{"name":"option"}}],[11,"num_lines","","Number of newline characters in content",52,{"inputs":[{"name":"diffline"}],"output":{"name":"u32"}}],[11,"content_offset","","Offset in the original file to the content",52,{"inputs":[{"name":"diffline"}],"output":{"name":"i64"}}],[11,"content","","Content of this line as bytes.",52,null],[11,"origin","","Sigil showing the origin of this `DiffLine`.",52,{"inputs":[{"name":"diffline"}],"output":{"name":"char"}}],[11,"old_start","","Starting line number in old_file",53,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"old_lines","","Number of lines in old_file",53,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"new_start","","Starting line number in new_file",53,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"new_lines","","Number of lines in new_file",53,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"header","","Header text",53,null],[11,"files_changed","","Get the total number of files chaned in a diff.",54,{"inputs":[{"name":"diffstats"}],"output":{"name":"usize"}}],[11,"insertions","","Get the total number of insertions in a diff",54,{"inputs":[{"name":"diffstats"}],"output":{"name":"usize"}}],[11,"deletions","","Get the total number of deletions in a diff",54,{"inputs":[{"name":"diffstats"}],"output":{"name":"usize"}}],[11,"to_buf","","Print diff statistics to a Buf",54,{"inputs":[{"name":"diffstats"},{"name":"diffstatsformat"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",54,{"inputs":[{"name":"diffstats"}],"output":null}],[11,"new","","Creates a new set of empty diff find options.",55,{"inputs":[{"name":"difffindoptions"}],"output":{"name":"difffindoptions"}}],[11,"by_config","","Reset all flags back to their unset state, indicating that\n`diff.renames` should be used instead. This is overridden once any flag\nis set.",55,{"inputs":[{"name":"difffindoptions"}],"output":{"name":"difffindoptions"}}],[11,"renames","","Look for renames?",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"renames_from_rewrites","","Consider old side of modified for renames?",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"copies","","Look for copies?",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"copies_from_unmodified","","Consider unmodified as copy sources?",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"rewrites","","Mark significant rewrites for split.",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"break_rewries","","Actually split large rewrites into delete/add pairs",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"for_untracked","","Find renames/copies for untracked items in working directory.",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"all","","Turn on all finding features.",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"ignore_leading_whitespace","","Measure similarity ignoring leading whitespace (default)",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"ignore_whitespace","","Measure similarity ignoring all whitespace",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"dont_ignore_whitespace","","Measure similarity including all data",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"exact_match_only","","Measure similarity only by comparing SHAs (fast and cheap)",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrites_for_renames_only","","Do not break rewrites unless they contribute to a rename.",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"remove_unmodified","","Remove any unmodified deltas after find_similar is done.",55,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",55,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"rename_from_rewrite_threshold","","Similarity of modified to be glegible rename source (default 50)",55,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"copy_threshold","","Similarity to consider a file copy (default 50)",55,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrite_threshold","","Similarity to split modify into delete/add pair (default 60)",55,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"rename_limit","","Maximum similarity sources to examine for a file (somewhat like\ngit-diff's `-l` option or `diff.renameLimit` config)",55,{"inputs":[{"name":"difffindoptions"},{"name":"usize"}],"output":{"name":"difffindoptions"}}],[11,"id","","Gets the commit ID that the given git_annotated_commit refers to",56,{"inputs":[{"name":"annotatedcommit"}],"output":{"name":"oid"}}],[11,"new","","Creates a default set of merge options.",57,{"inputs":[{"name":"mergeoptions"}],"output":{"name":"mergeoptions"}}],[11,"find_renames","","Detect file renames",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",57,{"inputs":[{"name":"mergeoptions"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"target_limit","","Maximum similarity sources to examine for renames (default 200).\nIf the number of rename candidates (add / delete pairs) is greater\nthan this value, inexact rename detection is aborted. This setting\noverrides the `merge.renameLimit` configuration value.",57,{"inputs":[{"name":"mergeoptions"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"file_favor","","Specify a side to favor for resolving conflicts",57,{"inputs":[{"name":"mergeoptions"},{"name":"filefavor"}],"output":{"name":"mergeoptions"}}],[11,"standard_style","","Create standard conflicted merge files",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"diff3_style","","Create diff3-style file",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"simplify_alnum","","Condense non-alphanumeric regions for simplified diff file",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace","","Ignore all whitespace",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace_change","","Ignore changes in amount of whitespace",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace_eol","","Ignore whitespace at end of line",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"patience","","Use the \"patience diff\" algorithm",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"minimal","","Take extra time to find minimal diff",57,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"raw","","Acquire a pointer to the underlying raw options.",57,null],[11,"drop","","",56,{"inputs":[{"name":"annotatedcommit"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last_error","","Returns the last error, or `None` if one is not available.",58,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_str","","Creates a new error from the given string as the error.",58,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[11,"code","","Return the error code associated with this error.",58,{"inputs":[{"name":"error"}],"output":{"name":"errorcode"}}],[11,"raw_code","","Return the raw error code associated with this error.",58,{"inputs":[{"name":"error"}],"output":{"name":"git_error_code"}}],[11,"message","","Return the message associated with this error",58,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"description","","",58,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",58,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",58,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"new","","Creates a new in-memory index.",59,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"open","","Create a new bare Git index object as a memory representation of the Git\nindex file in 'index_path', without a repository to back it.",59,{"inputs":[{"name":"index"},{"name":"path"}],"output":{"name":"result"}}],[11,"add","","Add or update an index entry from an in-memory struct",59,{"inputs":[{"name":"index"},{"name":"indexentry"}],"output":{"name":"result"}}],[11,"add_path","","Add or update an index entry from a file on disk",59,{"inputs":[{"name":"index"},{"name":"path"}],"output":{"name":"result"}}],[11,"add_all","","Add or update index entries matching files in the working directory.",59,{"inputs":[{"name":"index"},{"name":"i"},{"name":"indexaddoption"},{"name":"option"}],"output":{"name":"result"}}],[11,"clear","","Clear the contents (all the entries) of an index object.",59,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"len","","Get the count of entries currently in the index",59,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"get","","Get one of the entries in the index by its position.",59,{"inputs":[{"name":"index"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Get an iterator over the entries in this index.",59,{"inputs":[{"name":"index"}],"output":{"name":"indexentries"}}],[11,"get_path","","Get one of the entries in the index by its path.",59,{"inputs":[{"name":"index"},{"name":"path"},{"name":"i32"}],"output":{"name":"option"}}],[11,"path","","Get the full path to the index file on disk.",59,{"inputs":[{"name":"index"}],"output":{"name":"option"}}],[11,"read","","Update the contents of an existing index object in memory by reading\nfrom the hard disk.",59,{"inputs":[{"name":"index"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read_tree","","Read a tree into the index file with stats",59,{"inputs":[{"name":"index"},{"name":"tree"}],"output":{"name":"result"}}],[11,"remove","","Remove an entry from the index",59,{"inputs":[{"name":"index"},{"name":"path"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove_path","","Remove an index entry corresponding to a file on disk.",59,{"inputs":[{"name":"index"},{"name":"path"}],"output":{"name":"result"}}],[11,"remove_dir","","Remove all entries from the index under a given directory.",59,{"inputs":[{"name":"index"},{"name":"path"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove_all","","Remove all matching index entries.",59,{"inputs":[{"name":"index"},{"name":"i"},{"name":"option"}],"output":{"name":"result"}}],[11,"update_all","","Update all index entries to match the working directory",59,{"inputs":[{"name":"index"},{"name":"i"},{"name":"option"}],"output":{"name":"result"}}],[11,"write","","Write an existing index object from memory back to disk using an atomic\nfile lock.",59,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"write_tree","","Write the index as a tree.",59,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"write_tree_to","","Write the index as a tree to the given repository",59,{"inputs":[{"name":"index"},{"name":"repository"}],"output":{"name":"result"}}],[11,"drop","","",59,{"inputs":[{"name":"index"}],"output":null}],[11,"next","","",60,{"inputs":[{"name":"indexentries"}],"output":{"name":"option"}}],[11,"author","","Get the note author",61,{"inputs":[{"name":"note"}],"output":{"name":"signature"}}],[11,"committer","","Get the note committer",61,{"inputs":[{"name":"note"}],"output":{"name":"signature"}}],[11,"message_bytes","","Get the note message, in bytes.",61,null],[11,"message","","Get the note message as a string, returning `None` if it is not UTF-8.",61,{"inputs":[{"name":"note"}],"output":{"name":"option"}}],[11,"id","","Get the note object's id",61,{"inputs":[{"name":"note"}],"output":{"name":"oid"}}],[11,"drop","","",61,{"inputs":[{"name":"note"}],"output":null}],[11,"next","","",62,{"inputs":[{"name":"notes"}],"output":{"name":"option"}}],[11,"drop","","",62,{"inputs":[{"name":"notes"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository object",63,{"inputs":[{"name":"object"}],"output":{"name":"oid"}}],[11,"kind","","Get the object type of an object.",63,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"peel","","Recursively peel an object until an object of the specified type is met.",63,{"inputs":[{"name":"object"},{"name":"objecttype"}],"output":{"name":"result"}}],[11,"short_id","","Get a short abbreviated OID string for the object",63,{"inputs":[{"name":"object"}],"output":{"name":"result"}}],[11,"as_commit","","Attempt to view this object as a commit.",63,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"as_tag","","Attempt to view this object as a tag.",63,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"as_tree","","Attempt to view this object as a tree.",63,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"as_blob","","Attempt to view this object as a blob.",63,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"object"}],"output":{"name":"object"}}],[11,"drop","","",63,{"inputs":[{"name":"object"}],"output":null}],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",64,{"inputs":[{"name":"oid"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_bytes","","Parse a raw object id into an Oid structure.",64,null],[11,"as_bytes","","View this OID as a byte-slice 20 bytes in length.",64,null],[11,"is_zero","","Test if this OID is all zeros.",64,{"inputs":[{"name":"oid"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"oid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Hex-encode this Oid into a formatter.",64,{"inputs":[{"name":"oid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"oid"},{"name":"oid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"oid"},{"name":"oid"}],"output":{"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"oid"},{"name":"oid"}],"output":{"name":"ordering"}}],[11,"clone","","",64,{"inputs":[{"name":"oid"}],"output":{"name":"oid"}}],[11,"hash","","",64,{"inputs":[{"name":"oid"},{"name":"h"}],"output":null}],[11,"new","","Creates a new pathspec from a list of specs to match against.",65,{"inputs":[{"name":"pathspec"},{"name":"i"}],"output":{"name":"result"}}],[11,"match_diff","","Match a pathspec against files in a diff.",65,{"inputs":[{"name":"pathspec"},{"name":"diff"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"match_tree","","Match a pathspec against files in a tree.",65,{"inputs":[{"name":"pathspec"},{"name":"tree"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"match_index","","This matches the pathspec against the files in the repository index.",65,{"inputs":[{"name":"pathspec"},{"name":"index"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"match_workdir","","Match a pathspec against the working directory of a repository.",65,{"inputs":[{"name":"pathspec"},{"name":"repository"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"matches_path","","Try to match a path against a pathspec",65,{"inputs":[{"name":"pathspec"},{"name":"path"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"pathspec"}],"output":null}],[11,"entries","","Returns an iterator over the matching filenames in this list.",66,{"inputs":[{"name":"pathspecmatchlist"}],"output":{"name":"pathspecentries"}}],[11,"entry","","Get a matching filename by position.",66,{"inputs":[{"name":"pathspecmatchlist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"diff_entries","","Returns an iterator over the matching diff entries in this list.",66,{"inputs":[{"name":"pathspecmatchlist"}],"output":{"name":"pathspecdiffentries"}}],[11,"diff_entry","","Get a matching diff delta by position.",66,{"inputs":[{"name":"pathspecmatchlist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"failed_entries","","Returns an iterator over the non-matching entries in this list.",66,{"inputs":[{"name":"pathspecmatchlist"}],"output":{"name":"pathspecfailedentries"}}],[11,"failed_entry","","Get an original pathspec string that had no matches.",66,{"inputs":[{"name":"pathspecmatchlist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"drop","","",66,{"inputs":[{"name":"pathspecmatchlist"}],"output":null}],[11,"next","","",67,{"inputs":[{"name":"pathspecentries"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"pathspecentries"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"pathspecdiffentries"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"pathspecdiffentries"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"pathspecfailedentries"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"pathspecfailedentries"}],"output":{"name":"option"}}],[11,"is_valid_name","","Ensure the reference name is well-formed.",70,{"inputs":[{"name":"reference"},{"name":"str"}],"output":{"name":"bool"}}],[11,"raw","","Get access to the underlying raw pointer.",70,null],[11,"delete","","Delete an existing reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"result"}}],[11,"is_branch","","Check if a reference is a local branch.",70,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"is_note","","Check if a reference is a note.",70,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"is_remote","","Check if a reference is a remote tracking branch",70,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"is_tag","","Check if a reference is a tag",70,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"name","","Get the full name of a reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the full name of a reference.",70,null],[11,"shorthand","","Get the full shorthand of a reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"shorthand_bytes","","Get the full shorthand of a reference.",70,null],[11,"target","","Get the OID pointed to by a direct reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"target_peel","","Return the peeled OID target of this reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"symbolic_target","","Get full name to the reference pointed to by a symbolic reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"symbolic_target_bytes","","Get full name to the reference pointed to by a symbolic reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"resolve","","Resolve a symbolic reference to a direct reference.",70,{"inputs":[{"name":"reference"}],"output":{"name":"result"}}],[11,"peel","","Peel a reference to an object",70,{"inputs":[{"name":"reference"},{"name":"objecttype"}],"output":{"name":"result"}}],[11,"rename","","Rename an existing reference.",70,{"inputs":[{"name":"reference"},{"name":"str"},{"name":"bool"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_target","","Conditionally create a new reference with the same name as the given\nreference but a different OID target. The reference must be a direct\nreference, otherwise this will fail.",70,{"inputs":[{"name":"reference"},{"name":"oid"},{"name":"str"}],"output":{"name":"result"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"reference"},{"name":"reference"}],"output":{"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"reference"},{"name":"reference"}],"output":{"name":"ordering"}}],[11,"eq","","",70,{"inputs":[{"name":"reference"},{"name":"reference"}],"output":{"name":"bool"}}],[11,"drop","","",70,{"inputs":[{"name":"reference"}],"output":null}],[11,"names","","Consumes a `References` iterator to create an iterator over just the\nname of some references.",71,{"inputs":[{"name":"references"}],"output":{"name":"referencenames"}}],[11,"next","","",71,{"inputs":[{"name":"references"}],"output":{"name":"option"}}],[11,"drop","","",71,{"inputs":[{"name":"references"}],"output":null}],[11,"next","","",72,{"inputs":[{"name":"referencenames"}],"output":{"name":"option"}}],[11,"append","","Add a new entry to the in-memory reflog.",73,{"inputs":[{"name":"reflog"},{"name":"oid"},{"name":"signature"},{"name":"option"}],"output":{"name":"result"}}],[11,"remove","","Remove an entry from the reflog by its index",73,{"inputs":[{"name":"reflog"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","Lookup an entry by its index",73,{"inputs":[{"name":"reflog"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Get the number of log entries in a reflog",73,{"inputs":[{"name":"reflog"}],"output":{"name":"usize"}}],[11,"iter","","Get an iterator to all entries inside of this reflog",73,{"inputs":[{"name":"reflog"}],"output":{"name":"reflogiter"}}],[11,"write","","Write an existing in-memory reflog object back to disk using an atomic\nfile lock.",73,{"inputs":[{"name":"reflog"}],"output":{"name":"result"}}],[11,"drop","","",73,{"inputs":[{"name":"reflog"}],"output":null}],[11,"committer","","Get the committer of this entry",74,{"inputs":[{"name":"reflogentry"}],"output":{"name":"signature"}}],[11,"id_new","","Get the new oid",74,{"inputs":[{"name":"reflogentry"}],"output":{"name":"oid"}}],[11,"id_old","","Get the old oid",74,{"inputs":[{"name":"reflogentry"}],"output":{"name":"oid"}}],[11,"message","","Get the log message, returning `None` on invalid UTF-8.",74,{"inputs":[{"name":"reflogentry"}],"output":{"name":"option"}}],[11,"message_bytes","","Get the log message as a byte array.",74,{"inputs":[{"name":"reflogentry"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"reflogiter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"reflogiter"}],"output":{"name":"option"}}],[11,"direction","","Get the refspec's direction.",76,{"inputs":[{"name":"refspec"}],"output":{"name":"direction"}}],[11,"dst","","Get the destination specifier.",76,{"inputs":[{"name":"refspec"}],"output":{"name":"option"}}],[11,"dst_bytes","","Get the destination specifier, in bytes.",76,null],[11,"dst_matches","","Check if a refspec's destination descriptor matches a reference",76,{"inputs":[{"name":"refspec"},{"name":"str"}],"output":{"name":"bool"}}],[11,"src","","Get the source specifier.",76,{"inputs":[{"name":"refspec"}],"output":{"name":"option"}}],[11,"src_bytes","","Get the source specifier, in bytes.",76,null],[11,"src_matches","","Check if a refspec's source descriptor matches a reference",76,{"inputs":[{"name":"refspec"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_force","","Get the force update setting.",76,{"inputs":[{"name":"refspec"}],"output":{"name":"bool"}}],[11,"str","","Get the refspec's string.",76,{"inputs":[{"name":"refspec"}],"output":{"name":"option"}}],[11,"bytes","","Get the refspec's string as a byte array",76,null],[11,"is_valid_name","","Ensure the remote name is well-formed.",77,{"inputs":[{"name":"remote"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Get the remote's name.",77,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the remote's name, in bytes.",77,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"url","","Get the remote's url.",77,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"url_bytes","","Get the remote's url as a byte array.",77,null],[11,"pushurl","","Get the remote's pushurl.",77,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"pushurl_bytes","","Get the remote's pushurl as a byte array.",77,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"connect","","Open a connection to a remote.",77,{"inputs":[{"name":"remote"},{"name":"direction"}],"output":{"name":"result"}}],[11,"connected","","Check whether the remote is connected",77,{"inputs":[{"name":"remote"}],"output":{"name":"bool"}}],[11,"disconnect","","Disconnect from the remote",77,{"inputs":[{"name":"remote"}],"output":null}],[11,"download","","Download and index the packfile",77,null],[11,"refspecs","","Get the number of refspecs for a remote",77,{"inputs":[{"name":"remote"}],"output":{"name":"refspecs"}}],[11,"get_refspec","","Get the `nth` refspec from this remote.",77,{"inputs":[{"name":"remote"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fetch","","Download new data and update tips",77,null],[11,"update_tips","","Update the tips to the new state",77,{"inputs":[{"name":"remote"},{"name":"option"},{"name":"bool"},{"name":"autotagoption"},{"name":"option"}],"output":{"name":"result"}}],[11,"push","","Perform a push",77,null],[11,"stats","","Get the statistics structure that is filled in by the fetch operation.",77,{"inputs":[{"name":"remote"}],"output":{"name":"progress"}}],[11,"list","","Get the remote repository's reference advertisement list.",77,{"inputs":[{"name":"remote"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"remote"}],"output":{"name":"remote"}}],[11,"drop","","",77,{"inputs":[{"name":"remote"}],"output":null}],[11,"next","","",78,{"inputs":[{"name":"refspecs"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"refspecs"}],"output":{"name":"option"}}],[11,"is_local","","Flag if this is available locally.",79,{"inputs":[{"name":"remotehead"}],"output":{"name":"bool"}}],[11,"oid","","",79,{"inputs":[{"name":"remotehead"}],"output":{"name":"oid"}}],[11,"loid","","",79,{"inputs":[{"name":"remotehead"}],"output":{"name":"oid"}}],[11,"name","","",79,{"inputs":[{"name":"remotehead"}],"output":{"name":"str"}}],[11,"symref_target","","",79,{"inputs":[{"name":"remotehead"}],"output":{"name":"option"}}],[11,"new","","Creates a new blank set of fetch options",80,{"inputs":[{"name":"fetchoptions"}],"output":{"name":"fetchoptions"}}],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",80,{"inputs":[{"name":"fetchoptions"},{"name":"remotecallbacks"}],"output":{"name":"self"}}],[11,"prune","","Set whether to perform a prune after the fetch.",80,{"inputs":[{"name":"fetchoptions"},{"name":"fetchprune"}],"output":{"name":"self"}}],[11,"update_fetchhead","","Set whether to write the results to FETCH_HEAD.",80,{"inputs":[{"name":"fetchoptions"},{"name":"bool"}],"output":{"name":"self"}}],[11,"download_tags","","Set how to behave regarding tags on the remote, such as auto-downloading\ntags for objects we're downloading or downloading all of them.",80,{"inputs":[{"name":"fetchoptions"},{"name":"autotagoption"}],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of push options",81,{"inputs":[{"name":"pushoptions"}],"output":{"name":"pushoptions"}}],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",81,{"inputs":[{"name":"pushoptions"},{"name":"remotecallbacks"}],"output":{"name":"self"}}],[11,"packbuilder_parallelism","","If the transport being used to push to the remote requires the creation\nof a pack file, this controls the number of worker threads used by the\npackbuilder when creating that pack file to be sent to the remote.",81,{"inputs":[{"name":"pushoptions"},{"name":"u32"}],"output":{"name":"self"}}],[11,"new","","Creates a new set of empty callbacks",82,{"inputs":[{"name":"remotecallbacks"}],"output":{"name":"remotecallbacks"}}],[11,"credentials","","The callback through which to fetch credentials if required.",82,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"transfer_progress","","The callback through which progress is monitored.",82,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"sideband_progress","","Textual progress from the remote.",82,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"update_tips","","Each time a reference is updated locally, the callback will be called\nwith information about it.",82,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"certificate_check","","If certificate verification fails, then this callback will be invoked to\nlet the caller make the final decision of whether to allow the\nconnection to proceed.",82,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"total_objects","","Number of objects in the packfile being downloaded",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"indexed_objects","","Received objects that have been hashed",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"received_objects","","Objects which have been downloaded",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"local_objects","","Locally-available objects that have been injected in order to fix a thin\npack.",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"total_deltas","","Number of deltas in the packfile being downloaded",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"indexed_deltas","","Received deltas that have been hashed.",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"received_bytes","","Size of the packfile received up to now",83,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"to_owned","","Convert this to an owned version of `Progress`.",83,{"inputs":[{"name":"progress"}],"output":{"name":"progress"}}],[11,"open","","Attempt to open an already-existing repository at `path`.",84,{"inputs":[{"name":"repository"},{"name":"p"}],"output":{"name":"result"}}],[11,"discover","","Attempt to open an already-existing repository at or above `path`",84,{"inputs":[{"name":"repository"},{"name":"p"}],"output":{"name":"result"}}],[11,"init","","Creates a new repository in the specified folder.",84,{"inputs":[{"name":"repository"},{"name":"p"}],"output":{"name":"result"}}],[11,"init_bare","","Creates a new `--bare` repository in the specified folder.",84,{"inputs":[{"name":"repository"},{"name":"p"}],"output":{"name":"result"}}],[11,"init_opts","","Creates a new `--bare` repository in the specified folder.",84,{"inputs":[{"name":"repository"},{"name":"p"},{"name":"repositoryinitoptions"}],"output":{"name":"result"}}],[11,"clone","","Clone a remote repository.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"p"}],"output":{"name":"result"}}],[11,"revparse","","Execute a rev-parse operation against the `spec` listed.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"revparse_single","","Find a single object, as specified by a revision string.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"revparse_ext","","Find a single object and intermediate reference by a revision string.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_bare","","Tests whether this repository is a bare repository or not.",84,{"inputs":[{"name":"repository"}],"output":{"name":"bool"}}],[11,"is_shallow","","Tests whether this repository is a shallow clone.",84,{"inputs":[{"name":"repository"}],"output":{"name":"bool"}}],[11,"is_empty","","Tests whether this repository is empty.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"path","","Returns the path to the `.git` folder for normal repositories or the\nrepository itself for bare repositories.",84,{"inputs":[{"name":"repository"}],"output":{"name":"path"}}],[11,"state","","Returns the current state of this repository",84,{"inputs":[{"name":"repository"}],"output":{"name":"repositorystate"}}],[11,"workdir","","Get the path of the working directory for this repository.",84,{"inputs":[{"name":"repository"}],"output":{"name":"option"}}],[11,"namespace","","Get the currently active namespace for this repository.",84,{"inputs":[{"name":"repository"}],"output":{"name":"option"}}],[11,"namespace_bytes","","Get the currently active namespace for this repository as a byte array.",84,{"inputs":[{"name":"repository"}],"output":{"name":"option"}}],[11,"remotes","","List all remotes for a given repository",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"find_remote","","Get the information for a particular remote",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote","","Add a remote with the default fetch refspec to the repository's\nconfiguration.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_anonymous","","Create an anonymous remote",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_rename","","Give a remote a new name",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_delete","","Delete an existing persisted remote.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_add_fetch","","Add a fetch refspec to the remote's configuration",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_add_push","","Add a push refspec to the remote's configuration.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_set_url","","Set the remote's url in the configuration",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_set_pushurl","","Set the remote's url for pushing in the configuration.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"reset","","Sets the current head to the specified object and optionally resets\nthe index and working tree to match.",84,{"inputs":[{"name":"repository"},{"name":"object"},{"name":"resettype"},{"name":"option"}],"output":{"name":"result"}}],[11,"reset_default","","Updates some entries in the index from the target commit tree.",84,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[11,"head","","Retrieve and resolve the reference pointed at by HEAD.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"set_head","","Make the repository HEAD point to the specified reference.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_head_detached","","Make the repository HEAD directly point to the commit.",84,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"references","","Create an iterator for the repo's references",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"references_glob","","Create an iterator for the repo's references that match the specified\nglob",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"submodules","","Load all submodules for this repository and return them.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"statuses","","Gather file status information and populate the returned structure.",84,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"status_should_ignore","","Test if the ignore rules apply to a given file.",84,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"result"}}],[11,"status_file","","Get file status for a single file.",84,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"result"}}],[11,"branches","","Create an iterator which loops over the requested branches.",84,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"index","","Get the Index file for this repository.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"config","","Get the configuration file for this repository.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"blob","","Write an in-memory buffer to the ODB as a blob.",84,null],[11,"blob_path","","Read a file from the filesystem and write its content to the Object\nDatabase as a loose blob",84,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"result"}}],[11,"find_blob","","Lookup a reference to one of the objects in a repository.",84,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"branch","","Create a new branch pointing at a target commit",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"commit"},{"name":"bool"}],"output":{"name":"result"}}],[11,"find_branch","","Lookup a branch by its name in a repository.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"branchtype"}],"output":{"name":"result"}}],[11,"commit","","Create new commit in the repository",84,null],[11,"find_commit","","Lookup a reference to one of the commits in a repository.",84,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"find_object","","Lookup a reference to one of the objects in a repository.",84,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"option"}],"output":{"name":"result"}}],[11,"reference","","Create a new direct reference.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"oid"},{"name":"bool"},{"name":"str"}],"output":{"name":"result"}}],[11,"reference_symbolic","","Create a new symbolic reference.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"},{"name":"bool"},{"name":"str"}],"output":{"name":"result"}}],[11,"find_reference","","Lookup a reference to one of the objects in a repository.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"refname_to_id","","Lookup a reference by name and resolve immediately to OID.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"reference_to_annotated_commit","","Creates a git_annotated_commit from the given reference.",84,{"inputs":[{"name":"repository"},{"name":"reference"}],"output":{"name":"result"}}],[11,"signature","","Create a new action signature with default user and now timestamp.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"submodule","","Set up a new git submodule for checkout.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"find_submodule","","Lookup submodule information by name or path.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"submodule_status","","Get the status for a submodule.",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"submoduleignore"}],"output":{"name":"result"}}],[11,"find_tree","","Lookup a reference to one of the objects in a repository.",84,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"tag","","Create a new tag in the repository from an object",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"object"},{"name":"signature"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"tag_lightweight","","Create a new lightweight tag pointing at a target object",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"object"},{"name":"bool"}],"output":{"name":"result"}}],[11,"find_tag","","Lookup a tag object from the repository.",84,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"tag_delete","","Delete an existing tag reference.",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"tag_names","","Get a list with all the tags in the repository.",84,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"checkout_head","","Updates files in the index and the working tree to match the content of\nthe commit pointed at by HEAD.",84,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"checkout_index","","Updates files in the working tree to match the content of the index.",84,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"checkout_tree","","Updates files in the index and working tree to match the content of the\ntree pointed at by the treeish.",84,{"inputs":[{"name":"repository"},{"name":"object"},{"name":"option"}],"output":{"name":"result"}}],[11,"merge","","Merges the given commit(s) into HEAD, writing the results into the\nworking directory. Any changes are staged for commit and any conflicts\nare written to the index. Callers should inspect the repository's index\nafter this completes, resolve any conflicts and prepare a commit.",84,null],[11,"merge_commits","","Merge two commits, producing an index that reflects the result of\nthe merge. The index may be written as-is to the working directory or\nchecked out. If the index is to be converted to a tree, the caller\nshould resolve any conflicts that arose as part of the merge.",84,{"inputs":[{"name":"repository"},{"name":"commit"},{"name":"commit"},{"name":"option"}],"output":{"name":"result"}}],[11,"cleanup_state","","Remove all the metadata associated with an ongoing command like merge,\nrevert, cherry-pick, etc. For example: MERGE_HEAD, MERGE_MSG, etc.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"note","","Add a note for an object",84,{"inputs":[{"name":"repository"},{"name":"signature"},{"name":"signature"},{"name":"option"},{"name":"oid"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"note_default_ref","","Get the default notes reference for this repository",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"notes","","Creates a new iterator for notes in this repository.",84,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"find_note","","Read the note for an object.",84,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"oid"}],"output":{"name":"result"}}],[11,"note_delete","","Remove the note for an object.",84,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"option"},{"name":"signature"},{"name":"signature"}],"output":{"name":"result"}}],[11,"revwalk","","Create a revwalk that can be used to traverse the commit graph.",84,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"blame_file","","Get the blame for a single file.",84,{"inputs":[{"name":"repository"},{"name":"path"},{"name":"option"}],"output":{"name":"result"}}],[11,"merge_base","","Find a merge base between two commits",84,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"merge_bases","","Find all merge bases between two commits",84,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"graph_ahead_behind","","Count the number of unique commits between two commit objects",84,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"graph_descendant_of","","Determine if a commit is the descendant of another commit",84,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"reflog","","Read the reflog for the given reference",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"reflog_delete","","Delete the reflog for the given reference",84,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"reflog_rename","","Rename a reflog",84,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",84,{"inputs":[{"name":"repository"}],"output":null}],[11,"new","","Creates a default set of initialization options.",85,{"inputs":[{"name":"repositoryinitoptions"}],"output":{"name":"repositoryinitoptions"}}],[11,"bare","","Create a bare repository with no working directory.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"no_reinit","","Return an error if the repository path appears to already be a git\nrepository.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"no_dotgit_dir","","Normally a '/.git/' will be appended to the repo apth for non-bare repos\n(if it is not already there), but passing this flag prevents that\nbehavior.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mkdir","","Make the repo path (and workdir path) as needed. The \".git\" directory\nwill always be created regardless of this flag.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mkpath","","Recursively make all components of the repo and workdir path sas\nnecessary.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mode","","Set to one of the `RepositoryInit` constants, or a custom value.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitoptions"}}],[11,"external_template","","Enable or disable using external templates.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"workdir_path","","The path do the working directory.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"path"}],"output":{"name":"repositoryinitoptions"}}],[11,"description","","If set, this will be used to initialize the \"description\" file in the\nrepository instead of using the template content.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"template_path","","When the `external_template` option is set, this is the first location\nto check for the template directory.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"path"}],"output":{"name":"repositoryinitoptions"}}],[11,"initial_head","","The name of the head to point HEAD at.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"origin_url","","If set, then after the rest of the repository initialization is\ncompleted an `origin` remote will be added pointing to this URL.",85,{"inputs":[{"name":"repositoryinitoptions"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"raw","","Creates a set of raw init options to be used with\n`git_repository_init_ext`.",85,{"inputs":[{"name":"repositoryinitoptions"}],"output":{"name":"git_repository_init_options"}}],[11,"from_objects","","Assembles a new revspec from the from/to components.",86,{"inputs":[{"name":"revspec"},{"name":"option"},{"name":"option"},{"name":"revparsemode"}],"output":{"name":"revspec"}}],[11,"from","","Access the `from` range of this revspec.",86,{"inputs":[{"name":"revspec"}],"output":{"name":"option"}}],[11,"to","","Access the `to` range of this revspec.",86,{"inputs":[{"name":"revspec"}],"output":{"name":"option"}}],[11,"mode","","Returns the intent of the revspec.",86,{"inputs":[{"name":"revspec"}],"output":{"name":"revparsemode"}}],[11,"reset","","Reset a revwalk to allow re-configuring it.",87,{"inputs":[{"name":"revwalk"}],"output":null}],[11,"set_sorting","","Set the order in which commits are visited.",87,{"inputs":[{"name":"revwalk"},{"name":"sort"}],"output":null}],[11,"simplify_first_parent","","Simplify the history by first-parent",87,{"inputs":[{"name":"revwalk"}],"output":null}],[11,"push","","Mark a commit to start traversal from.",87,{"inputs":[{"name":"revwalk"},{"name":"oid"}],"output":{"name":"result"}}],[11,"push_head","","Push the repository's HEAD",87,{"inputs":[{"name":"revwalk"}],"output":{"name":"result"}}],[11,"push_glob","","Push matching references",87,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"push_range","","Push and hide the respective endpoints of the given range.",87,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"push_ref","","Push the OID pointed to by a reference",87,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"hide","","Mark a commit as not of interest to this revwalk.",87,{"inputs":[{"name":"revwalk"},{"name":"oid"}],"output":{"name":"result"}}],[11,"hide_head","","Hide the repository's HEAD",87,{"inputs":[{"name":"revwalk"}],"output":{"name":"result"}}],[11,"hide_glob","","Hide matching references.",87,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"hide_ref","","Hide the OID pointed to by a reference.",87,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",87,{"inputs":[{"name":"revwalk"}],"output":null}],[11,"next","","",87,{"inputs":[{"name":"revwalk"}],"output":{"name":"option"}}],[11,"now","","Create a new action signature with a timestamp of 'now'.",88,{"inputs":[{"name":"signature"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Create a new action signature.",88,{"inputs":[{"name":"signature"},{"name":"str"},{"name":"str"},{"name":"time"}],"output":{"name":"result"}}],[11,"name","","Gets the name on the signature.",88,{"inputs":[{"name":"signature"}],"output":{"name":"option"}}],[11,"name_bytes","","Gets the name on the signature as a byte slice.",88,null],[11,"email","","Gets the email on the signature.",88,{"inputs":[{"name":"signature"}],"output":{"name":"option"}}],[11,"email_bytes","","Gets the email on the signature as a byte slice.",88,null],[11,"when","","Get the `when` of this signature.",88,{"inputs":[{"name":"signature"}],"output":{"name":"time"}}],[11,"to_owned","","Convert a signature of any lifetime into an owned signature with a\nstatic lifetime.",88,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"clone","","",88,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"drop","","",88,{"inputs":[{"name":"signature"}],"output":null}],[11,"fmt","","",88,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"statusshow"}],"output":{"name":"statusshow"}}],[11,"new","","Creates a new blank set of status options.",89,{"inputs":[{"name":"statusoptions"}],"output":{"name":"statusoptions"}}],[11,"show","","Select the files on which to report status.",89,{"inputs":[{"name":"statusoptions"},{"name":"statusshow"}],"output":{"name":"statusoptions"}}],[11,"pathspec","","Add a path pattern to match (using fnmatch-style matching).",89,{"inputs":[{"name":"statusoptions"},{"name":"t"}],"output":{"name":"statusoptions"}}],[11,"include_untracked","","Flag whether untracked files will be included.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_ignored","","Flag whether ignored files will be included.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unmodified","","Flag to include unmodified files.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"exclude_submodules","","Flag that submodules should be skipped.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"recurse_untracked_dirs","","Flag that all files in untracked directories should be included.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"disable_pathspec_match","","Indicates that the given paths should be treated as literals paths, note\npatterns.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"recurse_ignored_dirs","","Indicates that the contents of ignored directories should be included in\nthe status.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_head_to_index","","Indicates that rename detection should be processed between the head.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_index_to_workdir","","Indicates that rename detection should be run between the index and the\nworking directory.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"sort_case_sensitively","","Override the native case sensitivity for the file system and force the\noutput to be in case sensitive order.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"sort_case_insensitively","","Override the native case sensitivity for the file system and force the\noutput to be in case-insensitive order.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_from_rewrites","","Indicates that rename detection should include rewritten files.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"no_refresh","","Bypasses the default status behavior of doing a \"soft\" index reload.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"update_index","","Refresh the stat cache in the index for files are unchanged but have\nout of date stat information in the index.",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unreadable","","",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unreadable_as_untracked","","",89,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"raw","","Get a pointer to the inner list of status options.",89,null],[11,"get","","Gets a status entry from this list at the specified index.",90,{"inputs":[{"name":"statuses"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Gets the count of status entries in this list.",90,{"inputs":[{"name":"statuses"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over the statuses in this list.",90,{"inputs":[{"name":"statuses"}],"output":{"name":"statusiter"}}],[11,"drop","","",90,{"inputs":[{"name":"statuses"}],"output":null}],[11,"next","","",91,{"inputs":[{"name":"statusiter"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"statusiter"}],"output":{"name":"option"}}],[11,"path_bytes","","Access the bytes for this entry's corresponding pathname",92,null],[11,"path","","Access this entry's path name as a string.",92,{"inputs":[{"name":"statusentry"}],"output":{"name":"option"}}],[11,"status","","Access the status flags for this file",92,{"inputs":[{"name":"statusentry"}],"output":{"name":"status"}}],[11,"head_to_index","","Access detailed information about the differences between the file in\nHEAD and the file in the index.",92,{"inputs":[{"name":"statusentry"}],"output":{"name":"option"}}],[11,"index_to_workdir","","Access detailed information about the differences between the file in\nthe index and the file in the working directory.",92,{"inputs":[{"name":"statusentry"}],"output":{"name":"option"}}],[11,"branch","","Get the submodule's branch.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"branch_bytes","","Get the branch for the submodule.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"url","","Get the submodule's url.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"url_bytes","","Get the url for the submodule.",93,null],[11,"name","","Get the submodule's name.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the name for the submodule.",93,null],[11,"path","","Get the path for the submodule.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"path"}}],[11,"head_id","","Get the OID for the submodule in the current HEAD tree.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"index_id","","Get the OID for the submodule in the index.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"workdir_id","","Get the OID for the submodule in the current working directory.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"init","","Copy submodule info into \".git/config\" file.",93,{"inputs":[{"name":"submodule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"open","","Open the repository for a submodule.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"result"}}],[11,"reload","","Reread submodule info from config, index, and HEAD.",93,{"inputs":[{"name":"submodule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"sync","","Copy submodule remote info into submodule repo.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"result"}}],[11,"add_to_index","","Add current submodule HEAD commit to index of superproject.",93,{"inputs":[{"name":"submodule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"add_finalize","","Resolve the setup of a new git submodule.",93,{"inputs":[{"name":"submodule"}],"output":{"name":"result"}}],[11,"drop","","",93,{"inputs":[{"name":"submodule"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"oid"}}],[11,"message","","Get the message of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"message_bytes","","Get the message of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"name","","Get the name of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the name of a tag",94,null],[11,"peel","","Recursively peel a tag until a non tag git_object is found",94,{"inputs":[{"name":"tag"}],"output":{"name":"result"}}],[11,"tagger","","Get the tagger (author) of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"target","","Get the tagged object of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"result"}}],[11,"target_id","","Get the OID of the tagged object of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"oid"}}],[11,"target_type","","Get the OID of the tagged object of a tag",94,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"drop","","",94,{"inputs":[{"name":"tag"}],"output":null}],[11,"eq","","",95,{"inputs":[{"name":"time"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"time"},{"name":"time"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"time"}],"output":{"name":"time"}}],[11,"eq","","",96,{"inputs":[{"name":"indextime"},{"name":"indextime"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"indextime"},{"name":"indextime"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"indextime"}],"output":{"name":"indextime"}}],[11,"new","","Creates a new time structure from its components.",95,{"inputs":[{"name":"time"},{"name":"i64"},{"name":"i32"}],"output":{"name":"time"}}],[11,"seconds","","Return the time, in seconds, from epoch",95,{"inputs":[{"name":"time"}],"output":{"name":"i64"}}],[11,"offset_minutes","","Return the timezone offset, in minutes",95,{"inputs":[{"name":"time"}],"output":{"name":"i32"}}],[11,"new","","Creates a new time structure from its components.",96,{"inputs":[{"name":"indextime"},{"name":"i32"},{"name":"u32"}],"output":{"name":"indextime"}}],[11,"seconds","","Returns the number of seconds in the second component of this time.",96,{"inputs":[{"name":"indextime"}],"output":{"name":"i32"}}],[11,"nanoseconds","","Returns the nanosecond component of this time.",96,{"inputs":[{"name":"indextime"}],"output":{"name":"u32"}}],[11,"id","","Get the id (SHA1) of a repository object",97,{"inputs":[{"name":"tree"}],"output":{"name":"oid"}}],[11,"len","","Get the number of entries listed in this tree.",97,{"inputs":[{"name":"tree"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over the entries in this tree.",97,{"inputs":[{"name":"tree"}],"output":{"name":"treeiter"}}],[11,"get_id","","Lookup a tree entry by SHA value.",97,{"inputs":[{"name":"tree"},{"name":"oid"}],"output":{"name":"option"}}],[11,"get","","Lookup a tree entry by its position in the tree",97,{"inputs":[{"name":"tree"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_name","","Lookup a tree entry by its filename",97,{"inputs":[{"name":"tree"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_path","","Retrieve a tree entry contained in a tree or in any of its subtrees,\ngiven its relative path.",97,{"inputs":[{"name":"tree"},{"name":"path"}],"output":{"name":"result"}}],[11,"drop","","",97,{"inputs":[{"name":"tree"}],"output":null}],[11,"id","","Get the id of the object pointed by the entry",98,{"inputs":[{"name":"treeentry"}],"output":{"name":"oid"}}],[11,"name","","Get the filename of a tree entry",98,{"inputs":[{"name":"treeentry"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the filename of a tree entry",98,null],[11,"to_object","","Convert a tree entry to the object it points to.",98,{"inputs":[{"name":"treeentry"},{"name":"repository"}],"output":{"name":"result"}}],[11,"kind","","Get the type of the object pointed by the entry",98,{"inputs":[{"name":"treeentry"}],"output":{"name":"option"}}],[11,"filemode","","Get the UNIX file attributes of a tree entry",98,{"inputs":[{"name":"treeentry"}],"output":{"name":"i32"}}],[11,"filemode_raw","","Get the raw UNIX file attributes of a tree entry",98,{"inputs":[{"name":"treeentry"}],"output":{"name":"i32"}}],[11,"clone","","",98,{"inputs":[{"name":"treeentry"}],"output":{"name":"treeentry"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"treeentry"},{"name":"treeentry"}],"output":{"name":"option"}}],[11,"cmp","","",98,{"inputs":[{"name":"treeentry"},{"name":"treeentry"}],"output":{"name":"ordering"}}],[11,"eq","","",98,{"inputs":[{"name":"treeentry"},{"name":"treeentry"}],"output":{"name":"bool"}}],[11,"drop","","",98,{"inputs":[{"name":"treeentry"}],"output":null}],[11,"next","","",99,{"inputs":[{"name":"treeiter"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"treeiter"}],"output":{"name":"option"}}],[6,"IndexMatchedPath","","A callback function to filter index matches.",null,null],[6,"Credentials","","Callback used to acquire credentials for when a remote is fetched.",null,null],[6,"TransferProgress","","Callback to be invoked while a transfer is in progress.",null,null],[6,"TransportMessage","","Callback for receiving messages delivered by the transport.",null,null],[6,"UpdateTips","","Callback for whenever a reference is updated locally.",null,null],[17,"SORT_NONE","","Sort the repository contents in no particular ordering.",null,null],[17,"SORT_TOPOLOGICAL","","Sort the repository contents in topological order (parents before\nchildren).",null,null],[17,"SORT_TIME","","Sort the repository contents by commit time.",null,null],[17,"SORT_REVERSE","","Iterate through the repository contents in reverse order.",null,null],[17,"USER_PASS_PLAINTEXT","","",null,null],[17,"SSH_KEY","","",null,null],[17,"SSH_MEMORY","","",null,null],[17,"SSH_CUSTOM","","",null,null],[17,"DEFAULT","","",null,null],[17,"SSH_INTERACTIVE","","",null,null],[17,"USERNAME","","",null,null],[17,"ADD_DEFAULT","","",null,null],[17,"ADD_FORCE","","",null,null],[17,"ADD_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"ADD_CHECK_PATHSPEC","","",null,null],[17,"REVPARSE_SINGLE","","The spec targeted a single object",null,null],[17,"REVPARSE_RANGE","","The spec targeted a range of commits",null,null],[17,"REVPARSE_MERGE_BASE","","The spec used the `...` operator, which invokes special semantics.",null,null],[17,"STATUS_CURRENT","","",null,null],[17,"STATUS_INDEX_NEW","","",null,null],[17,"STATUS_INDEX_MODIFIED","","",null,null],[17,"STATUS_INDEX_DELETED","","",null,null],[17,"STATUS_INDEX_RENAMED","","",null,null],[17,"STATUS_INDEX_TYPECHANGE","","",null,null],[17,"STATUS_WT_NEW","","",null,null],[17,"STATUS_WT_MODIFIED","","",null,null],[17,"STATUS_WT_DELETED","","",null,null],[17,"STATUS_WT_TYPECHANGE","","",null,null],[17,"STATUS_WT_RENAMED","","",null,null],[17,"STATUS_IGNORED","","",null,null],[17,"STATUS_CONFLICTED","","",null,null],[17,"REPOSITORY_INIT_SHARED_UMASK","","Use permissions configured by umask - the default",null,null],[17,"REPOSITORY_INIT_SHARED_GROUP","","Use `--shared=group` behavior, chmod'ing the new repo to be\ngroup writable and \\\"g+sx\\\" for sticky group assignment",null,null],[17,"REPOSITORY_INIT_SHARED_ALL","","Use `--shared=all` behavior, adding world readability.",null,null],[17,"SUBMODULE_STATUS_IN_HEAD","","",null,null],[17,"SUBMODULE_STATUS_IN_INDEX","","",null,null],[17,"SUBMODULE_STATUS_IN_CONFIG","","",null,null],[17,"SUBMODULE_STATUS_IN_WD","","",null,null],[17,"SUBMODULE_STATUS_INDEX_ADDED","","",null,null],[17,"SUBMODULE_STATUS_INDEX_DELETED","","",null,null],[17,"SUBMODULE_STATUS_INDEX_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_UNINITIALIZED","","",null,null],[17,"SUBMODULE_STATUS_WD_ADDED","","",null,null],[17,"SUBMODULE_STATUS_WD_DELETED","","",null,null],[17,"SUBMODULE_STATUS_WD_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_INDEX_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_WD_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_UNTRACKED","","",null,null],[17,"PATHSPEC_DEFAULT","","Use the default pathspec matching configuration.",null,null],[17,"PATHSPEC_IGNORE_CASE","","Force matching to ignore case, otherwise matching will use native\ncase sensitivity fo the platform filesystem.",null,null],[17,"PATHSPEC_USE_CASE","","Force case sensitive matches, otherwise match will use the native\ncase sensitivity of the platform filesystem.",null,null],[17,"PATHSPEC_NO_GLOB","","Disable glob patterns and just use simple string comparison for\nmatching.",null,null],[17,"PATHSPEC_NO_MATCH_ERROR","","Means that match functions return the error code `NotFound` if no\nmatches are found. By default no matches is a success.",null,null],[17,"PATHSPEC_FIND_FAILURES","","Means that the list returned should track which patterns matched\nwhich files so that at the end of the match we can identify patterns\nthat did not match any files.",null,null],[17,"PATHSPEC_FAILURES_ONLY","","Means that the list returned does not need to keep the actual\nmatching filenames. Use this to just test if there were any matches\nat all or in combination with `PATHSPEC_FAILURES` to validate a\npathspec.",null,null],[17,"DIFF_STATS_NONE","","Don't generate any stats",null,null],[17,"DIFF_STATS_FULL","","Equivalent of `--stat` in git",null,null],[17,"DIFF_STATS_SHORT","","Equivalent of `--shortstat` in git",null,null],[17,"DIFF_STATS_NUMBER","","Equivalent of `--numstat` in git",null,null],[17,"DIFF_STATS_INCLUDE_SUMMARY","","Extended header information such as creations, renames and mode\nchanges, equivalent of `--summary` in git",null,null],[8,"IntoCString","","A class of types that can be converted to C strings.",null,null],[10,"into_c_string","","Consume this container, converting it into a CString",100,{"inputs":[{"name":"intocstring"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"eq","","",3,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"repositorystate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"repositorystate"}],"output":{"name":"repositorystate"}}],[11,"eq","","",4,{"inputs":[{"name":"repositorystate"},{"name":"repositorystate"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"repositorystate"},{"name":"repositorystate"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",6,{"inputs":[{"name":"resettype"}],"output":{"name":"resettype"}}],[11,"fmt","","",7,{"inputs":[{"name":"objecttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"objecttype"}],"output":{"name":"objecttype"}}],[11,"eq","","",7,{"inputs":[{"name":"objecttype"},{"name":"objecttype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"objecttype"},{"name":"objecttype"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"branchtype"}],"output":{"name":"branchtype"}}],[11,"fmt","","",8,{"inputs":[{"name":"branchtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"branchtype"},{"name":"branchtype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"branchtype"},{"name":"branchtype"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"configlevel"}],"output":{"name":"configlevel"}}],[11,"fmt","","",9,{"inputs":[{"name":"configlevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"configlevel"},{"name":"configlevel"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"configlevel"},{"name":"configlevel"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"filefavor"}],"output":{"name":"filefavor"}}],[11,"fmt","","",10,{"inputs":[{"name":"filefavor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"filefavor"},{"name":"filefavor"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"filefavor"},{"name":"filefavor"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"cmp","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"sort"}],"output":{"name":"sort"}}],[11,"eq","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[{"name":"sort"}],"output":{"name":"sort"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[{"name":"sort"}],"output":{"name":"sort"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"inputs":[{"name":"sort"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"sort"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",101,{"inputs":[{"name":"sort"},{"name":"u32"}],"output":{"name":"sort"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"inputs":[{"name":"sort"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"inputs":[{"name":"sort"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"not","","Returns the complement of this set of flags.",101,{"inputs":[{"name":"sort"}],"output":{"name":"sort"}}],[11,"hash","","",102,null],[11,"cmp","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"eq","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"all","","Returns the set containing all flags.",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",102,{"inputs":[{"name":"credentialtype"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",102,{"inputs":[{"name":"credentialtype"},{"name":"u32"}],"output":{"name":"credentialtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"sub","","Returns the set difference of the two sets of flags.",102,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"not","","Returns the complement of this set of flags.",102,{"inputs":[{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"hash","","",103,null],[11,"cmp","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"eq","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"all","","Returns the set containing all flags.",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bits","","Returns the raw value of the flags currently stored.",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",103,{"inputs":[{"name":"indexaddoption"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",103,{"inputs":[{"name":"indexaddoption"},{"name":"u32"}],"output":{"name":"indexaddoption"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"sub","","Returns the set difference of the two sets of flags.",103,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"not","","Returns the complement of this set of flags.",103,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"hash","","",104,null],[11,"cmp","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"eq","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"all","","Returns the set containing all flags.",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",104,{"inputs":[{"name":"revparsemode"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",104,{"inputs":[{"name":"revparsemode"},{"name":"u32"}],"output":{"name":"revparsemode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"not","","Returns the complement of this set of flags.",104,{"inputs":[{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"str","","Convert an object type to its string representation.",7,{"inputs":[{"name":"objecttype"}],"output":{"name":"str"}}],[11,"is_loose","","Determine if the given git_otype is a valid loose object type.",7,{"inputs":[{"name":"objecttype"}],"output":{"name":"bool"}}],[11,"from_raw","","Convert a raw git_otype to an ObjectType",7,{"inputs":[{"name":"objecttype"},{"name":"git_otype"}],"output":{"name":"option"}}],[11,"raw","","Convert this kind into its raw representation",7,{"inputs":[{"name":"objecttype"}],"output":{"name":"git_otype"}}],[11,"from_str","","Convert a string object type representation to its object type.",7,{"inputs":[{"name":"objecttype"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"objecttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Converts a raw configuration level to a ConfigLevel",9,{"inputs":[{"name":"configlevel"},{"name":"git_config_level_t"}],"output":{"name":"configlevel"}}],[11,"hash","","",105,null],[11,"cmp","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"eq","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",105,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"all","","Returns the set containing all flags.",105,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"bits","","Returns the raw value of the flags currently stored.",105,{"inputs":[{"name":"status"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",105,{"inputs":[{"name":"status"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",105,{"inputs":[{"name":"status"},{"name":"u32"}],"output":{"name":"status"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",105,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",105,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"sub","","Returns the set difference of the two sets of flags.",105,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"not","","Returns the complement of this set of flags.",105,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"hash","","",106,null],[11,"cmp","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"eq","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"all","","Returns the set containing all flags.",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"u32"}],"output":{"name":"repositoryinitmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",106,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"not","","Returns the complement of this set of flags.",106,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"fmt","","",11,{"inputs":[{"name":"delta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"delta"}],"output":{"name":"delta"}}],[11,"hash","","",107,null],[11,"cmp","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"eq","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"all","","Returns the set containing all flags.",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",107,{"inputs":[{"name":"submodulestatus"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",107,{"inputs":[{"name":"submodulestatus"},{"name":"u32"}],"output":{"name":"submodulestatus"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"not","","Returns the complement of this set of flags.",107,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"hash","","",108,null],[11,"cmp","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"eq","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"all","","Returns the set containing all flags.",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",108,{"inputs":[{"name":"pathspecflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",108,{"inputs":[{"name":"pathspecflags"},{"name":"u32"}],"output":{"name":"pathspecflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",108,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"not","","Returns the complement of this set of flags.",108,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"clone","","",13,{"inputs":[{"name":"diffformat"}],"output":{"name":"diffformat"}}],[11,"hash","","",109,null],[11,"cmp","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"eq","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"all","","Returns the set containing all flags.",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bits","","Returns the raw value of the flags currently stored.",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"u32"}],"output":{"name":"diffstatsformat"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"sub","","Returns the set difference of the two sets of flags.",109,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"not","","Returns the complement of this set of flags.",109,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}]],"paths":[[3,"CredentialHelper"],[3,"IndexEntry"],[4,"StatusShow"],[4,"ErrorCode"],[4,"RepositoryState"],[4,"Direction"],[4,"ResetType"],[4,"ObjectType"],[4,"BranchType"],[4,"ConfigLevel"],[4,"FileFavor"],[4,"Delta"],[4,"SubmoduleIgnore"],[4,"DiffFormat"],[4,"AutotagOption"],[4,"FetchPrune"],[3,"String"],[3,"CString"],[3,"PathBuf"],[3,"OsString"],[3,"Vec"],[3,"RepoBuilder"],[3,"CheckoutBuilder"],[3,"Cert"],[3,"CertHostkey"],[3,"CertX509"],[3,"StringArray"],[3,"Iter"],[3,"IterBytes"],[3,"OidArray"],[4,"Service"],[8,"SmartSubtransport"],[3,"Transport"],[3,"Blame"],[3,"BlameHunk"],[3,"BlameOptions"],[3,"BlameIter"],[3,"Blob"],[3,"Branch"],[3,"Branches"],[3,"Buf"],[3,"Commit"],[3,"Parents"],[3,"Config"],[3,"ConfigEntry"],[3,"ConfigEntries"],[3,"Cred"],[3,"Diff"],[3,"DiffDelta"],[3,"DiffFile"],[3,"DiffOptions"],[3,"Deltas"],[3,"DiffLine"],[3,"DiffHunk"],[3,"DiffStats"],[3,"DiffFindOptions"],[3,"AnnotatedCommit"],[3,"MergeOptions"],[3,"Error"],[3,"Index"],[3,"IndexEntries"],[3,"Note"],[3,"Notes"],[3,"Object"],[3,"Oid"],[3,"Pathspec"],[3,"PathspecMatchList"],[3,"PathspecEntries"],[3,"PathspecDiffEntries"],[3,"PathspecFailedEntries"],[3,"Reference"],[3,"References"],[3,"ReferenceNames"],[3,"Reflog"],[3,"ReflogEntry"],[3,"ReflogIter"],[3,"Refspec"],[3,"Remote"],[3,"Refspecs"],[3,"RemoteHead"],[3,"FetchOptions"],[3,"PushOptions"],[3,"RemoteCallbacks"],[3,"Progress"],[3,"Repository"],[3,"RepositoryInitOptions"],[3,"Revspec"],[3,"Revwalk"],[3,"Signature"],[3,"StatusOptions"],[3,"Statuses"],[3,"StatusIter"],[3,"StatusEntry"],[3,"Submodule"],[3,"Tag"],[3,"Time"],[3,"IndexTime"],[3,"Tree"],[3,"TreeEntry"],[3,"TreeIter"],[8,"IntoCString"],[3,"Sort"],[3,"CredentialType"],[3,"IndexAddOption"],[3,"RevparseMode"],[3,"Status"],[3,"RepositoryInitMode"],[3,"SubmoduleStatus"],[3,"PathspecFlags"],[3,"DiffStatsFormat"]]};
searchIndex['enum_primitive'] = {"items":[[0,"","enum_primitive","This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",0,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",0,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",0,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"fmt","core::num","",1,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",4,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",4,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",4,null],[11,"clone","","",5,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",5,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"fmt","","",6,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",7,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",7,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",8,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,null],[11,"eq","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",13,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",13,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",13,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",13,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",13,null],[11,"eq","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",13,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",14,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",14,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",14,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",14,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",14,null],[11,"eq","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",14,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",15,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",15,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",15,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",16,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",18,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",19,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",20,null],[11,"get","","Dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",21,null],[11,"eq","","",21,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",21,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",21,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",22,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",22,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",23,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",24,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",25,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",26,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",26,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",26,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",27,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",27,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",27,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",27,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",27,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",27,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",28,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",29,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",30,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",31,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",32,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",33,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",29,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",29,null],[11,"swap","","Stores a value into the bool, returning the old value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",30,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",30,null],[11,"swap","","Stores a value into the isize, returning the old value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",31,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",31,null],[11,"swap","","Stores a value into the usize, returning the old value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",32,null],[11,"load","","Loads a value from the pointer.",32,null],[11,"store","","Stores a value into the pointer.",32,null],[11,"swap","","Stores a value into the pointer, returning the old value.",32,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",32,null],[11,"fmt","","",31,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",34,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",34,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",34,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",34,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",34,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",34,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",34,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",36,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",36,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",36,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",36,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",36,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",38,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",38,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",38,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",38,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",39,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",39,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",40,null],[11,"deref","","",39,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",41,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",41,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",41,null],[11,"clone","core::char","",42,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",43,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",42,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",45,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",44,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",46,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",46,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",47,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",48,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",50,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",49,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",51,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",52,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",53,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",54,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"nth","","",55,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",56,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",56,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",56,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",57,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"clone","","",58,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",58,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",59,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",60,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",60,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",61,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",62,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",63,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",64,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",24,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",23,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",65,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"clone","","",66,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",66,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next","core::ops","",23,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",67,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",67,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",69,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",69,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",69,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",70,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",70,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",73,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",74,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",75,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",76,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",76,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",76,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",76,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",76,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",76,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",76,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",76,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",76,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",76,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",76,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",76,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",76,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",76,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",76,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",76,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",76,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",76,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",76,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",76,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",76,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",76,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",80,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",81,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",82,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",83,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",84,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",85,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",86,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",87,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",88,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",89,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",88,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",89,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",88,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",89,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",88,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",89,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",88,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",89,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",84,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",85,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",86,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",87,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",80,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",81,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",82,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",83,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",90,null],[11,"next","","",90,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",91,null],[11,"next","","",91,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",92,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",92,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",93,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",93,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",94,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next","","",95,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","","",96,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next","","",97,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next","","",98,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",99,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"count","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"count","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",101,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",102,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",103,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",104,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",103,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",103,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",103,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",105,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",106,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",107,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",108,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",109,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",110,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",108,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",108,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",108,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",108,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",108,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",111,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",112,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",112,null],[11,"matching","","",112,null],[11,"use_early_reject","","",113,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",113,null],[11,"matching","","",113,null],[11,"eq","core::str","",114,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",114,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",115,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",115,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",115,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",116,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",116,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",117,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",117,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",117,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",118,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",118,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"count","","",118,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",118,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",118,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",118,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",119,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",121,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",121,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",123,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",122,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",125,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",126,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",127,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",128,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",129,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",128,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",131,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",132,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",131,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",133,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next_back","","",133,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",135,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",135,null],[11,"call_mut","","",135,null],[11,"call_once","","",135,null],[11,"next","","",134,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next_back","","",134,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",137,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",137,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",137,null],[11,"finish","","",137,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",137,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",137,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",138,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",139,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",140,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",141,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",142,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",143,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",144,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",145,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",146,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",146,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",147,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",147,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",147,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",148,null],[11,"entry","","Adds a new entry to the set output.",149,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",149,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",149,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",150,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",150,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",150,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",151,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",151,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",151,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",152,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",153,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",154,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",155,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",156,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",157,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",158,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",159,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",160,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",160,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",161,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",161,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",161,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",161,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",161,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",161,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",161,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",161,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",161,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",161,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",161,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",161,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",161,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",161,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",161,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",161,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",161,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",21,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",34,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",162,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"FromPrimitive"]]};
searchIndex['cookie'] = {"items":[[0,"","cookie","",null,null],[3,"CookieJar","","A jar of cookies for managing a session",null,null],[3,"Cookie","","",null,null],[12,"name","","",0,null],[12,"value","","",0,null],[12,"expires","","",0,null],[12,"max_age","","",0,null],[12,"domain","","",0,null],[12,"path","","",0,null],[12,"secure","","",0,null],[12,"httponly","","",0,null],[12,"custom","","",0,null],[3,"AttrVal","","",null,null],[11,"new","","Creates a new empty cookie jar with the given signing key.",1,null],[11,"add_original","","Adds an original cookie from a request.",1,{"inputs":[{"name":"cookiejar"},{"name":"cookie"}],"output":null}],[11,"add","","Adds a new cookie to this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"cookie"}],"output":null}],[11,"remove","","Removes a cookie from this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":null}],[11,"find","","Finds a cookie inside of this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":{"name":"option"}}],[11,"signed","","Creates a child signed cookie jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"encrypted","","Creates a child encrypted cookie jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"iter"}}],[11,"fmt","","",0,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"eq","","",0,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"cookie"},{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",0,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",0,{"inputs":[{"name":"cookie"}],"output":{"name":"attrval"}}],[11,"fmt","","",2,{"inputs":[{"name":"attrval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"cookie"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Cookie"],[3,"CookieJar"],[3,"AttrVal"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",14,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",15,null],[13,"Invalid","","",15,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",16,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",16,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",17,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",18,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",19,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",22,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",23,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",24,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",25,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",29,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",30,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",30,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",30,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",30,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",30,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",31,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",31,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",31,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",31,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['toml'] = {"items":[[0,"","toml","A TOML-parsing library",null,null],[3,"Parser","","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"emit_nil","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u8","","",2,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_u16","","",2,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u32","","",2,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u64","","",2,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_isize","","",2,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i8","","",2,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_i16","","",2,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i32","","",2,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i64","","",2,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_bool","","",2,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f32","","",2,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_f64","","",2,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_char","","",2,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",2,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"value"},{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"read_nil","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",3,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"decoder"},{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"decodeerror"}],"output":{"name":"str"}}],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant",null,null],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant",null,null],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_str","","Extracts the string of this value if it is a string.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_float","","Extracts the float value if it is a float.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_slice","","Extracts the array value if it is an array.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_table","","Extracts the table value if it is a table.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"lookup","","Lookups for value at specified path.",7,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"from_str","","",7,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>",null,null],[3,"Ipv6Address","","A 128 bit IPv6 address",null,null],[12,"pieces","","",0,null],[3,"Url","","The parsed representation of an absolute URL.",null,null],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1,null],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1,null],[12,"query","","The query string of the URL.",1,null],[12,"fragment","","The fragment identifier of the URL.",1,null],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",null,null],[12,"username","","The username of the URL, as a possibly empty, percent-encoded string.",2,null],[12,"password","","The password of the URL.",2,null],[12,"host","","The host of the URL, either a domain name or an IPv4 address",2,null],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2,null],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2,null],[12,"path","","The path of the URL, as vector of percent-encoded strings.",2,null],[3,"UrlParser","","A set of optional parameters for URL parsing.",null,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A (DNS) domain name or an IPv4 address.",3,null],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",4,null],[13,"InvalidScheme","","",4,null],[13,"InvalidPort","","",4,null],[13,"InvalidIpv6Address","","",4,null],[13,"InvalidDomainCharacter","","",4,null],[13,"InvalidCharacter","","",4,null],[13,"InvalidBackslash","","",4,null],[13,"InvalidPercentEncoded","","",4,null],[13,"InvalidAtSymbolInUser","","",4,null],[13,"ExpectedTwoSlashes","","",4,null],[13,"ExpectedInitialSlash","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"RelativeUrlWithScheme","","",4,null],[13,"RelativeUrlWithoutBase","","",4,null],[13,"RelativeUrlWithNonRelativeBase","","",4,null],[13,"NonAsciiDomainsNotSupportedYet","","",4,null],[13,"CannotSetJavascriptFragment","","",4,null],[13,"CannotSetPortWithFileLikeScheme","","",4,null],[13,"CannotSetUsernameWithNonRelativeScheme","","",4,null],[13,"CannotSetPasswordWithNonRelativeScheme","","",4,null],[13,"CannotSetHostPortWithNonRelativeScheme","","",4,null],[13,"CannotSetHostWithNonRelativeScheme","","",4,null],[13,"CannotSetPortWithNonRelativeScheme","","",4,null],[13,"CannotSetPathWithNonRelativeScheme","","",4,null],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*.",null,null],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5,null],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5,null],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme.",null,null],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6,null],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6,null],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6,null],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme",null,{"inputs":[{"name":"str"}],"output":{"name":"schemetype"}}],[11,"cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"eq","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"ipv6address"},{"name":"ipv6address"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"ipv6address"}],"output":{"name":"ipv6address"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3,{"inputs":[{"name":"host"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the host as a string.",3,{"inputs":[{"name":"host"}],"output":{"name":"string"}}],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",0,{"inputs":[{"name":"ipv6address"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"serialize","","Serialize the IPv6 address to a string.",0,{"inputs":[{"name":"ipv6address"}],"output":{"name":"string"}}],[11,"fmt","","",0,{"inputs":[{"name":"ipv6address"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils",null,null],[3,"UrlUtilsWrapper","url::urlutils","",null,null],[12,"url","","",7,null],[12,"parser","","",7,null],[0,"percent_encoding","url","",null,null],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded.",null,null],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`.",null,null],[5,"percent_encode","","Percent-encode the given bytes.",null,null],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`.",null,{"inputs":[{"name":"str"},{"name":"encodeset"},{"name":"string"}],"output":null}],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"encodeset"}],"output":{"name":"string"}}],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`.",null,null],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8.",null,null],[5,"from_hex","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data.",null,null],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords.",null,null],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL.",null,null],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL.",null,null],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization.",null,null],[11,"clone","","",8,{"inputs":[{"name":"encodeset"}],"output":{"name":"encodeset"}}],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs.",null,null],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format.",null,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"format","url","Formatting utilities for URLs.",null,null],[3,"PathFormatter","url::format","Formatter and serializer for URL path data.",null,null],[12,"path","","The path as a slice of string-like objects (String or &str).",9,null],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data.",null,null],[12,"username","","URL username as a string slice.",10,null],[12,"password","","URL password as an optional string slice.",10,null],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field.",null,null],[12,"url","","",11,null],[11,"fmt","","",9,{"inputs":[{"name":"pathformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"userinfoformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"urlnofragmentformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ErrorHandler","url","This is called on non-fatal parse errors.",null,null],[6,"ParseResult","","",null,null],[11,"cmp","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"eq","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"schemedata"}],"output":{"name":"schemedata"}}],[11,"eq","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"schemedata"},{"name":"schemedata"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"relativeschemedata"}}],[11,"eq","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"relativeschemedata"}],"output":{"name":"bool"}}],[11,"from_str","","",1,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"new","","Return a new UrlParser with default parameters.",12,{"inputs":[{"name":"urlparser"}],"output":{"name":"urlparser"}}],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12,{"inputs":[{"name":"urlparser"},{"name":"url"}],"output":{"name":"urlparser"}}],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12,{"inputs":[{"name":"urlparser"},{"name":"errorhandler"}],"output":{"name":"urlparser"}}],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12,null],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12,{"inputs":[{"name":"urlparser"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"fmt","","",6,{"inputs":[{"name":"schemetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"default_port","","",6,{"inputs":[{"name":"schemetype"}],"output":{"name":"option"}}],[11,"same_as","","",6,{"inputs":[{"name":"schemetype"},{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",1,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1,{"inputs":[{"name":"url"},{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"serialize","","Return the serialization of this URL as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username","","If the URL is in a *relative scheme*, return its username.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path","","If the URL is in a *relative scheme*, return its path components.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1,{"inputs":[{"name":"url"},{"name":"i"}],"output":null}],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"encode","","",1,{"inputs":[{"name":"url"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"url"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"schemedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"result"}}],[11,"domain","","If the host is a domain, return the domain as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"option"}}],[11,"serialize_path","","Serialize the path as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"serialize_userinfo","","Serialize the userinfo as a string.",2,{"inputs":[{"name":"relativeschemedata"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"relativeschemedata"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Ipv6Address"],[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"EncodeSet"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[3,"UrlParser"]]};
searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs",null,null],[3,"Uuid","","A Universally Unique Identifier (UUID)",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID",null,null],[11,"clone","","",0,{"inputs":[{"name":"uuidversion"}],"output":{"name":"uuidversion"}}],[11,"eq","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"uuidversion"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"uuidvariant"}],"output":{"name":"uuidvariant"}}],[11,"eq","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"uuidvariant"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"uuid"},{"name":"s"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"new","","Create a new UUID of the specified version",3,{"inputs":[{"name":"uuid"},{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a new random UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a UUID using the supplied field values",3,null],[11,"from_bytes","","Creates a UUID using the supplied bytes",3,null],[11,"get_variant","","Returns the variant of the UUID structure",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the UUID",3,{"inputs":[{"name":"uuid"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"to_simple_string","","Returns the UUID as a string of 16 hexadecimal digits",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"to_urn_string","","Returns the UUID formatted as a full URN string",3,{"inputs":[{"name":"uuid"}],"output":{"name":"string"}}],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3,{"inputs":[{"name":"uuid"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"uuid"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[{"name":"uuid"}],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a UUID",3,{"inputs":[{"name":"uuid"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"uuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"encode","","Encode a UUID as a hyphenated string",3,{"inputs":[{"name":"uuid"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","Decode a UUID from a string",3,{"inputs":[{"name":"uuid"},{"name":"d"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"uuid"},{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['openssl'] = {"items":[[0,"","openssl","",null,null],[0,"asn1","","",null,null],[3,"Asn1Time","openssl::asn1","",null,null],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0,null],[11,"days_from_now","","Creates a new time on specified interval in days from now",0,{"inputs":[{"name":"asn1time"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_handle","","Returns raw handle",0,null],[11,"drop","","",0,{"inputs":[{"name":"asn1time"}],"output":null}],[0,"bn","openssl","",null,null],[3,"BigNum","openssl::bn","",null,null],[4,"RNGProperty","","",null,null],[13,"MsbMaybeZero","","",1,null],[13,"MsbOne","","",1,null],[13,"TwoMsbOne","","",1,null],[0,"unchecked","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"neg","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"clone","","",1,{"inputs":[{"name":"rngproperty"}],"output":{"name":"rngproperty"}}],[11,"new","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"new_from","","",2,{"inputs":[{"name":"bignum"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_dec_str","","",2,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_hex_str","","",2,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_from_slice","","",2,null],[11,"checked_sqr","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_nnmod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sqr","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_inv","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"add_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"sub_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mul_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"div_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mod_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"checked_gcd","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_generate_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"is_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_prime_fast","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_random","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_pseudo_random","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_pseudo_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"set_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clear_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_bit_set","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shl1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shr1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_div","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shl","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shr","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"negate","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[11,"abs_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"is_negative","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bool"}}],[11,"num_bits","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"num_bytes","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"to_vec","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"vec"}}],[11,"to_dec_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"to_hex_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"bignum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[0,"bio","openssl","",null,null],[3,"MemBio","openssl::bio","",null,null],[11,"drop","","",3,{"inputs":[{"name":"membio"}],"output":null}],[11,"new","","Creates a new owned memory based BIO",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[11,"borrowed","","Returns a \"borrow\", i.e. it has no ownership",3,null],[11,"unwrap","","Consumes current bio and returns wrapped value\nNote that data ownership is lost and\nshould be managed manually",3,null],[11,"get_handle","","Temporarily gets wrapped value",3,null],[11,"set_eof","","Sets the BIO's EOF state.",3,{"inputs":[{"name":"membio"},{"name":"bool"}],"output":null}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[0,"crypto","openssl","",null,null],[0,"hash","openssl::crypto","",null,null],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation.",null,null],[4,"Type","","Message digest (hash) type.",null,null],[13,"MD5","","",4,null],[13,"SHA1","","",4,null],[13,"SHA224","","",4,null],[13,"SHA256","","",4,null],[13,"SHA384","","",4,null],[13,"SHA512","","",4,null],[13,"RIPEMD160","","",4,null],[5,"hash","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"md_len","","Returns the length of the message digest.",4,{"inputs":[{"name":"type"}],"output":{"name":"usize"}}],[11,"evp_md","","Internal interface subject to removal.",4,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",5,{"inputs":[{"name":"hasher"},{"name":"type"}],"output":{"name":"hasher"}}],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",5,{"inputs":[{"name":"hasher"}],"output":{"name":"vec"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"hasher"}}],[11,"drop","","",5,{"inputs":[{"name":"hasher"}],"output":null}],[0,"hmac","openssl::crypto","",null,null],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation.",null,null],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`.",null,null],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6,null],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",6,{"inputs":[{"name":"hmac"}],"output":{"name":"vec"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"hmac"}}],[11,"drop","","",6,{"inputs":[{"name":"hmac"}],"output":null}],[0,"pkcs5","openssl::crypto","",null,null],[3,"KeyIvPair","openssl::crypto::pkcs5","",null,null],[12,"key","","",7,null],[12,"iv","","",7,null],[5,"evp_bytes_to_key_pbkdf1_compatible","","Derives a key and an IV from various parameters.",null,null],[5,"pbkdf2_hmac_sha1","","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"keyivpair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"keyivpair"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"keyivpair"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"keyivpair"}],"output":{"name":"keyivpair"}}],[0,"pkey","openssl::crypto","",null,null],[3,"PKey","openssl::crypto::pkey","",null,null],[4,"Parts","","",null,null],[13,"Neither","","",8,null],[13,"Public","","",8,null],[13,"Both","","",8,null],[4,"Role","","Represents a role an asymmetric key might be appropriate for.",null,null],[13,"Encrypt","","",9,null],[13,"Decrypt","","",9,null],[13,"Sign","","",9,null],[13,"Verify","","",9,null],[4,"EncryptionPadding","","Type of encryption padding to use.",null,null],[13,"OAEP","","",10,null],[13,"PKCS1v15","","",10,null],[11,"clone","","",8,{"inputs":[{"name":"parts"}],"output":{"name":"parts"}}],[11,"clone","","",9,{"inputs":[{"name":"role"}],"output":{"name":"role"}}],[11,"clone","","",10,{"inputs":[{"name":"encryptionpadding"}],"output":{"name":"encryptionpadding"}}],[11,"new","","",11,{"inputs":[{"name":"pkey"}],"output":{"name":"pkey"}}],[11,"from_handle","","",11,null],[11,"private_key_from_pem","","Reads private key from PEM, takes ownership of handle",11,{"inputs":[{"name":"pkey"},{"name":"r"}],"output":{"name":"result"}}],[11,"gen","","",11,{"inputs":[{"name":"pkey"},{"name":"usize"}],"output":null}],[11,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",11,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",11,null],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",11,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",11,null],[11,"write_pem","","Stores private key as a PEM",11,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_pub_pem","","Stores public key as a PEM",11,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"size","","Returns the size of the public key modulus.",11,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"can","","Returns whether this pkey object can perform the specified role.",11,{"inputs":[{"name":"pkey"},{"name":"role"}],"output":{"name":"bool"}}],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",11,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"encrypt_with_padding","","",11,null],[11,"decrypt_with_padding","","",11,null],[11,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",11,null],[11,"sign","","Signs data, using OpenSSL's default scheme and adding sha256 ASN.1 information to the\nsignature.\nThe bytes to sign must be the result of a sha256 hashing;\nreturns the signature.",11,null],[11,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on the SHA256 hash of a\nmessage.\nReturns true if the signature is valid, and false otherwise.",11,null],[11,"sign_with_hash","","Signs data, using OpenSSL's default scheme and add ASN.1 information for the given hash type to the\nsignature.\nThe bytes to sign must be the result of this type of hashing;\nreturns the signature.",11,null],[11,"verify_with_hash","","",11,null],[11,"get_handle","","",11,null],[11,"public_eq","","",11,{"inputs":[{"name":"pkey"},{"name":"pkey"}],"output":{"name":"bool"}}],[11,"drop","","",11,{"inputs":[{"name":"pkey"}],"output":null}],[0,"rand","openssl::crypto","",null,null],[5,"rand_bytes","openssl::crypto::rand","",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[0,"symm","openssl::crypto","",null,null],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",12,null],[13,"Decrypt","","",12,null],[4,"Type","","",null,null],[13,"AES_128_ECB","","",13,null],[13,"AES_128_CBC","","",13,null],[13,"AES_256_ECB","","",13,null],[13,"AES_256_CBC","","",13,null],[13,"RC4_128","","",13,null],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data.",null,null],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data.",null,null],[11,"clone","","",12,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"clone","","",13,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"new","","",14,{"inputs":[{"name":"crypter"},{"name":"type"}],"output":{"name":"crypter"}}],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",14,{"inputs":[{"name":"crypter"},{"name":"bool"}],"output":null}],[11,"init","","Initializes this crypter.",14,null],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",14,null],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",14,{"inputs":[{"name":"crypter"}],"output":{"name":"vec"}}],[11,"drop","","",14,{"inputs":[{"name":"crypter"}],"output":null}],[0,"memcmp","openssl::crypto","",null,null],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"ssl","openssl","",null,null],[3,"SslContextOptions","openssl::ssl","",null,null],[3,"SslVerifyMode","","",null,null],[3,"SslContext","","An SSL context object",null,null],[3,"Ssl","","",null,null],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",null,null],[4,"SslMethod","","Determines the SSL method supported",null,null],[13,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols.",15,null],[13,"Sslv3","","Only support the SSLv3 protocol.",15,null],[13,"Tlsv1","","Only support the TLSv1 protocol.",15,null],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime.",null,null],[13,"Ssl","","A connection using SSL",16,null],[13,"Normal","","A connection not using SSL",16,null],[5,"init","","Manually initialize SSL.\nIt is optional to call this function and safe to do so more than once.",null,{"inputs":[],"output":null}],[0,"error","","",null,null],[4,"SslError","openssl::ssl::error","An SSL error",null,null],[13,"StreamError","","The underlying stream reported an error",17,null],[13,"SslSessionClosed","","The SSL session has been closed by the other end",17,null],[13,"OpenSslErrors","","An error in the OpenSSL library",17,null],[4,"OpensslError","","An error from the OpenSSL library",null,null],[13,"UnknownError","","An unknown error",18,null],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",18,null],[12,"function","","The function reporting the error",18,null],[12,"reason","","The reason for the error",18,null],[11,"fmt","openssl::ssl::error","",17,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"sslerror"}],"output":{"name":"str"}}],[11,"cause","","",17,{"inputs":[{"name":"sslerror"}],"output":{"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"opensslerror"}],"output":{"name":"opensslerror"}}],[11,"fmt","","",18,{"inputs":[{"name":"opensslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",17,{"inputs":[{"name":"sslerror"}],"output":{"name":"sslerror"}}],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",17,{"inputs":[{"name":"sslerror"},{"name":"c_ulong"}],"output":{"name":"sslerror"}}],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates",null,null],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates\nwhen user-data should be carried for all verification process",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLV2","","",null,null],[17,"SSL_OP_NO_SSLV3","","",null,null],[17,"SSL_OP_NO_DTLSV1","","",null,null],[17,"SSL_OP_NO_TLSV1","","",null,null],[17,"SSL_OP_NO_DTLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_1","","",null,null],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",null,null],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",null,null],[17,"SSL_OP_PKCS1_CHECK_1","","",null,null],[17,"SSL_OP_PKCS1_CHECK_2","","",null,null],[17,"SSL_OP_EPHEMERAL_RSA","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_SSL_MASK","","",null,null],[17,"SSL_VERIFY_PEER","","Verify that the server's certificate is trusted",null,null],[17,"SSL_VERIFY_NONE","","Do not verify the server's certificate",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","Terminate handshake if client did not return a certificate.\nUse together with SSL_VERIFY_PEER.",null,null],[8,"IntoSsl","","",null,null],[10,"into_ssl","","",19,{"inputs":[{"name":"intossl"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"u64"}],"output":{"name":"sslcontextoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"from_iter","","",20,{"inputs":[{"name":"sslcontextoptions"},{"name":"t"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",15,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"sslmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"sslmethod"}}],[11,"is_dtls","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1_2","","",15,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"cmp","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"eq","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"sslverifymode"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"from_iter","","",21,{"inputs":[{"name":"sslverifymode"},{"name":"t"}],"output":{"name":"sslverifymode"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",22,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",22,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",22,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",22,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"from","alloc::boxed","",23,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",23,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",23,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",23,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",24,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",25,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",26,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",27,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",29,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","openssl","Returns true if the boxed type is the same as `T`",30,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",30,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",30,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",30,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",33,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",33,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",34,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",34,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::imp","",35,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",35,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",36,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",36,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",36,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",37,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",37,null],[11,"get","","",37,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",38,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",38,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",38,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",38,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",39,null],[11,"name","","Gets the thread's name.",39,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",39,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",40,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",40,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",41,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",42,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",43,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",43,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",43,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",45,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",45,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",42,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",42,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",42,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",42,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",42,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",42,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",42,null],[11,"next","","",45,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",45,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",45,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",45,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",44,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",44,null],[11,"take","","Removes this bucket's key and value from the hashtable.",44,null],[11,"replace","","",44,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",44,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",44,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",44,null],[11,"expect_full","","",46,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",47,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",47,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",48,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",49,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",49,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",50,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"len","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",52,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"len","","",52,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",53,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"len","","",53,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",54,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"len","","",54,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",54,null],[11,"clone","","",48,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",48,null],[11,"clone","std::collections::hash::map","",55,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",56,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",56,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",56,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",56,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",56,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",56,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",56,null],[11,"get","","Returns a reference to the value corresponding to the key.",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",56,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",58,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",59,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",56,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"len","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",60,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"len","","",60,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"len","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",58,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"len","","",58,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",59,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"len","","",59,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",62,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"len","","",62,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",63,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",63,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",64,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",64,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",64,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",64,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",64,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",65,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",56,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"clone","","",66,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",66,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",66,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",66,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",56,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",56,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",67,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",67,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",67,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",67,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",67,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",67,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",67,null],[11,"contains","","Returns `true` if the set contains a value.",67,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",67,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",67,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",67,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",67,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",67,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",67,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"default","","",67,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",67,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"len","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"len","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",70,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"len","","",70,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",71,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",71,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"clone","","",72,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",72,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",73,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",73,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",74,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"hasher","std::collections::hash::state","",75,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",75,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",75,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::vec_deque","",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",76,null],[11,"default","","",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",76,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",76,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",76,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",76,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",76,null],[11,"iter","","Returns a front-to-back iterator.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",76,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",76,null],[11,"len","","Returns the number of elements in the `VecDeque`.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",76,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",76,null],[11,"push_back","","Appends an element to the back of a buffer",76,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",76,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",76,null],[11,"retain","","Retains only the elements specified by the predicate.",76,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",76,null],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",80,null],[11,"next","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",76,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",76,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"index","","",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",76,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",76,null],[11,"extend","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::binary_heap","",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",81,null],[11,"default","","",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",81,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",81,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",81,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",81,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",81,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",81,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",81,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",81,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",81,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",81,null],[11,"drop","","",82,null],[11,"clone","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",81,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"clone","collections::linked_list","",86,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",88,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",88,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",89,null],[11,"iter","","Provides a forward iterator.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",89,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",89,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",89,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",89,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",89,null],[11,"next","","",86,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",90,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",90,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",89,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",89,null],[11,"extend","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",89,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",89,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",89,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"drop","std::dynamic_lib","",91,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",91,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",91,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",91,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",91,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",91,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",91,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",92,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next","","",93,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",94,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",94,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",94,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",95,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"fmt","","",96,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",96,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"len","","",97,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",98,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"len","","",98,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",99,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",99,null],[11,"cmp","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",100,null],[11,"fmt","","",101,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",99,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",99,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Retakes ownership of a CString that was transferred to C.",99,null],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",99,null],[11,"into_ptr","","Transfers ownership of the string to a C caller.",99,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",99,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",99,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",99,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",100,null],[11,"as_ptr","","Returns the inner pointer to this C string.",100,null],[11,"to_bytes","","Converts this C string to a byte slice.",100,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",100,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",100,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",100,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",99,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",99,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",99,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",101,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",101,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",101,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",101,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",102,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std::ffi::c_str","",100,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",100,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",100,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"clone","std::ffi::os_str","",103,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",103,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",103,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",103,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",103,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",103,null],[11,"from","","",103,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",103,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",103,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",104,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",104,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",104,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",104,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",104,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",104,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",103,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",103,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",103,null],[11,"eq","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",104,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",103,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",104,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",104,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",103,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",105,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",106,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",107,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",109,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",109,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",109,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",109,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",109,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",109,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",109,null],[11,"read_to_end","","",109,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",109,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",106,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",106,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",106,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",106,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",106,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",106,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",106,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",110,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",110,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",110,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",110,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",107,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",107,null],[11,"is_dir","","Test whether this file type represents a directory.",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",111,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",112,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",112,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",112,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",112,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",113,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",114,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",114,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",114,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",114,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",114,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",114,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",114,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",114,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",115,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",115,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",115,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",116,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",116,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",116,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",116,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",116,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",116,null],[11,"fill_buf","","",116,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",116,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",118,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",118,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",118,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",118,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",118,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",118,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",118,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",117,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",117,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",102,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",117,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",117,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",119,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",119,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",119,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",119,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",119,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",120,null],[11,"fmt","std::io::cursor","",121,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",121,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",121,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",121,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",121,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",121,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",121,null],[11,"seek","","",121,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",121,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",121,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",121,null],[11,"read","","",121,null],[11,"read","","",121,null],[11,"fill_buf","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",121,null],[11,"fill_buf","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",121,null],[11,"fill_buf","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",121,null],[11,"write","","",121,null],[11,"flush","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",121,null],[11,"flush","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",102,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",123,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",102,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",102,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",102,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",102,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",102,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",102,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",102,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",102,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",124,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",102,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",102,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",23,null],[11,"read_to_end","","",23,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",23,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",23,null],[11,"write_fmt","","",23,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",23,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",23,null],[11,"read_until","","",23,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",23,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",125,null],[11,"write_all","","",125,null],[11,"flush","","",125,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",126,null],[11,"get","","",126,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",127,null],[11,"fill_buf","","",127,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",127,null],[11,"read","","",128,null],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",130,null],[11,"write","","",131,null],[11,"flush","","",131,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",132,null],[11,"flush","","",132,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",133,null],[11,"flush","","",133,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",133,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",134,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",134,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",134,null],[11,"read_to_end","","",134,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",134,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",134,null],[11,"read","","",135,null],[11,"read_to_end","","",135,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",135,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",135,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",136,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",136,null],[11,"flush","","",136,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",136,null],[11,"write_fmt","","",136,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",137,null],[11,"flush","","",137,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",138,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",138,null],[11,"flush","","",138,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",138,null],[11,"write_fmt","","",138,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",139,null],[11,"flush","","",139,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",140,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",140,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",141,null],[11,"flush","","",141,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",142,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",143,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",143,null],[11,"fill_buf","","",143,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",143,null],[11,"read","","",144,null],[11,"next","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",146,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",146,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",146,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",146,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",149,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"fmt","","",150,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",151,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"clone","","",151,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",151,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",152,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",152,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",150,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",152,null],[11,"partial_cmp","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",153,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",153,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",153,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",153,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"partial_cmp","","",153,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",153,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",154,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"eq","","",154,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",154,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",154,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",154,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",155,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",155,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",155,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",156,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",156,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",156,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",156,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",156,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",154,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",156,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",155,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"hash","","",156,null],[11,"to_socket_addrs","","",154,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",155,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",156,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",157,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",157,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",157,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",157,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",157,null],[11,"read_to_end","","",157,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",158,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",158,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",158,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",158,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",158,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",159,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",158,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",160,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",160,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",160,null],[11,"local_addr","","Returns the socket address that this socket was created from.",160,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",160,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",160,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",160,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",160,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",160,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",150,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",152,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",153,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",154,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",161,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",161,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",161,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",162,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",163,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"as_raw_fd","std::fs","",109,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",109,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",109,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",158,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",160,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",157,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",158,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",160,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",157,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",158,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",160,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",103,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",103,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",104,null],[11,"as_bytes","","",104,null],[11,"mode","std::fs","",107,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",107,null],[11,"from_mode","","",107,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",106,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",108,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",112,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",115,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",164,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",164,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",164,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",165,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",166,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",167,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",168,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",169,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",167,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",168,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",169,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"eq","std::path","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",170,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",170,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",171,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",172,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"clone","","",172,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",172,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",172,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",172,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",172,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",172,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",173,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"cmp","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",173,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",173,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",174,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",175,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",174,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",174,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",174,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",174,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",175,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",175,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",175,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",175,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",175,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",174,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",174,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",174,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",174,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",174,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",176,null],[11,"clone","","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",176,null],[11,"pop","","Truncate `self` to `self.parent()`.",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",176,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",176,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",176,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",176,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",176,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",176,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",176,null],[11,"fmt","","",176,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",114,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",114,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",114,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",114,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",114,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",114,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",114,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",114,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",114,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",114,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",114,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",114,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",114,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",114,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",114,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",114,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",114,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",114,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",114,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",114,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",114,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",114,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"deref","","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",114,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",176,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",176,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",176,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",114,null],[11,"as_ref","","",114,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",114,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",114,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",114,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",104,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",103,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",105,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",176,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",167,null],[11,"flush","","",167,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",168,null],[11,"read","","",169,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",164,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",164,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",164,null],[11,"env","","Inserts or updates an environment variable mapping.",164,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",164,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",164,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",164,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",164,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",164,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",164,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",164,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",164,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",164,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",164,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",178,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",166,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",166,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",166,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",165,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",165,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",165,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",165,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",165,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",179,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",179,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",179,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",179,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",180,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",180,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",180,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",180,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",181,null],[11,"new","std::sync::mpsc::oneshot","",182,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",182,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",182,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",182,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",182,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",182,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",182,null],[11,"drop_port","","",182,null],[11,"can_recv","","",182,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",182,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",182,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",182,null],[11,"eq","std::sync::mpsc::select","",183,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",184,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",184,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",184,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",185,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",185,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",185,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",185,null],[11,"drop","","",184,null],[11,"drop","","",185,null],[11,"next","","",186,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",187,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",187,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",187,null],[11,"send","","",187,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",187,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",187,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",187,null],[11,"drop_chan","","",187,null],[11,"drop_port","","",187,null],[11,"can_recv","","",187,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",187,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",187,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",187,null],[11,"new","std::sync::mpsc::stream","",188,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",188,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",188,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",188,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",188,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",188,null],[11,"drop_port","","",188,null],[11,"can_recv","","",188,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",188,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",188,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",188,null],[11,"fmt","std::sync::mpsc::sync","",189,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",190,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",190,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",190,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",190,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",190,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",190,null],[11,"drop_chan","","",190,null],[11,"drop_port","","",190,null],[11,"can_recv","","",190,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",190,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",190,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",190,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",191,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",191,null],[11,"pop","","Pops some data from this queue.",191,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",191,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",192,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",192,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",192,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",192,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",192,null],[11,"clone","std::sync::mpsc","",193,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",193,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",194,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",194,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",195,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",195,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",195,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",196,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",197,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",197,null],[11,"send","","Sends a value on this synchronous channel.",198,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",198,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",198,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",199,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",199,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",199,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",200,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",201,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",199,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",199,null],[11,"fmt","","",193,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",193,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",193,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",196,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",196,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",196,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",194,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",194,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",194,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",195,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",195,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",195,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",202,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",202,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",203,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",204,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",204,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",204,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",204,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",205,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",205,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",205,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",205,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",205,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",205,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",205,null],[11,"drop","","",205,null],[11,"new","","Creates a new condition variable",206,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",206,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",206,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",206,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",206,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",206,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",206,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",206,null],[11,"drop","std::sync::mutex","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",207,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",207,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",207,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",207,null],[11,"deref","","",208,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",208,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",208,null],[11,"new","std::sync::once","Creates a new `Once` value.",209,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",209,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",210,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",210,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",210,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",210,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",210,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",210,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"drop","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",211,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",211,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",211,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",211,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",211,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",211,null],[11,"deref","","",212,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",213,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",213,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",212,null],[11,"drop","","",213,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",214,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",214,null],[11,"release","","Release a resource from this semaphore.",214,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",214,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",215,null],[11,"default","core::sync::atomic","",216,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",217,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",218,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",219,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",220,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",216,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",216,null],[11,"swap","","Stores a value into the bool, returning the old value.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",216,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",217,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",217,null],[11,"swap","","Stores a value into the isize, returning the old value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",217,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",218,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",218,null],[11,"swap","","Stores a value into the usize, returning the old value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",218,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",219,null],[11,"load","","Loads a value from the pointer.",219,null],[11,"store","","Stores a value into the pointer.",219,null],[11,"swap","","Stores a value into the pointer, returning the old value.",219,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",219,null],[11,"fmt","","",218,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::time::duration","",221,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",221,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Crates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",221,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",221,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",221,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",221,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",221,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",221,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",221,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",221,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",221,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",222,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",222,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",222,null],[11,"wait","","Waits for a signal on the specified mutex.",222,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",222,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",222,null],[11,"clone","std::sys_common::dwarf::eh","",223,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",224,null],[11,"read","","",224,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",224,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",224,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",225,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",226,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",227,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",227,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",227,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",227,null],[11,"destroy","","Deallocates all resources associated with this mutex.",227,null],[11,"next","std::sys_common::net","",228,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",228,null],[11,"connect","","",229,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",229,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",229,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",229,null],[11,"write","","",229,null],[11,"peer_addr","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",229,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",229,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",230,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",230,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",230,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",230,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",230,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",230,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",231,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",231,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",231,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",231,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",231,null],[11,"send_to","","",231,null],[11,"duplicate","","",231,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",231,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",231,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",231,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",231,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",232,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",232,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",232,null],[11,"get","","",232,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",233,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",233,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",233,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",233,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",233,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",233,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",233,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",234,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",234,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",234,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",234,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",235,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",235,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",235,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",235,null],[11,"fmt","","",235,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",236,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",236,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",237,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",237,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",237,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",237,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",237,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",237,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",237,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",237,null],[11,"new","std::sys_common::thread_local","",238,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",238,null],[11,"set","","Sets this TLS key to a new value.",238,null],[11,"destroy","","Deallocates this OS TLS key.",238,null],[11,"new","","Creates a new managed OS TLS key.",239,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",239,null],[11,"set","","See StaticKey::set",239,null],[11,"drop","","",239,null],[11,"clone","std::sys_common::wtf8","",240,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",240,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",240,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",240,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",240,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",240,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",240,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",240,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",242,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",242,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an new, empty WTF-8 string.",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",241,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",241,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",241,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",241,null],[11,"as_slice","","",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",241,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",241,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",241,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",241,null],[11,"push","","Append a code point at the end of the string.",241,null],[11,"truncate","","Shortens a string to the specified length.",241,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",241,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",241,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",241,null],[11,"partial_cmp","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",242,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",242,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",242,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",242,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",242,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",243,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",243,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"clone","","",244,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",244,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"hash","","",240,null],[11,"hash","","",241,null],[11,"hash","","",242,null],[11,"is_ascii","","",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",242,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",242,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",242,null],[11,"make_ascii_lowercase","","",242,null],[11,"new","std::sys::condvar","",245,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",245,null],[11,"notify_all","","",245,null],[11,"wait","","",245,null],[11,"wait_timeout","","",245,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",245,null],[11,"new","std::sys::fd","",246,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",246,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",246,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",246,null],[11,"write","","",246,null],[11,"set_cloexec","","",246,null],[11,"drop","","",246,null],[11,"clone","std::sys::fs","",247,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",248,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",248,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",248,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",248,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",249,null],[11,"eq","","",249,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",249,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",250,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",250,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",250,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",110,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",248,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",248,null],[11,"mode","","",248,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",249,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",249,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",249,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",249,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",251,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",252,null],[11,"path","","",253,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",253,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",253,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",253,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",253,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",247,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",247,null],[11,"write","","",247,null],[11,"append","","",247,null],[11,"truncate","","",247,null],[11,"create","","",247,null],[11,"mode","","",247,null],[11,"open","","",254,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",254,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",254,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",254,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",254,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",254,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",254,null],[11,"write","","",254,null],[11,"flush","","",254,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",254,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",254,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",254,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",255,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",255,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",255,null],[11,"fmt","","",254,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",256,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",256,null],[11,"unlock","","",256,null],[11,"try_lock","","",256,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",256,null],[11,"uninitialized","","",257,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",257,null],[11,"lock","","",257,null],[11,"try_lock","","",257,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",257,null],[11,"destroy","","",257,null],[11,"new","std::sys::net","",258,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",258,null],[11,"duplicate","","",258,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",258,null],[11,"set_timeout","","",258,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",258,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"next","std::sys::os","",259,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"fmt","","",260,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",260,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",261,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"len","","",261,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",262,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"hash","std::sys::os_str","",263,null],[11,"clone","","",263,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",264,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",263,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",263,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",263,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",263,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",263,null],[11,"from_str","","",264,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",264,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",264,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",264,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",265,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",265,null],[11,"write","","",265,null],[11,"raw","","",265,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",265,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",265,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",266,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",266,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",266,null],[11,"args","","",266,null],[11,"env","","",266,null],[11,"env_remove","","",266,null],[11,"env_clear","","",266,null],[11,"cwd","","",266,null],[11,"fmt","","",267,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",267,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",267,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",267,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",267,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",268,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",268,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",268,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",268,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",268,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",269,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",269,null],[11,"try_read","","",269,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",269,null],[11,"try_write","","",269,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",269,null],[11,"write_unlock","","",269,null],[11,"destroy","","",269,null],[11,"new","std::sys::stack_overflow","",270,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",270,null],[11,"new","std::sys::thread","",271,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",271,null],[11,"set_name","","",271,null],[11,"sleep","","",271,null],[11,"join","","",271,null],[11,"drop","","",271,null],[11,"now","std::sys::time::inner","",272,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"new","std::sys::stdio","",273,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",273,null],[11,"new","","",274,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",274,null],[11,"new","","",275,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",275,null],[11,"write","","",275,null],[11,"flush","","",275,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",276,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",276,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",276,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",276,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",277,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",277,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",277,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",277,null],[11,"clone","std::rand","",278,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",278,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",278,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",278,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",278,null],[11,"from_seed","","",278,null],[11,"reseed","","",279,null],[11,"clone","","",280,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",280,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",280,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",280,null],[11,"clone","core::iter","",281,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",281,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",281,null],[11,"next_back","","",281,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",282,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",282,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"next_back","","",282,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",283,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",283,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"clone","","",284,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",285,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",284,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",284,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",284,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",284,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",284,null],[11,"next_back","","",284,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",286,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",286,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next_back","","",286,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",287,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",287,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"next_back","","",287,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",288,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",288,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"next_back","","",288,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",289,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",289,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"next_back","","",289,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",290,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",290,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",290,null],[11,"nth","","",290,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",290,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",290,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",291,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",291,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",291,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",291,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",291,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",291,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",291,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",292,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",292,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"clone","","",293,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",293,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"clone","","",294,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",294,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",294,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",294,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",294,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"clone","","",295,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",295,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",295,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[11,"clone","","",296,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",296,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"clone","","",297,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",297,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",297,null],[11,"next_back","","",297,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",298,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",298,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",298,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",298,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",298,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",298,null],[11,"next_back","","",298,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",299,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",299,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",299,null],[11,"next_back","","",299,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",300,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",301,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",302,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",300,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",300,null],[11,"clone","","",303,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",303,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",303,null],[11,"next_back","","",303,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",300,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",300,null],[11,"next","core::ops","",302,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",302,null],[11,"next_back","","",302,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",301,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",304,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",304,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",304,null],[11,"next_back","","",304,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",305,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",305,null],[11,"next_back","","",305,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",305,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",305,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",305,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",306,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",306,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",306,null],[11,"next_back","","",306,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",306,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::result","",307,null],[11,"fmt","","",307,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",307,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",307,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",307,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",307,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",307,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",307,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",307,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",307,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",307,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",307,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",307,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",307,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",307,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",307,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",307,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",307,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",307,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",307,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",307,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",307,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",307,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",307,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",308,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",308,null],[11,"next_back","","",308,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",308,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",309,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"next_back","","",309,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",310,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",310,null],[11,"next_back","","",310,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",307,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"cmp","collections::string","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",105,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",105,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",105,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",105,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",105,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",105,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",105,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",105,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",105,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",105,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",105,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",105,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",105,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",105,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",105,null],[11,"push","","Adds the given character to the end of the string.",105,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",105,null],[11,"truncate","","Shortens a string to the specified length.",105,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",105,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",105,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",105,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",105,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",105,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",105,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",105,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",105,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",105,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",105,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",28,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",28,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",105,null],[11,"from_iter","","",105,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",105,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",105,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",105,null],[11,"extend","","",105,null],[11,"extend","","",105,null],[11,"extend","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",311,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",311,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",105,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",311,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",105,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",105,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"add","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",105,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",105,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",105,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",105,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",105,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",105,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",105,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",105,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",105,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",105,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",312,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",312,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",312,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",105,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",105,null],[11,"from","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",311,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",311,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",105,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",105,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",105,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",105,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",313,null],[11,"next","","",313,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",313,null],[11,"next_back","","",313,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","core::ops","",314,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",314,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",314,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",302,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",302,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",302,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",301,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",301,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",301,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",315,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",315,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",315,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",316,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",317,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",318,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",319,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",319,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",319,null],[11,"fmt","core::simd","",320,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",320,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",321,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",321,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",322,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",322,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",323,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",323,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",324,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",324,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",325,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",325,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",326,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",326,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",327,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",327,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",328,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",328,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",329,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",329,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",328,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",329,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",328,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",329,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",328,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",329,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",328,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",329,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",324,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",325,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",326,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",327,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",320,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",321,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",322,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",323,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"clone","core::fmt::rt::v1","",330,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",331,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",332,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",332,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",333,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",334,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::str","",335,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",335,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"borrow","collections::string","",105,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",336,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",336,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",336,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",337,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",338,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",337,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",337,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",337,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",339,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",340,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",341,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",342,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",342,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",343,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",343,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",344,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",344,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",342,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",342,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",342,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",342,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",342,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",345,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",345,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",346,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",346,null],[11,"matching","","",346,null],[11,"use_early_reject","","",347,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",347,null],[11,"matching","","",347,null],[11,"borrow","collections::vec","",125,null],[11,"borrow_mut","","",125,null],[11,"hash","core::marker","",348,null],[11,"eq","","",348,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",348,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",348,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",348,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",349,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",349,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",349,null],[11,"finish","","",349,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",349,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",349,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"hash","core::option","",350,null],[11,"fmt","","",350,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",350,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",350,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",350,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",350,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",350,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",350,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",350,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",350,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",350,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",350,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",350,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",350,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",350,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",350,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",350,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",350,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",350,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",350,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",350,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",350,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",350,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",350,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",350,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",350,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",350,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",350,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",351,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",351,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next_back","","",351,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",352,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",352,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",353,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next_back","","",353,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",354,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",354,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"next_back","","",354,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",350,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",355,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",356,null],[11,"make_place","","",356,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",356,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",23,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",355,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",356,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",23,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",23,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",23,null],[11,"default","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",23,null],[11,"clone","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",23,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",23,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",23,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",23,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",23,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",311,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",311,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",311,null],[11,"into_owned","","Extracts the owned data.",311,null],[11,"deref","","",311,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",311,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",311,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",311,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",311,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",311,null],[11,"into_cow","","",311,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",311,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::raw","",357,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",358,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"fmt","core::cmp","",359,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",359,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",360,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",360,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",360,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",360,null],[11,"clone","","Makes a clone of the `Rc<T>`.",360,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",360,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",360,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",360,null],[11,"fmt","","",360,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",360,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",360,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",361,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",361,null],[11,"clone","","Makes a clone of the `Weak<T>`.",361,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",361,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",360,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"fmt","openssl","",362,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",362,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",362,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",362,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",362,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",362,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",362,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",362,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",363,null],[11,"fmt","","",363,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",363,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",363,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",363,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",363,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::ptr","Creates a new `Unique`.",364,null],[11,"get","","Dereferences the content.",364,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",364,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",364,null],[11,"fmt","","",364,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",365,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",365,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",365,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",365,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",365,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",365,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",365,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",366,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",366,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",366,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",367,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",367,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",367,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",367,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",367,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",367,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",367,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",367,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",367,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",368,null],[11,"clone","","",368,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",369,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",369,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",369,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",369,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",370,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",370,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",371,null],[11,"deref","","",370,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",370,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",372,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",372,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",372,null],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",125,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",125,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",125,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",125,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",125,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",125,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",125,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",125,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",125,null],[11,"as_slice","","Extracts a slice containing the entire vector.",125,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",125,null],[11,"set_len","","Sets the length of a vector.",125,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",125,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",125,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",125,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",125,null],[11,"push","","Appends an element to the back of a collection.",125,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",125,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",125,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",125,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",125,null],[11,"len","","Returns the number of elements in the vector.",125,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",125,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",125,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",125,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",125,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",125,null],[11,"clone","","",125,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",125,null],[11,"hash","","",125,null],[11,"index","","",125,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",125,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"index_mut","","",125,null],[11,"deref","","",125,null],[11,"deref_mut","","",125,null],[11,"from_iter","","",125,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",125,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",125,null],[11,"extend","","",125,null],[11,"eq","","",125,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","collections::borrow","",311,null],[11,"ne","","",311,null],[11,"eq","","",311,null],[11,"ne","","",311,null],[11,"eq","","",311,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"partial_cmp","","",125,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",125,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",125,null],[11,"default","","",125,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",125,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",125,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",125,null],[11,"from","","",125,null],[11,"from","","",125,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",311,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",125,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",373,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"count","","",373,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",373,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",373,null],[11,"next","","",374,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",374,null],[11,"next_back","","",374,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",374,null],[11,"fmt","openssl::ssl","",375,{"inputs":[{"name":"sslcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",375,{"inputs":[{"name":"sslcontext"}],"output":null}],[11,"new","","Creates a new SSL context.",375,{"inputs":[{"name":"sslcontext"},{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"set_verify","","Configures the certificate verification method for new connections.",375,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"option"}],"output":null}],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also\ncarrying supplied data.",375,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"verifycallbackdata"},{"name":"t"}],"output":null}],[11,"set_verify_depth","","Sets verification depth",375,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","",375,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",375,{"inputs":[{"name":"sslcontext"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_certificate_file","","Specifies the file that contains certificate",375,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate","","Specifies the certificate",375,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"add_extra_chain_cert","","Adds a certificate to the certificate chain presented together with the\ncertificate specified using set_certificate()",375,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_private_key_file","","Specifies the file that contains private key",375,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_private_key","","Specifies the private key",375,{"inputs":[{"name":"sslcontext"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"check_private_key","","Check consistency of private key and certificate",375,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_cipher_list","","",375,{"inputs":[{"name":"sslcontext"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_options","","",375,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"get_options","","",375,{"inputs":[{"name":"sslcontext"}],"output":{"name":"sslcontextoptions"}}],[11,"clear_options","","",375,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"clone","","",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"sslstream"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"sslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Creates an SSL/TLS client operating over the provided stream.",376,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","Creates an SSL/TLS server operating over the provided stream.",376,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"connect_generic","","Creates an SSL/TLS client operating over the provided stream.",376,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept_generic","","Creates an SSL/TLS server operating over the provided stream.",376,{"inputs":[{"name":"sslstream"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_server","","# Deprecated",376,{"inputs":[{"name":"sslstream"},{"name":"sslcontext"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_server_from","","# Deprecated",376,{"inputs":[{"name":"sslstream"},{"name":"ssl"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_from","","# Deprecated",376,{"inputs":[{"name":"sslstream"},{"name":"ssl"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","# Deprecated",376,{"inputs":[{"name":"sslstream"},{"name":"sslcontext"},{"name":"s"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_peer_certificate","","Return the certificate of the peer",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_compression","","Get the compression currently in use.  The result will be\neither None, indicating no compression is in use, or a string\nwith the compression name.",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"pending","","pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any).",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"usize"}}],[11,"get_state_string","","",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"str"}}],[11,"get_state_string_long","","",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"str"}}],[11,"read","","",376,null],[11,"write","","",376,null],[11,"flush","","",376,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"maybesslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",16,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",16,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[0,"x509","openssl","",null,null],[3,"SslString","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509Generator","","Generator of private key/certificate pairs",null,null],[3,"X509","","A public key certificate",null,null],[3,"X509Name","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509Req","","A certificate signing request",null,null],[4,"X509FileType","","",null,null],[13,"PEM","","",377,null],[13,"ASN1","","",377,null],[13,"Default","","",377,null],[4,"X509ValidationError","","",null,null],[13,"X509UnableToGetIssuerCert","","",378,null],[13,"X509UnableToGetCrl","","",378,null],[13,"X509UnableToDecryptCertSignature","","",378,null],[13,"X509UnableToDecryptCrlSignature","","",378,null],[13,"X509UnableToDecodeIssuerPublicKey","","",378,null],[13,"X509CertSignatureFailure","","",378,null],[13,"X509CrlSignatureFailure","","",378,null],[13,"X509CertNotYetValid","","",378,null],[13,"X509CertHasExpired","","",378,null],[13,"X509CrlNotYetValid","","",378,null],[13,"X509CrlHasExpired","","",378,null],[13,"X509ErrorInCertNotBeforeField","","",378,null],[13,"X509ErrorInCertNotAfterField","","",378,null],[13,"X509ErrorInCrlLastUpdateField","","",378,null],[13,"X509ErrorInCrlNextUpdateField","","",378,null],[13,"X509OutOfMem","","",378,null],[13,"X509DepthZeroSelfSignedCert","","",378,null],[13,"X509SelfSignedCertInChain","","",378,null],[13,"X509UnableToGetIssuerCertLocally","","",378,null],[13,"X509UnableToVerifyLeafSignature","","",378,null],[13,"X509CertChainTooLong","","",378,null],[13,"X509CertRevoked","","",378,null],[13,"X509InvalidCA","","",378,null],[13,"X509PathLengthExceeded","","",378,null],[13,"X509InvalidPurpose","","",378,null],[13,"X509CertUntrusted","","",378,null],[13,"X509CertRejected","","",378,null],[13,"X509SubjectIssuerMismatch","","",378,null],[13,"X509AkidSkidMismatch","","",378,null],[13,"X509AkidIssuerSerialMismatch","","",378,null],[13,"X509KeyusageNoCertsign","","",378,null],[13,"X509UnableToGetCrlIssuer","","",378,null],[13,"X509UnhandledCriticalExtension","","",378,null],[13,"X509KeyusageNoCrlSign","","",378,null],[13,"X509UnhandledCriticalCrlExtension","","",378,null],[13,"X509InvalidNonCA","","",378,null],[13,"X509ProxyPathLengthExceeded","","",378,null],[13,"X509KeyusageNoDigitalSignature","","",378,null],[13,"X509ProxyCertificatesNotAllowed","","",378,null],[13,"X509InvalidExtension","","",378,null],[13,"X509InavlidPolicyExtension","","",378,null],[13,"X509NoExplicitPolicy","","",378,null],[13,"X509DifferentCrlScope","","",378,null],[13,"X509UnsupportedExtensionFeature","","",378,null],[13,"X509UnnestedResource","","",378,null],[13,"X509PermittedVolation","","",378,null],[13,"X509ExcludedViolation","","",378,null],[13,"X509SubtreeMinmax","","",378,null],[13,"X509UnsupportedConstraintType","","",378,null],[13,"X509UnsupportedConstraintSyntax","","",378,null],[13,"X509UnsupportedNameSyntax","","",378,null],[13,"X509CrlPathValidationError","","",378,null],[13,"X509ApplicationVerification","","",378,null],[13,"X509UnknownError","","",378,null],[0,"extension","","",null,null],[4,"ExtensionType","openssl::x509::extension","Type-only version of the `Extension` enum.",null,null],[13,"KeyUsage","","",379,null],[13,"ExtKeyUsage","","",379,null],[13,"SubjectAltName","","",379,null],[13,"IssuerAltName","","",379,null],[13,"OtherNid","","",379,null],[13,"OtherStr","","",379,null],[4,"Extension","","A X.509 v3 certificate extension.",null,null],[13,"KeyUsage","","The purposes of the key contained in the certificate",380,null],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",380,null],[13,"SubjectAltName","","Subject Alternative Names",380,null],[13,"IssuerAltName","","Issuer Alternative Names",380,null],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",380,null],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",380,null],[4,"KeyUsageOption","","",null,null],[13,"DigitalSignature","","",381,null],[13,"NonRepudiation","","",381,null],[13,"KeyEncipherment","","",381,null],[13,"DataEncipherment","","",381,null],[13,"KeyAgreement","","",381,null],[13,"KeyCertSign","","",381,null],[13,"CRLSign","","",381,null],[13,"EncipherOnly","","",381,null],[13,"DecipherOnly","","",381,null],[4,"ExtKeyUsageOption","","",null,null],[13,"ServerAuth","","",382,null],[13,"ClientAuth","","",382,null],[13,"CodeSigning","","",382,null],[13,"EmailProtection","","",382,null],[13,"TimeStamping","","",382,null],[13,"MsCodeInd","","",382,null],[13,"MsCodeCom","","",382,null],[13,"MsCtlSign","","",382,null],[13,"MsSgc","","",382,null],[13,"MsEfs","","",382,null],[13,"NsSgc","","",382,null],[13,"Other","","An arbitrary key usage by OID.",382,null],[4,"AltNameOption","","",null,null],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",383,null],[13,"Email","","",383,null],[13,"DNS","","",383,null],[13,"Directory","","",383,null],[13,"URI","","",383,null],[13,"IPAddress","","",383,null],[13,"RegisteredID","","",383,null],[11,"eq","","",379,{"inputs":[{"name":"extensiontype"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"extensiontype"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"hash","","",379,null],[11,"clone","","",379,{"inputs":[{"name":"extensiontype"}],"output":{"name":"extensiontype"}}],[11,"clone","","",380,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"get_type","","",380,{"inputs":[{"name":"extension"}],"output":{"name":"extensiontype"}}],[11,"get_nid","","",379,{"inputs":[{"name":"extensiontype"}],"output":{"name":"option"}}],[11,"get_name","","",379,{"inputs":[{"name":"extensiontype"}],"output":{"name":"option"}}],[11,"to_string","","",380,{"inputs":[{"name":"extension"}],"output":{"name":"string"}}],[11,"clone","","",381,{"inputs":[{"name":"keyusageoption"}],"output":{"name":"keyusageoption"}}],[11,"fmt","","",381,{"inputs":[{"name":"keyusageoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",382,{"inputs":[{"name":"extkeyusageoption"}],"output":{"name":"extkeyusageoption"}}],[11,"fmt","","",382,{"inputs":[{"name":"extkeyusageoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",383,{"inputs":[{"name":"altnameoption"}],"output":{"name":"altnameoption"}}],[11,"fmt","","",383,{"inputs":[{"name":"altnameoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","openssl::x509","",384,{"inputs":[{"name":"sslstring"}],"output":null}],[11,"deref","","",384,{"inputs":[{"name":"sslstring"}],"output":{"name":"str"}}],[11,"fmt","","",384,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",377,{"inputs":[{"name":"x509filetype"}],"output":{"name":"x509filetype"}}],[11,"new","","",385,null],[11,"get_error","","",385,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"get_current_cert","","",385,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"new","","Creates a new generator with the following defaults:",386,{"inputs":[{"name":"x509generator"}],"output":{"name":"x509generator"}}],[11,"set_bitlength","","Sets desired bit length",386,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",386,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_CN","","(deprecated) Sets Common Name of certificate",386,{"inputs":[{"name":"x509generator"},{"name":"str"}],"output":{"name":"x509generator"}}],[11,"add_name","","Add attribute to the name of the certificate",386,{"inputs":[{"name":"x509generator"},{"name":"string"},{"name":"string"}],"output":{"name":"x509generator"}}],[11,"add_names","","Add multiple attributes to the name of the certificate",386,{"inputs":[{"name":"x509generator"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_usage","","(deprecated) Sets what for certificate could be used",386,null],[11,"set_ext_usage","","(deprecated) Sets allowed extended usage of certificate",386,null],[11,"add_extension","","Add an extension to a certificate",386,{"inputs":[{"name":"x509generator"},{"name":"extension"}],"output":{"name":"x509generator"}}],[11,"add_extensions","","Add multiple extensions to a certificate",386,{"inputs":[{"name":"x509generator"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_sign_hash","","",386,{"inputs":[{"name":"x509generator"},{"name":"type"}],"output":{"name":"x509generator"}}],[11,"generate","","Generates a private key and a self-signed certificate and returns them",386,{"inputs":[{"name":"x509generator"}],"output":{"name":"result"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it\nNote: That the bit-length of the private key is used (set_bitlength is ignored)",386,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",386,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"new","","Creates new from handle with desired ownership.",387,null],[11,"new_in_ctx","","Creates a new certificate from context. Doesn't take ownership\nof handle.",387,null],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",387,{"inputs":[{"name":"x509"},{"name":"r"}],"output":{"name":"result"}}],[11,"get_handle","","",387,null],[11,"subject_name","","",387,{"inputs":[{"name":"x509"}],"output":{"name":"x509name"}}],[11,"public_key","","",387,{"inputs":[{"name":"x509"}],"output":{"name":"pkey"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",387,{"inputs":[{"name":"x509"},{"name":"type"}],"output":{"name":"option"}}],[11,"write_pem","","Writes certificate as PEM",387,{"inputs":[{"name":"x509"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",387,{"inputs":[{"name":"x509"}],"output":null}],[11,"text_by_nid","","",388,{"inputs":[{"name":"x509name"},{"name":"nid"}],"output":{"name":"option"}}],[11,"new","","Creates new from handle",389,null],[11,"from_pem","","Reads CSR from PEM",389,{"inputs":[{"name":"x509req"},{"name":"r"}],"output":{"name":"result"}}],[11,"write_pem","","Writes CSR as PEM",389,{"inputs":[{"name":"x509req"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",389,{"inputs":[{"name":"x509req"}],"output":null}],[11,"clone","","",378,{"inputs":[{"name":"x509validationerror"}],"output":{"name":"x509validationerror"}}],[0,"nid","openssl","",null,null],[4,"Nid","openssl::nid","",null,null],[13,"Undefined","","",390,null],[13,"Rsadsi","","",390,null],[13,"Pkcs","","",390,null],[13,"MD2","","",390,null],[13,"MD4","","",390,null],[13,"MD5","","",390,null],[13,"RC4","","",390,null],[13,"RsaEncryption","","",390,null],[13,"RSA_MD2","","",390,null],[13,"RSA_MD5","","",390,null],[13,"PBE_MD2_DES","","",390,null],[13,"X500","","",390,null],[13,"x509","","",390,null],[13,"CN","","",390,null],[13,"C","","",390,null],[13,"L","","",390,null],[13,"ST","","",390,null],[13,"O","","",390,null],[13,"OU","","",390,null],[13,"RSA","","",390,null],[13,"Pkcs7","","",390,null],[13,"Pkcs7_data","","",390,null],[13,"Pkcs7_signedData","","",390,null],[13,"Pkcs7_envelopedData","","",390,null],[13,"Pkcs7_signedAndEnvelopedData","","",390,null],[13,"Pkcs7_digestData","","",390,null],[13,"Pkcs7_encryptedData","","",390,null],[13,"Pkcs3","","",390,null],[13,"DhKeyAgreement","","",390,null],[13,"DES_ECB","","",390,null],[13,"DES_CFB","","",390,null],[13,"DES_CBC","","",390,null],[13,"DES_EDE","","",390,null],[13,"DES_EDE3","","",390,null],[13,"IDEA_CBC","","",390,null],[13,"IDEA_CFB","","",390,null],[13,"IDEA_ECB","","",390,null],[13,"RC2_CBC","","",390,null],[13,"RC2_ECB","","",390,null],[13,"RC2_CFB","","",390,null],[13,"RC2_OFB","","",390,null],[13,"SHA","","",390,null],[13,"RSA_SHA","","",390,null],[13,"DES_EDE_CBC","","",390,null],[13,"DES_EDE3_CBC","","",390,null],[13,"DES_OFB","","",390,null],[13,"IDEA_OFB","","",390,null],[13,"Pkcs9","","",390,null],[13,"Email","","",390,null],[13,"UnstructuredName","","",390,null],[13,"ContentType","","",390,null],[13,"MessageDigest","","",390,null],[13,"SigningTime","","",390,null],[13,"CounterSignature","","",390,null],[13,"ChallengePassword","","",390,null],[13,"UnstructuredAddress","","",390,null],[13,"ExtendedCertificateAttributes","","",390,null],[13,"Netscape","","",390,null],[13,"NetscapeCertExtention","","",390,null],[13,"NetscapeDatatype","","",390,null],[13,"DES_EDE_CFB64","","",390,null],[13,"DES_EDE3_CFB64","","",390,null],[13,"DES_EDE_OFB64","","",390,null],[13,"DES_EDE3_OFB64","","",390,null],[13,"SHA1","","",390,null],[13,"RSA_SHA1","","",390,null],[13,"DSA_SHA","","",390,null],[13,"DSA_OLD","","",390,null],[13,"PBE_SHA1_RC2_64","","",390,null],[13,"PBKDF2","","",390,null],[13,"DSA_SHA1_OLD","","",390,null],[13,"NetscapeCertType","","",390,null],[13,"NetscapeBaseUrl","","",390,null],[13,"NetscapeRevocationUrl","","",390,null],[13,"NetscapeCARevocationUrl","","",390,null],[13,"NetscapeRenewalUrl","","",390,null],[13,"NetscapeCAPolicyUrl","","",390,null],[13,"NetscapeSSLServerName","","",390,null],[13,"NetscapeComment","","",390,null],[13,"NetscapeCertSequence","","",390,null],[13,"DESX_CBC","","",390,null],[13,"ID_CE","","",390,null],[13,"SubjectKeyIdentifier","","",390,null],[13,"KeyUsage","","",390,null],[13,"PrivateKeyUsagePeriod","","",390,null],[13,"SubjectAltName","","",390,null],[13,"IssuerAltName","","",390,null],[13,"BasicConstraints","","",390,null],[13,"CrlNumber","","",390,null],[13,"CertificatePolicies","","",390,null],[13,"AuthorityKeyIdentifier","","",390,null],[13,"BF_CBC","","",390,null],[13,"BF_ECB","","",390,null],[13,"BF_CFB","","",390,null],[13,"BF_OFB","","",390,null],[13,"MDC2","","",390,null],[13,"RSA_MDC2","","",390,null],[13,"RC4_40","","",390,null],[13,"RC2_40_CBC","","",390,null],[13,"G","","",390,null],[13,"S","","",390,null],[13,"I","","",390,null],[13,"UID","","",390,null],[13,"CrlDistributionPoints","","",390,null],[13,"RSA_NP_MD5","","",390,null],[13,"SN","","",390,null],[13,"T","","",390,null],[13,"D","","",390,null],[13,"CAST5_CBC","","",390,null],[13,"CAST5_ECB","","",390,null],[13,"CAST5_CFB","","",390,null],[13,"CAST5_OFB","","",390,null],[13,"PbeWithMD5AndCast5CBC","","",390,null],[13,"DSA_SHA1","","",390,null],[13,"MD5_SHA1","","",390,null],[13,"RSA_SHA1_2","","",390,null],[13,"DSA","","",390,null],[13,"RIPEMD160","","",390,null],[13,"RSA_RIPEMD160","","",390,null],[13,"RC5_CBC","","",390,null],[13,"RC5_ECB","","",390,null],[13,"RC5_CFB","","",390,null],[13,"RC5_OFB","","",390,null],[13,"RLE","","",390,null],[13,"ZLIB","","",390,null],[13,"ExtendedKeyUsage","","",390,null],[13,"PKIX","","",390,null],[13,"ID_KP","","",390,null],[13,"ServerAuth","","",390,null],[13,"ClientAuth","","",390,null],[13,"CodeSigning","","",390,null],[13,"EmailProtection","","",390,null],[13,"TimeStamping","","",390,null],[13,"MsCodeInd","","",390,null],[13,"MsCodeCom","","",390,null],[13,"MsCtlSigh","","",390,null],[13,"MsSGC","","",390,null],[13,"MsEFS","","",390,null],[13,"NsSGC","","",390,null],[13,"DeltaCRL","","",390,null],[13,"CRLReason","","",390,null],[13,"InvalidityDate","","",390,null],[13,"SXNetID","","",390,null],[13,"PBE_SHA1_RC4_128","","",390,null],[13,"PBE_SHA1_RC4_40","","",390,null],[13,"PBE_SHA1_3DES","","",390,null],[13,"PBE_SHA1_2DES","","",390,null],[13,"PBE_SHA1_RC2_128","","",390,null],[13,"PBE_SHA1_RC2_40","","",390,null],[13,"KeyBag","","",390,null],[13,"Pkcs8ShroudedKeyBag","","",390,null],[13,"CertBag","","",390,null],[13,"CrlBag","","",390,null],[13,"SecretBag","","",390,null],[13,"SafeContentsBag","","",390,null],[13,"FriendlyName","","",390,null],[13,"LocalKeyID","","",390,null],[13,"X509Certificate","","",390,null],[13,"SdsiCertificate","","",390,null],[13,"X509Crl","","",390,null],[13,"PBES2","","",390,null],[13,"PBMAC1","","",390,null],[13,"HmacWithSha1","","",390,null],[13,"ID_QT_CPS","","",390,null],[13,"ID_QT_UNOTICE","","",390,null],[13,"RC2_64_CBC","","",390,null],[13,"SMIMECaps","","",390,null],[11,"eq","","",390,{"inputs":[{"name":"nid"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"ne","","",390,{"inputs":[{"name":"nid"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"hash","","",390,null],[11,"clone","","",390,{"inputs":[{"name":"nid"}],"output":{"name":"nid"}}]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[3,"KeyIvPair"],[4,"Parts"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[4,"SslMethod"],[4,"MaybeSslStream"],[4,"SslError"],[4,"OpensslError"],[8,"IntoSsl"],[3,"SslContextOptions"],[3,"SslVerifyMode"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Vec"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"FileAttr"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Cow"],[3,"ParseError"],[3,"Drain"],[3,"RangeFull"],[3,"RangeTo"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"PhantomData"],[3,"SipHasher"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Slice"],[3,"TraitObject"],[4,"Ordering"],[3,"Rc"],[3,"Weak"],[8,"Any"],[3,"TypeId"],[3,"Unique"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"IntoIter"],[3,"Drain"],[3,"SslContext"],[3,"SslStream"],[4,"X509FileType"],[4,"X509ValidationError"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"SslString"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"],[3,"X509Name"],[3,"X509Req"],[4,"Nid"]]};
searchIndex['env_logger'] = {"items":[[0,"","env_logger","A logger configured via an environment variable.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}]],"paths":[]};
searchIndex['libgit2_sys'] = {"items":[[0,"","libgit2_sys","",null,null],[3,"git_revspec","","",null,null],[12,"from","","",0,null],[12,"to","","",0,null],[12,"flags","","",0,null],[3,"git_error","","",null,null],[12,"message","","",1,null],[12,"klass","","",1,null],[3,"git_oid","","",null,null],[12,"id","","",2,null],[3,"git_strarray","","",null,null],[12,"strings","","",3,null],[12,"count","","",3,null],[3,"git_oidarray","","",null,null],[12,"ids","","",4,null],[12,"count","","",4,null],[3,"git_signature","","",null,null],[12,"name","","",5,null],[12,"email","","",5,null],[12,"when","","",5,null],[3,"git_time","","",null,null],[12,"time","","",6,null],[12,"offset","","",6,null],[3,"git_clone_options","","",null,null],[12,"version","","",7,null],[12,"checkout_opts","","",7,null],[12,"fetch_opts","","",7,null],[12,"bare","","",7,null],[12,"local","","",7,null],[12,"checkout_branch","","",7,null],[12,"repository_cb","","",7,null],[12,"repository_cb_payload","","",7,null],[12,"remote_cb","","",7,null],[12,"remote_cb_payload","","",7,null],[3,"git_checkout_options","","",null,null],[12,"version","","",8,null],[12,"checkout_strategy","","",8,null],[12,"disable_filters","","",8,null],[12,"dir_mode","","",8,null],[12,"file_mode","","",8,null],[12,"file_open_flags","","",8,null],[12,"notify_flags","","",8,null],[12,"notify_cb","","",8,null],[12,"notify_payload","","",8,null],[12,"progress_cb","","",8,null],[12,"progress_payload","","",8,null],[12,"paths","","",8,null],[12,"baseline","","",8,null],[12,"baseline_index","","",8,null],[12,"target_directory","","",8,null],[12,"ancestor_label","","",8,null],[12,"our_label","","",8,null],[12,"their_label","","",8,null],[12,"perfdata_cb","","",8,null],[12,"perfdata_payload","","",8,null],[3,"git_checkout_perfdata","","",null,null],[12,"mkdir_calls","","",9,null],[12,"stat_calls","","",9,null],[12,"chmod_calls","","",9,null],[3,"git_remote_callbacks","","",null,null],[12,"version","","",10,null],[12,"sideband_progress","","",10,null],[12,"completion","","",10,null],[12,"credentials","","",10,null],[12,"certificate_check","","",10,null],[12,"transfer_progress","","",10,null],[12,"update_tips","","",10,null],[12,"pack_progress","","",10,null],[12,"push_transfer_progress","","",10,null],[12,"push_update_reference","","",10,null],[12,"push_negotiation","","",10,null],[12,"transport","","",10,null],[12,"payload","","",10,null],[3,"git_fetch_options","","",null,null],[12,"version","","",11,null],[12,"callbacks","","",11,null],[12,"prune","","",11,null],[12,"update_fetchhead","","",11,null],[12,"download_tags","","",11,null],[3,"git_push_update","","",null,null],[12,"src_refname","","",12,null],[12,"dst_refname","","",12,null],[12,"src","","",12,null],[12,"dst","","",12,null],[3,"git_cert","","",null,null],[12,"cert_type","","",13,null],[3,"git_cert_hostkey","","",null,null],[12,"parent","","",14,null],[12,"kind","","",14,null],[12,"hash_md5","","",14,null],[12,"hash_sha1","","",14,null],[3,"git_cert_x509","","",null,null],[12,"parent","","",15,null],[12,"data","","",15,null],[12,"len","","",15,null],[3,"git_transfer_progress","","",null,null],[12,"total_objects","","",16,null],[12,"indexed_objects","","",16,null],[12,"received_objects","","",16,null],[12,"local_objects","","",16,null],[12,"total_deltas","","",16,null],[12,"indexed_deltas","","",16,null],[12,"received_bytes","","",16,null],[3,"git_diff_file","","",null,null],[12,"id","","",17,null],[12,"path","","",17,null],[12,"size","","",17,null],[12,"flags","","",17,null],[12,"mode","","",17,null],[3,"git_status_options","","",null,null],[12,"version","","",18,null],[12,"show","","",18,null],[12,"flags","","",18,null],[12,"pathspec","","",18,null],[3,"git_diff_delta","","",null,null],[12,"status","","",19,null],[12,"flags","","",19,null],[12,"similarity","","",19,null],[12,"nfiles","","",19,null],[12,"old_file","","",19,null],[12,"new_file","","",19,null],[3,"git_status_entry","","",null,null],[12,"status","","",20,null],[12,"head_to_index","","",20,null],[12,"index_to_workdir","","",20,null],[3,"git_buf","","",null,null],[12,"ptr","","",21,null],[12,"asize","","",21,null],[12,"size","","",21,null],[3,"git_blame_options","","",null,null],[12,"version","","",22,null],[12,"flags","","",22,null],[12,"min_match_characters","","",22,null],[12,"newest_commit","","",22,null],[12,"oldest_commit","","",22,null],[12,"min_line","","",22,null],[12,"max_line","","",22,null],[3,"git_blame_hunk","","",null,null],[12,"lines_in_hunk","","",23,null],[12,"final_commit_id","","",23,null],[12,"final_start_line_number","","",23,null],[12,"final_signature","","",23,null],[12,"orig_commit_id","","",23,null],[12,"orig_path","","",23,null],[12,"orig_start_line_number","","",23,null],[12,"orig_signature","","",23,null],[12,"boundary","","",23,null],[3,"git_index_entry","","",null,null],[12,"ctime","","",24,null],[12,"mtime","","",24,null],[12,"dev","","",24,null],[12,"ino","","",24,null],[12,"mode","","",24,null],[12,"uid","","",24,null],[12,"gid","","",24,null],[12,"file_size","","",24,null],[12,"id","","",24,null],[12,"flags","","",24,null],[12,"flags_extended","","",24,null],[12,"path","","",24,null],[3,"git_index_time","","",null,null],[12,"seconds","","",25,null],[12,"nanoseconds","","",25,null],[3,"git_config_entry","","",null,null],[12,"name","","",26,null],[12,"value","","",26,null],[12,"level","","",26,null],[12,"free","","",26,null],[12,"payload","","",26,null],[3,"git_cred","","",null,null],[12,"credtype","","",27,null],[12,"free","","",27,null],[3,"git_push_options","","",null,null],[12,"version","","",28,null],[12,"pb_parallelism","","",28,null],[12,"callbacks","","",28,null],[3,"git_repository_init_options","","",null,null],[12,"version","","",29,null],[12,"flags","","",29,null],[12,"mode","","",29,null],[12,"workdir_path","","",29,null],[12,"description","","",29,null],[12,"template_path","","",29,null],[12,"initial_head","","",29,null],[12,"origin_url","","",29,null],[3,"git_remote_head","","",null,null],[12,"local","","",30,null],[12,"oid","","",30,null],[12,"loid","","",30,null],[12,"name","","",30,null],[12,"symref_target","","",30,null],[3,"git_diff_hunk","","",null,null],[12,"old_start","","",31,null],[12,"old_lines","","",31,null],[12,"new_start","","",31,null],[12,"new_lines","","",31,null],[12,"header_len","","",31,null],[12,"header","","",31,null],[3,"git_diff_line","","",null,null],[12,"origin","","",32,null],[12,"old_lineno","","",32,null],[12,"new_lineno","","",32,null],[12,"num_lines","","",32,null],[12,"content_len","","",32,null],[12,"content_offset","","",32,null],[12,"content","","",32,null],[3,"git_diff_options","","",null,null],[12,"version","","",33,null],[12,"flags","","",33,null],[12,"ignore_submodules","","",33,null],[12,"pathspec","","",33,null],[12,"notify_cb","","",33,null],[12,"notify_payload","","",33,null],[12,"context_lines","","",33,null],[12,"interhunk_lines","","",33,null],[12,"id_abbrev","","",33,null],[12,"max_size","","",33,null],[12,"old_prefix","","",33,null],[12,"new_prefix","","",33,null],[3,"git_diff_find_options","","",null,null],[12,"version","","",34,null],[12,"flags","","",34,null],[12,"rename_threshold","","",34,null],[12,"rename_from_rewrite_threshold","","",34,null],[12,"copy_threshold","","",34,null],[12,"break_rewrite_threshold","","",34,null],[12,"rename_limit","","",34,null],[12,"metric","","",34,null],[3,"git_diff_similarity_metric","","",null,null],[12,"file_signature","","",35,null],[12,"buffer_signature","","",35,null],[12,"free_signature","","",35,null],[12,"similarity","","",35,null],[12,"payload","","",35,null],[3,"git_diff_binary","","",null,null],[12,"old_file","","",36,null],[12,"new_file","","",36,null],[3,"git_diff_binary_file","","",null,null],[12,"kind","","",37,null],[12,"data","","",37,null],[12,"datalen","","",37,null],[12,"inflatedlen","","",37,null],[3,"git_merge_options","","",null,null],[12,"version","","",38,null],[12,"tree_flags","","",38,null],[12,"rename_threshold","","",38,null],[12,"target_limit","","",38,null],[12,"metric","","",38,null],[12,"file_favor","","",38,null],[12,"file_flags","","",38,null],[3,"git_transport","","",null,null],[12,"version","","",39,null],[12,"set_callbacks","","",39,null],[12,"connect","","",39,null],[12,"ls","","",39,null],[12,"push","","",39,null],[12,"negotiate_fetch","","",39,null],[12,"download_pack","","",39,null],[12,"is_connected","","",39,null],[12,"read_flags","","",39,null],[12,"cancel","","",39,null],[12,"close","","",39,null],[12,"free","","",39,null],[3,"git_smart_subtransport_stream","","",null,null],[12,"subtransport","","",40,null],[12,"read","","",40,null],[12,"write","","",40,null],[12,"free","","",40,null],[3,"git_smart_subtransport","","",null,null],[12,"action","","",41,null],[12,"close","","",41,null],[12,"free","","",41,null],[3,"git_smart_subtransport_definition","","",null,null],[12,"callback","","",42,null],[12,"rpc","","",42,null],[12,"param","","",42,null],[4,"git_blob","","",null,null],[4,"git_branch_iterator","","",null,null],[4,"git_blame","","",null,null],[4,"git_commit","","",null,null],[4,"git_config","","",null,null],[4,"git_config_iterator","","",null,null],[4,"git_index","","",null,null],[4,"git_object","","",null,null],[4,"git_reference","","",null,null],[4,"git_reference_iterator","","",null,null],[4,"git_annotated_commit","","",null,null],[4,"git_refspec","","",null,null],[4,"git_remote","","",null,null],[4,"git_repository","","",null,null],[4,"git_revwalk","","",null,null],[4,"git_submodule","","",null,null],[4,"git_tag","","",null,null],[4,"git_tree","","",null,null],[4,"git_tree_entry","","",null,null],[4,"git_push","","",null,null],[4,"git_note","","",null,null],[4,"git_note_iterator","","",null,null],[4,"git_status_list","","",null,null],[4,"git_pathspec","","",null,null],[4,"git_pathspec_match_list","","",null,null],[4,"git_diff","","",null,null],[4,"git_diff_stats","","",null,null],[4,"git_reflog","","",null,null],[4,"git_reflog_entry","","",null,null],[4,"git_error_code","","",null,null],[13,"GIT_OK","","",43,null],[13,"GIT_ERROR","","",43,null],[13,"GIT_ENOTFOUND","","",43,null],[13,"GIT_EEXISTS","","",43,null],[13,"GIT_EAMBIGUOUS","","",43,null],[13,"GIT_EBUFS","","",43,null],[13,"GIT_EUSER","","",43,null],[13,"GIT_EBAREREPO","","",43,null],[13,"GIT_EUNBORNBRANCH","","",43,null],[13,"GIT_EUNMERGED","","",43,null],[13,"GIT_ENONFASTFORWARD","","",43,null],[13,"GIT_EINVALIDSPEC","","",43,null],[13,"GIT_ECONFLICT","","",43,null],[13,"GIT_ELOCKED","","",43,null],[13,"GIT_EMODIFIED","","",43,null],[13,"GIT_EAUTH","","",43,null],[13,"GIT_ECERTIFICATE","","",43,null],[13,"GIT_EAPPLIED","","",43,null],[13,"GIT_EPEEL","","",43,null],[13,"GIT_EEOF","","",43,null],[13,"GIT_EINVALID","","",43,null],[13,"GIT_EUNCOMMITTED","","",43,null],[13,"GIT_EDIRECTORY","","",43,null],[13,"GIT_PASSTHROUGH","","",43,null],[13,"GIT_ITEROVER","","",43,null],[4,"git_error_t","","",null,null],[13,"GITERR_NONE","","",44,null],[13,"GITERR_NOMEMORY","","",44,null],[13,"GITERR_OS","","",44,null],[13,"GITERR_INVALID","","",44,null],[13,"GITERR_REFERENCE","","",44,null],[13,"GITERR_ZLIB","","",44,null],[13,"GITERR_REPOSITORY","","",44,null],[13,"GITERR_CONFIG","","",44,null],[13,"GITERR_REGEX","","",44,null],[13,"GITERR_ODB","","",44,null],[13,"GITERR_INDEX","","",44,null],[13,"GITERR_OBJECT","","",44,null],[13,"GITERR_NET","","",44,null],[13,"GITERR_TAG","","",44,null],[13,"GITERR_TREE","","",44,null],[13,"GITERR_INDEXER","","",44,null],[13,"GITERR_SSL","","",44,null],[13,"GITERR_SUBMODULE","","",44,null],[13,"GITERR_THREAD","","",44,null],[13,"GITERR_STASH","","",44,null],[13,"GITERR_CHECKOUT","","",44,null],[13,"GITERR_FETCHHEAD","","",44,null],[13,"GITERR_MERGE","","",44,null],[13,"GITERR_SSH","","",44,null],[13,"GITERR_FILTER","","",44,null],[13,"GITERR_REVERT","","",44,null],[13,"GITERR_CALLBACK","","",44,null],[13,"GITERR_CHERRYPICK","","",44,null],[13,"GITERR_DESCRIBE","","",44,null],[13,"GITERR_REBASE","","",44,null],[4,"git_repository_state_t","","",null,null],[13,"GIT_REPOSITORY_STATE_NONE","","",45,null],[13,"GIT_REPOSITORY_STATE_MERGE","","",45,null],[13,"GIT_REPOSITORY_STATE_REVERT","","",45,null],[13,"GIT_REPOSITORY_STATE_CHERRYPICK","","",45,null],[13,"GIT_REPOSITORY_STATE_BISECT","","",45,null],[13,"GIT_REPOSITORY_STATE_REBASE","","",45,null],[13,"GIT_REPOSITORY_STATE_REBASE_INTERACTIVE","","",45,null],[13,"GIT_REPOSITORY_STATE_REBASE_MERGE","","",45,null],[13,"GIT_REPOSITORY_STATE_APPLY_MAILBOX","","",45,null],[13,"GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE","","",45,null],[4,"git_direction","","",null,null],[13,"GIT_DIRECTION_FETCH","","",46,null],[13,"GIT_DIRECTION_PUSH","","",46,null],[4,"git_clone_local_t","","",null,null],[13,"GIT_CLONE_LOCAL_AUTO","","",47,null],[13,"GIT_CLONE_LOCAL","","",47,null],[13,"GIT_CLONE_NO_LOCAL","","",47,null],[13,"GIT_CLONE_LOCAL_NO_LINKS","","",47,null],[4,"git_remote_autotag_option_t","","",null,null],[13,"GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED","","",48,null],[13,"GIT_REMOTE_DOWNLOAD_TAGS_AUTO","","",48,null],[13,"GIT_REMOTE_DOWNLOAD_TAGS_NONE","","",48,null],[13,"GIT_REMOTE_DOWNLOAD_TAGS_ALL","","",48,null],[4,"git_fetch_prune_t","","",null,null],[13,"GIT_FETCH_PRUNE_UNSPECIFIED","","",49,null],[13,"GIT_FETCH_PRUNE","","",49,null],[13,"GIT_FETCH_NO_PRUNE","","",49,null],[4,"git_remote_completion_type","","",null,null],[13,"GIT_REMOTE_COMPLETION_DOWNLOAD","","",50,null],[13,"GIT_REMOTE_COMPLETION_INDEXING","","",50,null],[13,"GIT_REMOTE_COMPLETION_ERROR","","",50,null],[4,"git_cert_t","","",null,null],[13,"GIT_CERT_X509","","",51,null],[13,"GIT_CERT_HOSTKEY_LIBSSH2","","",51,null],[4,"git_cert_ssh_t","","",null,null],[13,"GIT_CERT_SSH_MD5","","",52,null],[13,"GIT_CERT_SSH_SHA1","","",52,null],[4,"git_checkout_notify_t","","",null,null],[13,"GIT_CHECKOUT_NOTIFY_NONE","","",53,null],[13,"GIT_CHECKOUT_NOTIFY_CONFLICT","","",53,null],[13,"GIT_CHECKOUT_NOTIFY_DIRTY","","",53,null],[13,"GIT_CHECKOUT_NOTIFY_UPDATED","","",53,null],[13,"GIT_CHECKOUT_NOTIFY_UNTRACKED","","",53,null],[13,"GIT_CHECKOUT_NOTIFY_IGNORED","","",53,null],[13,"GIT_CHECKOUT_NOTIFY_ALL","","",53,null],[4,"git_status_t","","",null,null],[13,"GIT_STATUS_CURRENT","","",54,null],[13,"GIT_STATUS_INDEX_NEW","","",54,null],[13,"GIT_STATUS_INDEX_MODIFIED","","",54,null],[13,"GIT_STATUS_INDEX_DELETED","","",54,null],[13,"GIT_STATUS_INDEX_RENAMED","","",54,null],[13,"GIT_STATUS_INDEX_TYPECHANGE","","",54,null],[13,"GIT_STATUS_WT_NEW","","",54,null],[13,"GIT_STATUS_WT_MODIFIED","","",54,null],[13,"GIT_STATUS_WT_DELETED","","",54,null],[13,"GIT_STATUS_WT_TYPECHANGE","","",54,null],[13,"GIT_STATUS_WT_RENAMED","","",54,null],[13,"GIT_STATUS_WT_UNREADABLE","","",54,null],[13,"GIT_STATUS_IGNORED","","",54,null],[13,"GIT_STATUS_CONFLICTED","","",54,null],[4,"git_status_opt_t","","",null,null],[13,"GIT_STATUS_OPT_INCLUDE_UNTRACKED","","",55,null],[13,"GIT_STATUS_OPT_INCLUDE_IGNORED","","",55,null],[13,"GIT_STATUS_OPT_INCLUDE_UNMODIFIED","","",55,null],[13,"GIT_STATUS_OPT_EXCLUDE_SUBMODULES","","",55,null],[13,"GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","","",55,null],[13,"GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","","",55,null],[13,"GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","","",55,null],[13,"GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","","",55,null],[13,"GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","","",55,null],[13,"GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","","",55,null],[13,"GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","","",55,null],[13,"GIT_STATUS_OPT_RENAMES_FROM_REWRITES","","",55,null],[13,"GIT_STATUS_OPT_NO_REFRESH","","",55,null],[13,"GIT_STATUS_OPT_UPDATE_INDEX","","",55,null],[13,"GIT_STATUS_OPT_INCLUDE_UNREADABLE","","",55,null],[13,"GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED","","",55,null],[4,"git_status_show_t","","",null,null],[13,"GIT_STATUS_SHOW_INDEX_AND_WORKDIR","","",56,null],[13,"GIT_STATUS_SHOW_INDEX_ONLY","","",56,null],[13,"GIT_STATUS_SHOW_WORKDIR_ONLY","","",56,null],[4,"git_delta_t","","",null,null],[13,"GIT_DELTA_UNMODIFIED","","",57,null],[13,"GIT_DELTA_ADDED","","",57,null],[13,"GIT_DELTA_DELETED","","",57,null],[13,"GIT_DELTA_MODIFIED","","",57,null],[13,"GIT_DELTA_RENAMED","","",57,null],[13,"GIT_DELTA_COPIED","","",57,null],[13,"GIT_DELTA_IGNORED","","",57,null],[13,"GIT_DELTA_UNTRACKED","","",57,null],[13,"GIT_DELTA_TYPECHANGE","","",57,null],[13,"GIT_DELTA_UNREADABLE","","",57,null],[13,"GIT_DELTA_CONFLICTED","","",57,null],[4,"git_checkout_strategy_t","","",null,null],[13,"GIT_CHECKOUT_NONE","","",58,null],[13,"GIT_CHECKOUT_SAFE","","",58,null],[13,"GIT_CHECKOUT_FORCE","","",58,null],[13,"GIT_CHECKOUT_ALLOW_CONFLICTS","","",58,null],[13,"GIT_CHECKOUT_REMOVE_UNTRACKED","","",58,null],[13,"GIT_CHECKOUT_REMOVE_IGNORED","","",58,null],[13,"GIT_CHECKOUT_UPDATE_ONLY","","",58,null],[13,"GIT_CHECKOUT_DONT_UPDATE_INDEX","","",58,null],[13,"GIT_CHECKOUT_NO_REFRESH","","",58,null],[13,"GIT_CHECKOUT_SKIP_UNMERGED","","",58,null],[13,"GIT_CHECKOUT_USE_OURS","","",58,null],[13,"GIT_CHECKOUT_USE_THEIRS","","",58,null],[13,"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","","",58,null],[13,"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","","",58,null],[13,"GIT_CHECKOUT_DONT_OVERWRITE_IGNORED","","",58,null],[13,"GIT_CHECKOUT_CONFLICT_STYLE_MERGE","","",58,null],[13,"GIT_CHECKOUT_CONFLICT_STYLE_DIFF3","","",58,null],[13,"GIT_CHECKOUT_UPDATE_SUBMODULES","","",58,null],[13,"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","","",58,null],[4,"git_reset_t","","",null,null],[13,"GIT_RESET_SOFT","","",59,null],[13,"GIT_RESET_MIXED","","",59,null],[13,"GIT_RESET_HARD","","",59,null],[4,"git_otype","","",null,null],[13,"GIT_OBJ_ANY","","",60,null],[13,"GIT_OBJ_BAD","","",60,null],[13,"GIT_OBJ__EXT1","","",60,null],[13,"GIT_OBJ_COMMIT","","",60,null],[13,"GIT_OBJ_TREE","","",60,null],[13,"GIT_OBJ_BLOB","","",60,null],[13,"GIT_OBJ_TAG","","",60,null],[13,"GIT_OBJ__EXT2","","",60,null],[13,"GIT_OBJ_OFS_DELTA","","",60,null],[13,"GIT_OBJ_REF_DELTA","","",60,null],[4,"git_ref_t","","",null,null],[13,"GIT_REF_INVALID","","",61,null],[13,"GIT_REF_OID","","",61,null],[13,"GIT_REF_SYMBOLIC","","",61,null],[13,"GIT_REF_LISTALL","","",61,null],[4,"git_filemode_t","","",null,null],[13,"GIT_FILEMODE_UNREADABLE","","",62,null],[13,"GIT_FILEMODE_TREE","","",62,null],[13,"GIT_FILEMODE_BLOB","","",62,null],[13,"GIT_FILEMODE_BLOB_EXECUTABLE","","",62,null],[13,"GIT_FILEMODE_LINK","","",62,null],[13,"GIT_FILEMODE_COMMIT","","",62,null],[4,"git_treewalk_mode","","",null,null],[13,"GIT_TREEWALK_PRE","","",63,null],[13,"GIT_TREEWALK_POST","","",63,null],[4,"git_branch_t","","",null,null],[13,"GIT_BRANCH_LOCAL","","",64,null],[13,"GIT_BRANCH_REMOTE","","",64,null],[13,"GIT_BRANCH_ALL","","",64,null],[4,"git_config_level_t","","",null,null],[13,"GIT_CONFIG_LEVEL_SYSTEM","","",65,null],[13,"GIT_CONFIG_LEVEL_XDG","","",65,null],[13,"GIT_CONFIG_LEVEL_GLOBAL","","",65,null],[13,"GIT_CONFIG_LEVEL_LOCAL","","",65,null],[13,"GIT_CONFIG_LEVEL_APP","","",65,null],[13,"GIT_CONFIG_HIGHEST_LEVEL","","",65,null],[4,"git_submodule_update_t","","",null,null],[13,"GIT_SUBMODULE_UPDATE_RESET","","",66,null],[13,"GIT_SUBMODULE_UPDATE_CHECKOUT","","",66,null],[13,"GIT_SUBMODULE_UPDATE_REBASE","","",66,null],[13,"GIT_SUBMODULE_UPDATE_MERGE","","",66,null],[13,"GIT_SUBMODULE_UPDATE_NONE","","",66,null],[13,"GIT_SUBMODULE_UPDATE_DEFAULT","","",66,null],[4,"git_submodule_ignore_t","","",null,null],[13,"GIT_SUBMODULE_IGNORE_UNSPECIFIED","","",67,null],[13,"GIT_SUBMODULE_IGNORE_NONE","","",67,null],[13,"GIT_SUBMODULE_IGNORE_UNTRACKED","","",67,null],[13,"GIT_SUBMODULE_IGNORE_DIRTY","","",67,null],[13,"GIT_SUBMODULE_IGNORE_ALL","","",67,null],[4,"git_credtype_t","","",null,null],[13,"GIT_CREDTYPE_USERPASS_PLAINTEXT","","",68,null],[13,"GIT_CREDTYPE_SSH_KEY","","",68,null],[13,"GIT_CREDTYPE_SSH_CUSTOM","","",68,null],[13,"GIT_CREDTYPE_DEFAULT","","",68,null],[13,"GIT_CREDTYPE_SSH_INTERACTIVE","","",68,null],[13,"GIT_CREDTYPE_USERNAME","","",68,null],[13,"GIT_CREDTYPE_SSH_MEMORY","","",68,null],[4,"LIBSSH2_SESSION","","",null,null],[4,"LIBSSH2_USERAUTH_KBDINT_PROMPT","","",null,null],[4,"LIBSSH2_USERAUTH_KBDINT_RESPONSE","","",null,null],[4,"git_index_add_option_t","","",null,null],[13,"GIT_INDEX_ADD_DEFAULT","","",69,null],[13,"GIT_INDEX_ADD_FORCE","","",69,null],[13,"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","","",69,null],[13,"GIT_INDEX_ADD_CHECK_PATHSPEC","","",69,null],[4,"git_repository_init_flag_t","","",null,null],[13,"GIT_REPOSITORY_INIT_BARE","","",70,null],[13,"GIT_REPOSITORY_INIT_NO_REINIT","","",70,null],[13,"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","","",70,null],[13,"GIT_REPOSITORY_INIT_MKDIR","","",70,null],[13,"GIT_REPOSITORY_INIT_MKPATH","","",70,null],[13,"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","","",70,null],[4,"git_repository_init_mode_t","","",null,null],[13,"GIT_REPOSITORY_INIT_SHARED_UMASK","","",71,null],[13,"GIT_REPOSITORY_INIT_SHARED_GROUP","","",71,null],[13,"GIT_REPOSITORY_INIT_SHARED_ALL","","",71,null],[4,"git_sort","","",null,null],[13,"GIT_SORT_NONE","","",72,null],[13,"GIT_SORT_TOPOLOGICAL","","",72,null],[13,"GIT_SORT_TIME","","",72,null],[13,"GIT_SORT_REVERSE","","",72,null],[4,"git_diff_format_t","","",null,null],[13,"GIT_DIFF_FORMAT_PATCH","","",73,null],[13,"GIT_DIFF_FORMAT_PATCH_HEADER","","",73,null],[13,"GIT_DIFF_FORMAT_RAW","","",73,null],[13,"GIT_DIFF_FORMAT_NAME_ONLY","","",73,null],[13,"GIT_DIFF_FORMAT_NAME_STATUS","","",73,null],[4,"git_diff_stats_format_t","","",null,null],[13,"GIT_DIFF_STATS_NONE","","",74,null],[13,"GIT_DIFF_STATS_FULL","","",74,null],[13,"GIT_DIFF_STATS_SHORT","","",74,null],[13,"GIT_DIFF_STATS_NUMBER","","",74,null],[13,"GIT_DIFF_STATS_INCLUDE_SUMMARY","","",74,null],[4,"git_diff_binary_t","","",null,null],[13,"GIT_DIFF_BINARY_NONE","","",75,null],[13,"GIT_DIFF_BINARY_LITERAL","","",75,null],[13,"GIT_DIFF_BINARY_DELTA","","",75,null],[4,"git_merge_file_favor_t","","",null,null],[13,"GIT_MERGE_FILE_FAVOR_NORMAL","","",76,null],[13,"GIT_MERGE_FILE_FAVOR_OURS","","",76,null],[13,"GIT_MERGE_FILE_FAVOR_THEIRS","","",76,null],[13,"GIT_MERGE_FILE_FAVOR_UNION","","",76,null],[4,"git_smart_service_t","","",null,null],[13,"GIT_SERVICE_UPLOADPACK_LS","","",77,null],[13,"GIT_SERVICE_UPLOADPACK","","",77,null],[13,"GIT_SERVICE_RECEIVEPACK_LS","","",77,null],[13,"GIT_SERVICE_RECEIVEPACK","","",77,null],[5,"openssl_init","","Initialize openssl for the libgit2 library",null,{"inputs":[],"output":null}],[5,"__issue_14344_workaround","","",null,{"inputs":[],"output":null}],[5,"git_libgit2_init","","",null,null],[5,"git_libgit2_shutdown","","",null,null],[5,"git_repository_free","","",null,null],[5,"git_repository_open","","",null,null],[5,"git_repository_init","","",null,null],[5,"git_repository_init_ext","","",null,null],[5,"git_repository_init_init_options","","",null,null],[5,"git_repository_get_namespace","","",null,null],[5,"git_repository_head","","",null,null],[5,"git_repository_set_head","","",null,null],[5,"git_repository_set_head_detached","","",null,null],[5,"git_repository_is_bare","","",null,null],[5,"git_repository_is_empty","","",null,null],[5,"git_repository_is_shallow","","",null,null],[5,"git_repository_path","","",null,null],[5,"git_repository_state","","",null,null],[5,"git_repository_workdir","","",null,null],[5,"git_repository_index","","",null,null],[5,"git_repository_config","","",null,null],[5,"git_repository_config_snapshot","","",null,null],[5,"git_repository_discover","","",null,null],[5,"git_revparse","","",null,null],[5,"git_revparse_single","","",null,null],[5,"git_revparse_ext","","",null,null],[5,"git_object_dup","","",null,null],[5,"git_object_id","","",null,null],[5,"git_object_free","","",null,null],[5,"git_object_lookup","","",null,null],[5,"git_object_type","","",null,null],[5,"git_object_peel","","",null,null],[5,"git_object_short_id","","",null,null],[5,"git_object_type2string","","",null,null],[5,"git_object_string2type","","",null,null],[5,"git_object_typeisloose","","",null,null],[5,"git_oid_fromraw","","",null,null],[5,"git_oid_fromstrn","","",null,null],[5,"git_oid_tostr","","",null,null],[5,"git_oid_cmp","","",null,null],[5,"git_oid_equal","","",null,null],[5,"git_oid_streq","","",null,null],[5,"git_oid_iszero","","",null,null],[5,"giterr_last","","",null,null],[5,"giterr_clear","","",null,null],[5,"giterr_set_str","","",null,null],[5,"git_remote_create","","",null,null],[5,"git_remote_lookup","","",null,null],[5,"git_remote_create_anonymous","","",null,null],[5,"git_remote_delete","","",null,null],[5,"git_remote_free","","",null,null],[5,"git_remote_name","","",null,null],[5,"git_remote_pushurl","","",null,null],[5,"git_remote_refspec_count","","",null,null],[5,"git_remote_url","","",null,null],[5,"git_remote_connect","","",null,null],[5,"git_remote_connected","","",null,null],[5,"git_remote_disconnect","","",null,null],[5,"git_remote_add_fetch","","",null,null],[5,"git_remote_add_push","","",null,null],[5,"git_remote_download","","",null,null],[5,"git_remote_stop","","",null,null],[5,"git_remote_dup","","",null,null],[5,"git_remote_get_fetch_refspecs","","",null,null],[5,"git_remote_get_refspec","","",null,null],[5,"git_remote_is_valid_name","","",null,null],[5,"git_remote_list","","",null,null],[5,"git_remote_rename","","",null,null],[5,"git_remote_fetch","","",null,null],[5,"git_remote_push","","",null,null],[5,"git_remote_update_tips","","",null,null],[5,"git_remote_set_url","","",null,null],[5,"git_remote_set_pushurl","","",null,null],[5,"git_remote_init_callbacks","","",null,null],[5,"git_fetch_init_options","","",null,null],[5,"git_remote_stats","","",null,null],[5,"git_remote_ls","","",null,null],[5,"git_remote_set_autotag","","",null,null],[5,"git_remote_prune","","",null,null],[5,"git_refspec_direction","","",null,null],[5,"git_refspec_dst","","",null,null],[5,"git_refspec_dst_matches","","",null,null],[5,"git_refspec_src","","",null,null],[5,"git_refspec_src_matches","","",null,null],[5,"git_refspec_force","","",null,null],[5,"git_refspec_string","","",null,null],[5,"git_strarray_free","","",null,null],[5,"git_oidarray_free","","",null,null],[5,"git_signature_default","","",null,null],[5,"git_signature_free","","",null,null],[5,"git_signature_new","","",null,null],[5,"git_signature_now","","",null,null],[5,"git_signature_dup","","",null,null],[5,"git_status_list_new","","",null,null],[5,"git_status_list_entrycount","","",null,null],[5,"git_status_byindex","","",null,null],[5,"git_status_list_free","","",null,null],[5,"git_status_init_options","","",null,null],[5,"git_status_file","","",null,null],[5,"git_status_should_ignore","","",null,null],[5,"git_clone","","",null,null],[5,"git_clone_init_options","","",null,null],[5,"git_reset","","",null,null],[5,"git_reset_default","","",null,null],[5,"git_reference_cmp","","",null,null],[5,"git_reference_delete","","",null,null],[5,"git_reference_free","","",null,null],[5,"git_reference_is_branch","","",null,null],[5,"git_reference_is_note","","",null,null],[5,"git_reference_is_remote","","",null,null],[5,"git_reference_is_tag","","",null,null],[5,"git_reference_is_valid_name","","",null,null],[5,"git_reference_lookup","","",null,null],[5,"git_reference_name","","",null,null],[5,"git_reference_name_to_id","","",null,null],[5,"git_reference_peel","","",null,null],[5,"git_reference_rename","","",null,null],[5,"git_reference_resolve","","",null,null],[5,"git_reference_shorthand","","",null,null],[5,"git_reference_symbolic_target","","",null,null],[5,"git_reference_target","","",null,null],[5,"git_reference_target_peel","","",null,null],[5,"git_reference_set_target","","",null,null],[5,"git_reference_type","","",null,null],[5,"git_reference_iterator_new","","",null,null],[5,"git_reference_iterator_glob_new","","",null,null],[5,"git_reference_iterator_free","","",null,null],[5,"git_reference_next","","",null,null],[5,"git_reference_next_name","","",null,null],[5,"git_reference_create","","",null,null],[5,"git_reference_symbolic_create","","",null,null],[5,"git_submodule_add_finalize","","",null,null],[5,"git_submodule_add_setup","","",null,null],[5,"git_submodule_add_to_index","","",null,null],[5,"git_submodule_branch","","",null,null],[5,"git_submodule_foreach","","",null,null],[5,"git_submodule_free","","",null,null],[5,"git_submodule_head_id","","",null,null],[5,"git_submodule_index_id","","",null,null],[5,"git_submodule_init","","",null,null],[5,"git_submodule_location","","",null,null],[5,"git_submodule_lookup","","",null,null],[5,"git_submodule_name","","",null,null],[5,"git_submodule_open","","",null,null],[5,"git_submodule_path","","",null,null],[5,"git_submodule_reload","","",null,null],[5,"git_submodule_set_ignore","","",null,null],[5,"git_submodule_set_update","","",null,null],[5,"git_submodule_set_url","","",null,null],[5,"git_submodule_sync","","",null,null],[5,"git_submodule_update_strategy","","",null,null],[5,"git_submodule_url","","",null,null],[5,"git_submodule_wd_id","","",null,null],[5,"git_submodule_status","","",null,null],[5,"git_submodule_set_branch","","",null,null],[5,"git_blob_free","","",null,null],[5,"git_blob_id","","",null,null],[5,"git_blob_is_binary","","",null,null],[5,"git_blob_lookup","","",null,null],[5,"git_blob_lookup_prefix","","",null,null],[5,"git_blob_rawcontent","","",null,null],[5,"git_blob_rawsize","","",null,null],[5,"git_blob_create_frombuffer","","",null,null],[5,"git_blob_create_fromdisk","","",null,null],[5,"git_blob_create_fromworkdir","","",null,null],[5,"git_tree_entry_byid","","",null,null],[5,"git_tree_entry_byindex","","",null,null],[5,"git_tree_entry_byname","","",null,null],[5,"git_tree_entry_bypath","","",null,null],[5,"git_tree_entry_cmp","","",null,null],[5,"git_tree_entry_dup","","",null,null],[5,"git_tree_entry_filemode","","",null,null],[5,"git_tree_entry_filemode_raw","","",null,null],[5,"git_tree_entry_free","","",null,null],[5,"git_tree_entry_id","","",null,null],[5,"git_tree_entry_name","","",null,null],[5,"git_tree_entry_to_object","","",null,null],[5,"git_tree_entry_type","","",null,null],[5,"git_tree_entrycount","","",null,null],[5,"git_tree_free","","",null,null],[5,"git_tree_id","","",null,null],[5,"git_tree_lookup","","",null,null],[5,"git_tree_walk","","",null,null],[5,"git_buf_free","","",null,null],[5,"git_buf_grow","","",null,null],[5,"git_buf_set","","",null,null],[5,"git_commit_author","","",null,null],[5,"git_commit_committer","","",null,null],[5,"git_commit_free","","",null,null],[5,"git_commit_id","","",null,null],[5,"git_commit_lookup","","",null,null],[5,"git_commit_message","","",null,null],[5,"git_commit_message_encoding","","",null,null],[5,"git_commit_message_raw","","",null,null],[5,"git_commit_nth_gen_ancestor","","",null,null],[5,"git_commit_parent","","",null,null],[5,"git_commit_parent_id","","",null,null],[5,"git_commit_parentcount","","",null,null],[5,"git_commit_raw_header","","",null,null],[5,"git_commit_summary","","",null,null],[5,"git_commit_time","","",null,null],[5,"git_commit_time_offset","","",null,null],[5,"git_commit_tree","","",null,null],[5,"git_commit_tree_id","","",null,null],[5,"git_commit_amend","","",null,null],[5,"git_commit_create","","",null,null],[5,"git_commit_header_field","","",null,null],[5,"git_branch_create","","",null,null],[5,"git_branch_delete","","",null,null],[5,"git_branch_is_head","","",null,null],[5,"git_branch_iterator_free","","",null,null],[5,"git_branch_iterator_new","","",null,null],[5,"git_branch_lookup","","",null,null],[5,"git_branch_move","","",null,null],[5,"git_branch_name","","",null,null],[5,"git_branch_next","","",null,null],[5,"git_branch_set_upstream","","",null,null],[5,"git_branch_upstream","","",null,null],[5,"git_index_add","","",null,null],[5,"git_index_add_all","","",null,null],[5,"git_index_add_bypath","","",null,null],[5,"git_index_add_frombuffer","","",null,null],[5,"git_index_conflict_add","","",null,null],[5,"git_index_clear","","",null,null],[5,"git_index_entry_stage","","",null,null],[5,"git_index_entrycount","","",null,null],[5,"git_index_find","","",null,null],[5,"git_index_free","","",null,null],[5,"git_index_get_byindex","","",null,null],[5,"git_index_get_bypath","","",null,null],[5,"git_index_new","","",null,null],[5,"git_index_open","","",null,null],[5,"git_index_path","","",null,null],[5,"git_index_read","","",null,null],[5,"git_index_read_tree","","",null,null],[5,"git_index_remove","","",null,null],[5,"git_index_remove_all","","",null,null],[5,"git_index_remove_bypath","","",null,null],[5,"git_index_remove_directory","","",null,null],[5,"git_index_update_all","","",null,null],[5,"git_index_write","","",null,null],[5,"git_index_write_tree","","",null,null],[5,"git_index_write_tree_to","","",null,null],[5,"git_config_add_file_ondisk","","",null,null],[5,"git_config_delete_entry","","",null,null],[5,"git_config_delete_multivar","","",null,null],[5,"git_config_find_global","","",null,null],[5,"git_config_find_system","","",null,null],[5,"git_config_find_xdg","","",null,null],[5,"git_config_free","","",null,null],[5,"git_config_get_bool","","",null,null],[5,"git_config_get_entry","","",null,null],[5,"git_config_get_int32","","",null,null],[5,"git_config_get_int64","","",null,null],[5,"git_config_get_string","","",null,null],[5,"git_config_get_string_buf","","",null,null],[5,"git_config_get_path","","",null,null],[5,"git_config_iterator_free","","",null,null],[5,"git_config_iterator_glob_new","","",null,null],[5,"git_config_iterator_new","","",null,null],[5,"git_config_new","","",null,null],[5,"git_config_next","","",null,null],[5,"git_config_open_default","","",null,null],[5,"git_config_open_global","","",null,null],[5,"git_config_open_level","","",null,null],[5,"git_config_open_ondisk","","",null,null],[5,"git_config_parse_bool","","",null,null],[5,"git_config_parse_int32","","",null,null],[5,"git_config_parse_int64","","",null,null],[5,"git_config_set_bool","","",null,null],[5,"git_config_set_int32","","",null,null],[5,"git_config_set_int64","","",null,null],[5,"git_config_set_string","","",null,null],[5,"git_config_snapshot","","",null,null],[5,"git_config_entry_free","","",null,null],[5,"git_cred_default_new","","",null,null],[5,"git_cred_has_username","","",null,null],[5,"git_cred_ssh_custom_new","","",null,null],[5,"git_cred_ssh_interactive_new","","",null,null],[5,"git_cred_ssh_key_from_agent","","",null,null],[5,"git_cred_ssh_key_new","","",null,null],[5,"git_cred_ssh_key_memory_new","","",null,null],[5,"git_cred_userpass","","",null,null],[5,"git_cred_userpass_plaintext_new","","",null,null],[5,"git_cred_username_new","","",null,null],[5,"git_tag_annotation_create","","",null,null],[5,"git_tag_create","","",null,null],[5,"git_tag_create_frombuffer","","",null,null],[5,"git_tag_create_lightweight","","",null,null],[5,"git_tag_delete","","",null,null],[5,"git_tag_foreach","","",null,null],[5,"git_tag_free","","",null,null],[5,"git_tag_id","","",null,null],[5,"git_tag_list","","",null,null],[5,"git_tag_list_match","","",null,null],[5,"git_tag_lookup","","",null,null],[5,"git_tag_lookup_prefix","","",null,null],[5,"git_tag_message","","",null,null],[5,"git_tag_name","","",null,null],[5,"git_tag_peel","","",null,null],[5,"git_tag_tagger","","",null,null],[5,"git_tag_target","","",null,null],[5,"git_tag_target_id","","",null,null],[5,"git_tag_target_type","","",null,null],[5,"git_checkout_head","","",null,null],[5,"git_checkout_index","","",null,null],[5,"git_checkout_tree","","",null,null],[5,"git_checkout_init_options","","",null,null],[5,"git_annotated_commit_id","","",null,null],[5,"git_annotated_commit_from_ref","","",null,null],[5,"git_annotated_commit_free","","",null,null],[5,"git_merge_init_options","","",null,null],[5,"git_merge","","",null,null],[5,"git_merge_commits","","",null,null],[5,"git_repository_state_cleanup","","",null,null],[5,"git_note_author","","",null,null],[5,"git_note_committer","","",null,null],[5,"git_note_create","","",null,null],[5,"git_note_default_ref","","",null,null],[5,"git_note_free","","",null,null],[5,"git_note_id","","",null,null],[5,"git_note_iterator_free","","",null,null],[5,"git_note_iterator_new","","",null,null],[5,"git_note_message","","",null,null],[5,"git_note_next","","",null,null],[5,"git_note_read","","",null,null],[5,"git_note_remove","","",null,null],[5,"git_blame_file","","",null,null],[5,"git_blame_free","","",null,null],[5,"git_blame_init_options","","",null,null],[5,"git_blame_get_hunk_count","","",null,null],[5,"git_blame_get_hunk_byline","","",null,null],[5,"git_blame_get_hunk_byindex","","",null,null],[5,"git_revwalk_new","","",null,null],[5,"git_revwalk_free","","",null,null],[5,"git_revwalk_reset","","",null,null],[5,"git_revwalk_sorting","","",null,null],[5,"git_revwalk_push_head","","",null,null],[5,"git_revwalk_push","","",null,null],[5,"git_revwalk_push_ref","","",null,null],[5,"git_revwalk_push_glob","","",null,null],[5,"git_revwalk_push_range","","",null,null],[5,"git_revwalk_simplify_first_parent","","",null,null],[5,"git_revwalk_hide_head","","",null,null],[5,"git_revwalk_hide","","",null,null],[5,"git_revwalk_hide_ref","","",null,null],[5,"git_revwalk_hide_glob","","",null,null],[5,"git_revwalk_next","","",null,null],[5,"git_merge_base","","",null,null],[5,"git_merge_bases","","",null,null],[5,"git_pathspec_free","","",null,null],[5,"git_pathspec_match_diff","","",null,null],[5,"git_pathspec_match_index","","",null,null],[5,"git_pathspec_match_list_diff_entry","","",null,null],[5,"git_pathspec_match_list_entry","","",null,null],[5,"git_pathspec_match_list_entrycount","","",null,null],[5,"git_pathspec_match_list_failed_entry","","",null,null],[5,"git_pathspec_match_list_failed_entrycount","","",null,null],[5,"git_pathspec_match_list_free","","",null,null],[5,"git_pathspec_match_tree","","",null,null],[5,"git_pathspec_match_workdir","","",null,null],[5,"git_pathspec_matches_path","","",null,null],[5,"git_pathspec_new","","",null,null],[5,"git_diff_blob_to_buffer","","",null,null],[5,"git_diff_blobs","","",null,null],[5,"git_diff_buffers","","",null,null],[5,"git_diff_find_similar","","",null,null],[5,"git_diff_find_init_options","","",null,null],[5,"git_diff_foreach","","",null,null],[5,"git_diff_free","","",null,null],[5,"git_diff_get_delta","","",null,null],[5,"git_diff_get_stats","","",null,null],[5,"git_diff_index_to_workdir","","",null,null],[5,"git_diff_init_options","","",null,null],[5,"git_diff_is_sorted_icase","","",null,null],[5,"git_diff_merge","","",null,null],[5,"git_diff_num_deltas","","",null,null],[5,"git_diff_num_deltas_of_type","","",null,null],[5,"git_diff_print","","",null,null],[5,"git_diff_stats_deletions","","",null,null],[5,"git_diff_stats_files_changed","","",null,null],[5,"git_diff_stats_free","","",null,null],[5,"git_diff_stats_insertions","","",null,null],[5,"git_diff_stats_to_buf","","",null,null],[5,"git_diff_status_char","","",null,null],[5,"git_diff_tree_to_index","","",null,null],[5,"git_diff_tree_to_tree","","",null,null],[5,"git_diff_tree_to_workdir","","",null,null],[5,"git_diff_tree_to_workdir_with_index","","",null,null],[5,"git_graph_ahead_behind","","",null,null],[5,"git_graph_descendant_of","","",null,null],[5,"git_reflog_append","","",null,null],[5,"git_reflog_delete","","",null,null],[5,"git_reflog_drop","","",null,null],[5,"git_reflog_entry_byindex","","",null,null],[5,"git_reflog_entry_committer","","",null,null],[5,"git_reflog_entry_id_new","","",null,null],[5,"git_reflog_entry_id_old","","",null,null],[5,"git_reflog_entry_message","","",null,null],[5,"git_reflog_entrycount","","",null,null],[5,"git_reflog_free","","",null,null],[5,"git_reflog_read","","",null,null],[5,"git_reflog_rename","","",null,null],[5,"git_reflog_write","","",null,null],[5,"git_transport_register","","",null,null],[5,"git_transport_unregister","","",null,null],[5,"git_transport_smart","","",null,null],[6,"git_off_t","","",null,null],[6,"git_time_t","","",null,null],[6,"git_revparse_mode_t","","",null,null],[6,"git_checkout_notify_cb","","",null,null],[6,"git_checkout_progress_cb","","",null,null],[6,"git_checkout_perfdata_cb","","",null,null],[6,"git_transport_message_cb","","",null,null],[6,"git_cred_acquire_cb","","",null,null],[6,"git_transfer_progress_cb","","",null,null],[6,"git_packbuilder_progress","","",null,null],[6,"git_push_transfer_progress","","",null,null],[6,"git_transport_certificate_check_cb","","",null,null],[6,"git_push_negotiation","","",null,null],[6,"git_repository_create_cb","","",null,null],[6,"git_remote_create_cb","","",null,null],[6,"git_treewalk_cb","","",null,null],[6,"git_index_matched_path_cb","","",null,null],[6,"git_cred_ssh_interactive_callback","","",null,null],[6,"git_cred_sign_callback","","",null,null],[6,"git_tag_foreach_cb","","",null,null],[6,"git_submodule_status_t","","",null,null],[6,"git_pathspec_flag_t","","",null,null],[6,"git_diff_file_cb","","",null,null],[6,"git_diff_hunk_cb","","",null,null],[6,"git_diff_line_cb","","",null,null],[6,"git_diff_binary_cb","","",null,null],[6,"git_diff_line_t","","",null,null],[6,"git_diff_notify_cb","","",null,null],[6,"git_transport_cb","","",null,null],[6,"git_smart_subtransport_cb","","",null,null],[17,"GIT_OID_RAWSZ","","",null,null],[17,"GIT_OID_HEXSZ","","",null,null],[17,"GIT_CLONE_OPTIONS_VERSION","","",null,null],[17,"GIT_CHECKOUT_OPTIONS_VERSION","","",null,null],[17,"GIT_MERGE_OPTIONS_VERSION","","",null,null],[17,"GIT_REMOTE_CALLBACKS_VERSION","","",null,null],[17,"GIT_STATUS_OPTIONS_VERSION","","",null,null],[17,"GIT_BLAME_OPTIONS_VERSION","","",null,null],[17,"GIT_REVPARSE_SINGLE","","",null,null],[17,"GIT_REVPARSE_RANGE","","",null,null],[17,"GIT_REVPARSE_MERGE_BASE","","",null,null],[17,"GIT_BLAME_NORMAL","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_FILE","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES","","",null,null],[17,"GIT_BLAME_FIRST_PARENT","","",null,null],[17,"GIT_REPOSITORY_INIT_OPTIONS_VERSION","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_HEAD","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_INDEX","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_CONFIG","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_WD","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_ADDED","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_DELETED","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_ADDED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_DELETED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_UNTRACKED","","",null,null],[17,"GIT_PATHSPEC_DEFAULT","","",null,null],[17,"GIT_PATHSPEC_IGNORE_CASE","","",null,null],[17,"GIT_PATHSPEC_USE_CASE","","",null,null],[17,"GIT_PATHSPEC_NO_GLOB","","",null,null],[17,"GIT_PATHSPEC_NO_MATCH_ERROR","","",null,null],[17,"GIT_PATHSPEC_FIND_FAILURES","","",null,null],[17,"GIT_PATHSPEC_FAILURES_ONLY","","",null,null],[17,"GIT_DIFF_LINE_CONTEXT","","",null,null],[17,"GIT_DIFF_LINE_ADDITION","","",null,null],[17,"GIT_DIFF_LINE_DELETION","","",null,null],[17,"GIT_DIFF_LINE_CONTEXT_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_ADD_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_DEL_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_FILE_HDR","","",null,null],[17,"GIT_DIFF_LINE_HUNK_HDR","","",null,null],[17,"GIT_DIFF_LINE_BINARY","","",null,null],[17,"GIT_DIFF_NORMAL","","",null,null],[17,"GIT_DIFF_REVERSE","","",null,null],[17,"GIT_DIFF_INCLUDE_IGNORED","","",null,null],[17,"GIT_DIFF_RECURSE_IGNORED_DIRS","","",null,null],[17,"GIT_DIFF_INCLUDE_UNTRACKED","","",null,null],[17,"GIT_DIFF_RECURSE_UNTRACKED_DIRS","","",null,null],[17,"GIT_DIFF_INCLUDE_UNMODIFIED","","",null,null],[17,"GIT_DIFF_INCLUDE_TYPECHANGE","","",null,null],[17,"GIT_DIFF_INCLUDE_TYPECHANGE_TREES","","",null,null],[17,"GIT_DIFF_IGNORE_FILEMODE","","",null,null],[17,"GIT_DIFF_IGNORE_SUBMODULES","","",null,null],[17,"GIT_DIFF_IGNORE_CASE","","",null,null],[17,"GIT_DIFF_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_DIFF_SKIP_BINARY_CHECK","","",null,null],[17,"GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS","","",null,null],[17,"GIT_DIFF_UPDATE_INDEX","","",null,null],[17,"GIT_DIFF_INCLUDE_UNREADABLE","","",null,null],[17,"GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED","","",null,null],[17,"GIT_DIFF_FORCE_TEXT","","",null,null],[17,"GIT_DIFF_FORCE_BINARY","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE_CHANGE","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE_EOL","","",null,null],[17,"GIT_DIFF_SHOW_UNTRACKED_CONTENT","","",null,null],[17,"GIT_DIFF_SHOW_UNMODIFIED","","",null,null],[17,"GIT_DIFF_PATIENCE","","",null,null],[17,"GIT_DIFF_MINIMAL","","",null,null],[17,"GIT_DIFF_SHOW_BINARY","","",null,null],[17,"GIT_DIFF_FIND_OPTIONS_VERSION","","",null,null],[17,"GIT_DIFF_FIND_BY_CONFIG","","",null,null],[17,"GIT_DIFF_FIND_RENAMES","","",null,null],[17,"GIT_DIFF_FIND_RENAMES_FROM_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_COPIES","","",null,null],[17,"GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED","","",null,null],[17,"GIT_DIFF_FIND_REWRITES","","",null,null],[17,"GIT_DIFF_BREAK_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_AND_BREAK_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_FOR_UNTRACKED","","",null,null],[17,"GIT_DIFF_FIND_ALL","","",null,null],[17,"GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_EXACT_MATCH_ONLY","","",null,null],[17,"GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY","","",null,null],[17,"GIT_DIFF_FIND_REMOVE_UNMODIFIED","","",null,null],[17,"GIT_MERGE_TREE_FIND_RENAMES","","",null,null],[17,"GIT_MERGE_FILE_DEFAULT","","",null,null],[17,"GIT_MERGE_FILE_STYLE_MERGE","","",null,null],[17,"GIT_MERGE_FILE_STYLE_DIFF3","","",null,null],[17,"GIT_MERGE_FILE_SIMPLIFY_ALNUM","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL","","",null,null],[17,"GIT_MERGE_FILE_DIFF_PATIENCE","","",null,null],[17,"GIT_MERGE_FILE_DIFF_MINIMAL","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"git_oid"}],"output":{"name":"git_oid"}}],[11,"clone","","",3,{"inputs":[{"name":"git_strarray"}],"output":{"name":"git_strarray"}}],[11,"clone","","",4,{"inputs":[{"name":"git_oidarray"}],"output":{"name":"git_oidarray"}}],[11,"eq","","",6,{"inputs":[{"name":"git_time"},{"name":"git_time"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"git_time"},{"name":"git_time"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"git_time"}],"output":{"name":"git_time"}}],[11,"clone","","",43,{"inputs":[{"name":"git_error_code"}],"output":{"name":"git_error_code"}}],[11,"eq","","",43,{"inputs":[{"name":"git_error_code"},{"name":"git_error_code"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"git_error_code"},{"name":"git_error_code"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"git_error_t"}],"output":{"name":"git_error_t"}}],[11,"clone","","",45,{"inputs":[{"name":"git_repository_state_t"}],"output":{"name":"git_repository_state_t"}}],[11,"clone","","",46,{"inputs":[{"name":"git_direction"}],"output":{"name":"git_direction"}}],[11,"clone","","",47,{"inputs":[{"name":"git_clone_local_t"}],"output":{"name":"git_clone_local_t"}}],[11,"clone","","",50,{"inputs":[{"name":"git_remote_completion_type"}],"output":{"name":"git_remote_completion_type"}}],[11,"eq","","",51,{"inputs":[{"name":"git_cert_t"},{"name":"git_cert_t"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"git_cert_t"},{"name":"git_cert_t"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"git_cert_t"}],"output":{"name":"git_cert_t"}}],[11,"clone","","",52,{"inputs":[{"name":"git_cert_ssh_t"}],"output":{"name":"git_cert_ssh_t"}}],[11,"clone","","",16,{"inputs":[{"name":"git_transfer_progress"}],"output":{"name":"git_transfer_progress"}}],[11,"clone","","",53,{"inputs":[{"name":"git_checkout_notify_t"}],"output":{"name":"git_checkout_notify_t"}}],[11,"clone","","",54,{"inputs":[{"name":"git_status_t"}],"output":{"name":"git_status_t"}}],[11,"clone","","",55,{"inputs":[{"name":"git_status_opt_t"}],"output":{"name":"git_status_opt_t"}}],[11,"clone","","",56,{"inputs":[{"name":"git_status_show_t"}],"output":{"name":"git_status_show_t"}}],[11,"clone","","",57,{"inputs":[{"name":"git_delta_t"}],"output":{"name":"git_delta_t"}}],[11,"clone","","",58,{"inputs":[{"name":"git_checkout_strategy_t"}],"output":{"name":"git_checkout_strategy_t"}}],[11,"clone","","",59,{"inputs":[{"name":"git_reset_t"}],"output":{"name":"git_reset_t"}}],[11,"clone","","",60,{"inputs":[{"name":"git_otype"}],"output":{"name":"git_otype"}}],[11,"clone","","",61,{"inputs":[{"name":"git_ref_t"}],"output":{"name":"git_ref_t"}}],[11,"clone","","",62,{"inputs":[{"name":"git_filemode_t"}],"output":{"name":"git_filemode_t"}}],[11,"clone","","",63,{"inputs":[{"name":"git_treewalk_mode"}],"output":{"name":"git_treewalk_mode"}}],[11,"clone","","",21,{"inputs":[{"name":"git_buf"}],"output":{"name":"git_buf"}}],[11,"clone","","",64,{"inputs":[{"name":"git_branch_t"}],"output":{"name":"git_branch_t"}}],[11,"clone","","",22,{"inputs":[{"name":"git_blame_options"}],"output":{"name":"git_blame_options"}}],[11,"clone","","",23,{"inputs":[{"name":"git_blame_hunk"}],"output":{"name":"git_blame_hunk"}}],[11,"clone","","",24,{"inputs":[{"name":"git_index_entry"}],"output":{"name":"git_index_entry"}}],[11,"eq","","",25,{"inputs":[{"name":"git_index_time"},{"name":"git_index_time"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"git_index_time"},{"name":"git_index_time"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"git_index_time"}],"output":{"name":"git_index_time"}}],[11,"clone","","",65,{"inputs":[{"name":"git_config_level_t"}],"output":{"name":"git_config_level_t"}}],[11,"clone","","",66,{"inputs":[{"name":"git_submodule_update_t"}],"output":{"name":"git_submodule_update_t"}}],[11,"clone","","",67,{"inputs":[{"name":"git_submodule_ignore_t"}],"output":{"name":"git_submodule_ignore_t"}}],[11,"clone","","",68,{"inputs":[{"name":"git_credtype_t"}],"output":{"name":"git_credtype_t"}}],[11,"clone","","",69,{"inputs":[{"name":"git_index_add_option_t"}],"output":{"name":"git_index_add_option_t"}}],[11,"clone","","",70,{"inputs":[{"name":"git_repository_init_flag_t"}],"output":{"name":"git_repository_init_flag_t"}}],[11,"clone","","",71,{"inputs":[{"name":"git_repository_init_mode_t"}],"output":{"name":"git_repository_init_mode_t"}}]],"paths":[[3,"git_revspec"],[3,"git_error"],[3,"git_oid"],[3,"git_strarray"],[3,"git_oidarray"],[3,"git_signature"],[3,"git_time"],[3,"git_clone_options"],[3,"git_checkout_options"],[3,"git_checkout_perfdata"],[3,"git_remote_callbacks"],[3,"git_fetch_options"],[3,"git_push_update"],[3,"git_cert"],[3,"git_cert_hostkey"],[3,"git_cert_x509"],[3,"git_transfer_progress"],[3,"git_diff_file"],[3,"git_status_options"],[3,"git_diff_delta"],[3,"git_status_entry"],[3,"git_buf"],[3,"git_blame_options"],[3,"git_blame_hunk"],[3,"git_index_entry"],[3,"git_index_time"],[3,"git_config_entry"],[3,"git_cred"],[3,"git_push_options"],[3,"git_repository_init_options"],[3,"git_remote_head"],[3,"git_diff_hunk"],[3,"git_diff_line"],[3,"git_diff_options"],[3,"git_diff_find_options"],[3,"git_diff_similarity_metric"],[3,"git_diff_binary"],[3,"git_diff_binary_file"],[3,"git_merge_options"],[3,"git_transport"],[3,"git_smart_subtransport_stream"],[3,"git_smart_subtransport"],[3,"git_smart_subtransport_definition"],[4,"git_error_code"],[4,"git_error_t"],[4,"git_repository_state_t"],[4,"git_direction"],[4,"git_clone_local_t"],[4,"git_remote_autotag_option_t"],[4,"git_fetch_prune_t"],[4,"git_remote_completion_type"],[4,"git_cert_t"],[4,"git_cert_ssh_t"],[4,"git_checkout_notify_t"],[4,"git_status_t"],[4,"git_status_opt_t"],[4,"git_status_show_t"],[4,"git_delta_t"],[4,"git_checkout_strategy_t"],[4,"git_reset_t"],[4,"git_otype"],[4,"git_ref_t"],[4,"git_filemode_t"],[4,"git_treewalk_mode"],[4,"git_branch_t"],[4,"git_config_level_t"],[4,"git_submodule_update_t"],[4,"git_submodule_ignore_t"],[4,"git_credtype_t"],[4,"git_index_add_option_t"],[4,"git_repository_init_flag_t"],[4,"git_repository_init_mode_t"],[4,"git_sort"],[4,"git_diff_format_t"],[4,"git_diff_stats_format_t"],[4,"git_diff_binary_t"],[4,"git_merge_file_favor_t"],[4,"git_smart_service_t"]]};
searchIndex['libssh2_sys'] = {"items":[[0,"","libssh2_sys","",null,null],[3,"libssh2_agent_publickey","","",null,null],[12,"magic","","",0,null],[12,"node","","",0,null],[12,"blob","","",0,null],[12,"blob_len","","",0,null],[12,"comment","","",0,null],[3,"libssh2_knownhost","","",null,null],[12,"magic","","",1,null],[12,"node","","",1,null],[12,"name","","",1,null],[12,"key","","",1,null],[12,"typemask","","",1,null],[3,"LIBSSH2_SFTP_ATTRIBUTES","","",null,null],[12,"flags","","",2,null],[12,"filesize","","",2,null],[12,"uid","","",2,null],[12,"gid","","",2,null],[12,"permissions","","",2,null],[12,"atime","","",2,null],[12,"mtime","","",2,null],[3,"LIBSSH2_SFTP_STATVFS","","",null,null],[12,"f_bsize","","",3,null],[12,"f_frsize","","",3,null],[12,"f_blocks","","",3,null],[12,"f_bfree","","",3,null],[12,"f_bavail","","",3,null],[12,"f_files","","",3,null],[12,"f_ffree","","",3,null],[12,"f_favail","","",3,null],[12,"f_fsid","","",3,null],[12,"f_flag","","",3,null],[12,"f_namemax","","",3,null],[4,"LIBSSH2_SESSION","","",null,null],[4,"LIBSSH2_AGENT","","",null,null],[4,"LIBSSH2_CHANNEL","","",null,null],[4,"LIBSSH2_LISTENER","","",null,null],[4,"LIBSSH2_KNOWNHOSTS","","",null,null],[4,"LIBSSH2_SFTP","","",null,null],[4,"LIBSSH2_SFTP_HANDLE","","",null,null],[5,"issue_14344_workaround","","",null,{"inputs":[],"output":null}],[5,"libssh2_init","","",null,null],[5,"libssh2_exit","","",null,null],[5,"libssh2_free","","",null,null],[5,"libssh2_hostkey_hash","","",null,null],[5,"libssh2_session_init_ex","","",null,null],[5,"libssh2_session_free","","",null,null],[5,"libssh2_session_banner_get","","",null,null],[5,"libssh2_session_banner_set","","",null,null],[5,"libssh2_session_disconnect_ex","","",null,null],[5,"libssh2_session_flag","","",null,null],[5,"libssh2_session_get_blocking","","",null,null],[5,"libssh2_session_get_timeout","","",null,null],[5,"libssh2_session_hostkey","","",null,null],[5,"libssh2_session_method_pref","","",null,null],[5,"libssh2_session_methods","","",null,null],[5,"libssh2_session_set_blocking","","",null,null],[5,"libssh2_session_set_timeout","","",null,null],[5,"libssh2_session_supported_algs","","",null,null],[5,"libssh2_session_last_error","","",null,null],[5,"libssh2_session_handshake","","",null,null],[5,"libssh2_keepalive_config","","",null,null],[5,"libssh2_keepalive_send","","",null,null],[5,"libssh2_agent_init","","",null,null],[5,"libssh2_agent_free","","",null,null],[5,"libssh2_agent_connect","","",null,null],[5,"libssh2_agent_disconnect","","",null,null],[5,"libssh2_agent_list_identities","","",null,null],[5,"libssh2_agent_get_identity","","",null,null],[5,"libssh2_agent_userauth","","",null,null],[5,"libssh2_channel_free","","",null,null],[5,"libssh2_channel_close","","",null,null],[5,"libssh2_channel_wait_closed","","",null,null],[5,"libssh2_channel_wait_eof","","",null,null],[5,"libssh2_channel_eof","","",null,null],[5,"libssh2_channel_process_startup","","",null,null],[5,"libssh2_channel_flush_ex","","",null,null],[5,"libssh2_channel_write_ex","","",null,null],[5,"libssh2_channel_get_exit_signal","","",null,null],[5,"libssh2_channel_get_exit_status","","",null,null],[5,"libssh2_channel_open_ex","","",null,null],[5,"libssh2_channel_read_ex","","",null,null],[5,"libssh2_channel_setenv_ex","","",null,null],[5,"libssh2_channel_send_eof","","",null,null],[5,"libssh2_channel_request_pty_ex","","",null,null],[5,"libssh2_channel_request_pty_size_ex","","",null,null],[5,"libssh2_channel_window_read_ex","","",null,null],[5,"libssh2_channel_window_write_ex","","",null,null],[5,"libssh2_channel_receive_window_adjust2","","",null,null],[5,"libssh2_channel_direct_tcpip_ex","","",null,null],[5,"libssh2_channel_forward_accept","","",null,null],[5,"libssh2_channel_forward_cancel","","",null,null],[5,"libssh2_channel_forward_listen_ex","","",null,null],[5,"libssh2_userauth_authenticated","","",null,null],[5,"libssh2_userauth_list","","",null,null],[5,"libssh2_userauth_hostbased_fromfile_ex","","",null,null],[5,"libssh2_userauth_publickey_fromfile_ex","","",null,null],[5,"libssh2_userauth_password_ex","","",null,null],[5,"libssh2_knownhost_free","","",null,null],[5,"libssh2_knownhost_addc","","",null,null],[5,"libssh2_knownhost_check","","",null,null],[5,"libssh2_knownhost_checkp","","",null,null],[5,"libssh2_knownhost_del","","",null,null],[5,"libssh2_knownhost_get","","",null,null],[5,"libssh2_knownhost_readfile","","",null,null],[5,"libssh2_knownhost_readline","","",null,null],[5,"libssh2_knownhost_writefile","","",null,null],[5,"libssh2_knownhost_writeline","","",null,null],[5,"libssh2_knownhost_init","","",null,null],[5,"libssh2_scp_recv","","",null,null],[5,"libssh2_scp_send64","","",null,null],[5,"libssh2_sftp_init","","",null,null],[5,"libssh2_sftp_shutdown","","",null,null],[5,"libssh2_sftp_last_error","","",null,null],[5,"libssh2_sftp_open_ex","","",null,null],[5,"libssh2_sftp_close_handle","","",null,null],[5,"libssh2_sftp_mkdir_ex","","",null,null],[5,"libssh2_sftp_fsync","","",null,null],[5,"libssh2_sftp_fstat_ex","","",null,null],[5,"libssh2_sftp_fstatvfs","","",null,null],[5,"libssh2_sftp_stat_ex","","",null,null],[5,"libssh2_sftp_read","","",null,null],[5,"libssh2_sftp_symlink_ex","","",null,null],[5,"libssh2_sftp_rename_ex","","",null,null],[5,"libssh2_sftp_rmdir_ex","","",null,null],[5,"libssh2_sftp_write","","",null,null],[5,"libssh2_sftp_tell64","","",null,null],[5,"libssh2_sftp_seek64","","",null,null],[5,"libssh2_sftp_readdir_ex","","",null,null],[5,"libssh2_sftp_unlink_ex","","",null,null],[6,"LIBSSH2_ALLOC_FUNC","","",null,null],[6,"LIBSSH2_FREE_FUNC","","",null,null],[6,"LIBSSH2_REALLOC_FUNC","","",null,null],[6,"LIBSSH2_PASSWD_CHANGEREQ_FUNC","","",null,null],[6,"libssh2_socket_t","","",null,null],[17,"SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT","","",null,null],[17,"SSH_DISCONNECT_PROTOCOL_ERROR","","",null,null],[17,"SSH_DISCONNECT_KEY_EXCHANGE_FAILED","","",null,null],[17,"SSH_DISCONNECT_RESERVED","","",null,null],[17,"SSH_DISCONNECT_MAC_ERROR","","",null,null],[17,"SSH_DISCONNECT_COMPRESSION_ERROR","","",null,null],[17,"SSH_DISCONNECT_SERVICE_NOT_AVAILABLE","","",null,null],[17,"SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED","","",null,null],[17,"SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE","","",null,null],[17,"SSH_DISCONNECT_CONNECTION_LOST","","",null,null],[17,"SSH_DISCONNECT_BY_APPLICATION","","",null,null],[17,"SSH_DISCONNECT_TOO_MANY_CONNECTIONS","","",null,null],[17,"SSH_DISCONNECT_AUTH_CANCELLED_BY_USER","","",null,null],[17,"SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE","","",null,null],[17,"SSH_DISCONNECT_ILLEGAL_USER_NAME","","",null,null],[17,"LIBSSH2_FLAG_SIGPIPE","","",null,null],[17,"LIBSSH2_FLAG_COMPRESS","","",null,null],[17,"LIBSSH2_HOSTKEY_TYPE_UNKNOWN","","",null,null],[17,"LIBSSH2_HOSTKEY_TYPE_RSA","","",null,null],[17,"LIBSSH2_HOSTKEY_TYPE_DSS","","",null,null],[17,"LIBSSH2_METHOD_KEX","","",null,null],[17,"LIBSSH2_METHOD_HOSTKEY","","",null,null],[17,"LIBSSH2_METHOD_CRYPT_CS","","",null,null],[17,"LIBSSH2_METHOD_CRYPT_SC","","",null,null],[17,"LIBSSH2_METHOD_MAC_CS","","",null,null],[17,"LIBSSH2_METHOD_MAC_SC","","",null,null],[17,"LIBSSH2_METHOD_COMP_CS","","",null,null],[17,"LIBSSH2_METHOD_COMP_SC","","",null,null],[17,"LIBSSH2_METHOD_LANG_CS","","",null,null],[17,"LIBSSH2_METHOD_LANG_SC","","",null,null],[17,"LIBSSH2_CHANNEL_PACKET_DEFAULT","","",null,null],[17,"LIBSSH2_CHANNEL_WINDOW_DEFAULT","","",null,null],[17,"LIBSSH2_ERROR_BANNER_RECV","","",null,null],[17,"LIBSSH2_ERROR_BANNER_SEND","","",null,null],[17,"LIBSSH2_ERROR_INVALID_MAC","","",null,null],[17,"LIBSSH2_ERROR_KEX_FAILURE","","",null,null],[17,"LIBSSH2_ERROR_ALLOC","","",null,null],[17,"LIBSSH2_ERROR_SOCKET_SEND","","",null,null],[17,"LIBSSH2_ERROR_KEY_EXCHANGE_FAILURE","","",null,null],[17,"LIBSSH2_ERROR_TIMEOUT","","",null,null],[17,"LIBSSH2_ERROR_HOSTKEY_INIT","","",null,null],[17,"LIBSSH2_ERROR_HOSTKEY_SIGN","","",null,null],[17,"LIBSSH2_ERROR_DECRYPT","","",null,null],[17,"LIBSSH2_ERROR_SOCKET_DISCONNECT","","",null,null],[17,"LIBSSH2_ERROR_PROTO","","",null,null],[17,"LIBSSH2_ERROR_PASSWORD_EXPIRED","","",null,null],[17,"LIBSSH2_ERROR_FILE","","",null,null],[17,"LIBSSH2_ERROR_METHOD_NONE","","",null,null],[17,"LIBSSH2_ERROR_AUTHENTICATION_FAILED","","",null,null],[17,"LIBSSH2_ERROR_PUBLICKEY_UNRECOGNIZED","","",null,null],[17,"LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_OUTOFORDER","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_FAILURE","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_REQUEST_DENIED","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_UNKNOWN","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_WINDOW_EXCEEDED","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_PACKET_EXCEEDED","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_CLOSED","","",null,null],[17,"LIBSSH2_ERROR_CHANNEL_EOF_SENT","","",null,null],[17,"LIBSSH2_ERROR_SCP_PROTOCOL","","",null,null],[17,"LIBSSH2_ERROR_ZLIB","","",null,null],[17,"LIBSSH2_ERROR_SOCKET_TIMEOUT","","",null,null],[17,"LIBSSH2_ERROR_SFTP_PROTOCOL","","",null,null],[17,"LIBSSH2_ERROR_REQUEST_DENIED","","",null,null],[17,"LIBSSH2_ERROR_METHOD_NOT_SUPPORTED","","",null,null],[17,"LIBSSH2_ERROR_INVAL","","",null,null],[17,"LIBSSH2_ERROR_INVALID_POLL_TYPE","","",null,null],[17,"LIBSSH2_ERROR_PUBLICKEY_PROTOCOL","","",null,null],[17,"LIBSSH2_ERROR_EAGAIN","","",null,null],[17,"LIBSSH2_ERROR_BUFFER_TOO_SMALL","","",null,null],[17,"LIBSSH2_ERROR_BAD_USE","","",null,null],[17,"LIBSSH2_ERROR_COMPRESS","","",null,null],[17,"LIBSSH2_ERROR_OUT_OF_BOUNDARY","","",null,null],[17,"LIBSSH2_ERROR_AGENT_PROTOCOL","","",null,null],[17,"LIBSSH2_ERROR_SOCKET_RECV","","",null,null],[17,"LIBSSH2_ERROR_ENCRYPT","","",null,null],[17,"LIBSSH2_ERROR_BAD_SOCKET","","",null,null],[17,"LIBSSH2_ERROR_KNOWN_HOSTS","","",null,null],[17,"LIBSSH2_HOSTKEY_HASH_MD5","","",null,null],[17,"LIBSSH2_HOSTKEY_HASH_SHA1","","",null,null],[17,"LIBSSH2_KNOWNHOST_FILE_OPENSSH","","",null,null],[17,"LIBSSH2_KNOWNHOST_CHECK_MATCH","","",null,null],[17,"LIBSSH2_KNOWNHOST_CHECK_MISMATCH","","",null,null],[17,"LIBSSH2_KNOWNHOST_CHECK_NOTFOUND","","",null,null],[17,"LIBSSH2_KNOWNHOST_CHECK_FAILURE","","",null,null],[17,"LIBSSH2_KNOWNHOST_TYPE_PLAIN","","",null,null],[17,"LIBSSH2_KNOWNHOST_TYPE_SHA1","","",null,null],[17,"LIBSSH2_KNOWNHOST_TYPE_CUSTOM","","",null,null],[17,"LIBSSH2_KNOWNHOST_KEYENC_RAW","","",null,null],[17,"LIBSSH2_KNOWNHOST_KEYENC_BASE64","","",null,null],[17,"LIBSSH2_KNOWNHOST_KEY_RSA1","","",null,null],[17,"LIBSSH2_KNOWNHOST_KEY_SSHRSA","","",null,null],[17,"LIBSSH2_KNOWNHOST_KEY_SSHDSS","","",null,null],[17,"LIBSSH2_KNOWNHOST_KEY_UNKNOWN","","",null,null],[17,"LIBSSH2_FXF_READ","","",null,null],[17,"LIBSSH2_FXF_WRITE","","",null,null],[17,"LIBSSH2_FXF_APPEND","","",null,null],[17,"LIBSSH2_FXF_CREAT","","",null,null],[17,"LIBSSH2_FXF_TRUNC","","",null,null],[17,"LIBSSH2_FXF_EXCL","","",null,null],[17,"LIBSSH2_SFTP_OPENFILE","","",null,null],[17,"LIBSSH2_SFTP_OPENDIR","","",null,null],[17,"LIBSSH2_SFTP_ATTR_SIZE","","",null,null],[17,"LIBSSH2_SFTP_ATTR_UIDGID","","",null,null],[17,"LIBSSH2_SFTP_ATTR_PERMISSIONS","","",null,null],[17,"LIBSSH2_SFTP_ATTR_ACMODTIME","","",null,null],[17,"LIBSSH2_SFTP_ATTR_EXTENDED","","",null,null],[17,"LIBSSH2_SFTP_STAT","","",null,null],[17,"LIBSSH2_SFTP_LSTAT","","",null,null],[17,"LIBSSH2_SFTP_SETSTAT","","",null,null],[17,"LIBSSH2_SFTP_SYMLINK","","",null,null],[17,"LIBSSH2_SFTP_READLINK","","",null,null],[17,"LIBSSH2_SFTP_REALPATH","","",null,null],[17,"LIBSSH2_SFTP_RENAME_OVERWRITE","","",null,null],[17,"LIBSSH2_SFTP_RENAME_ATOMIC","","",null,null],[17,"LIBSSH2_SFTP_RENAME_NATIVE","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"libssh2_sftp_attributes"}],"output":{"name":"libssh2_sftp_attributes"}}],[11,"clone","","",3,{"inputs":[{"name":"libssh2_sftp_statvfs"}],"output":{"name":"libssh2_sftp_statvfs"}}]],"paths":[[3,"libssh2_agent_publickey"],[3,"libssh2_knownhost"],[3,"LIBSSH2_SFTP_ATTRIBUTES"],[3,"LIBSSH2_SFTP_STATVFS"]]};
searchIndex['openssl_sys'] = {"items":[[0,"","openssl_sys","",null,null],[3,"EVP_MD_CTX","","",null,null],[3,"HMAC_CTX","","",null,null],[3,"X509V3_CTX","","",null,null],[3,"BIGNUM","","",null,null],[12,"d","","",0,null],[12,"top","","",0,null],[12,"dmax","","",0,null],[12,"neg","","",0,null],[12,"flags","","",0,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"SSL_CTX_set_options","","",null,null],[5,"SSL_CTX_get_options","","",null,null],[5,"SSL_CTX_clear_options","","",null,null],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"CRYPTO_num_locks","","",null,null],[5,"CRYPTO_set_locking_callback","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_load_crypto_strings","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_MD_CTX_create","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_MD_CTX_destroy","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"HMAC_CTX_init","","",null,null],[5,"HMAC_CTX_cleanup","","",null,null],[5,"HMAC_CTX_copy","","",null,null],[5,"HMAC_Init_ex","","",null,null],[5,"HMAC_Final","","",null,null],[5,"HMAC_Update","","",null,null],[5,"HMAC_Init_ex_shim","","Deprecated - use the non \"_shim\" version",null,null],[5,"HMAC_Final_shim","","Deprecated - use the non \"_shim\" version",null,null],[5,"HMAC_Update_shim","","Deprecated - use the non \"_shim\" version",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RSA_generate_key","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"SSL_library_init","","",null,null],[5,"SSL_load_error_strings","","",null,null],[5,"SSLv3_method","","",null,null],[5,"TLSv1_method","","",null,null],[5,"SSLv23_method","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_get_ex_new_index","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"SSL_CTX_ctrl","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_notAfter","","",null,null],[5,"X509_set_notBefore","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509V3_EXT_conf_nid","","",null,null],[5,"X509V3_EXT_conf","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"BIO_eof","","",null,null],[5,"BIO_set_mem_eof_return","","",null,null],[5,"SSL_CTX_set_options_shim","","",null,null],[5,"SSL_CTX_get_options_shim","","",null,null],[5,"SSL_CTX_clear_options_shim","","",null,null],[5,"SSL_CTX_add_extra_chain_cert","","",null,null],[5,"SSL_CTX_set_read_ahead","","",null,null],[5,"SSL_set_tlsext_host_name","","",null,null],[5,"X509_get_extensions","","",null,null],[0,"probe","","",null,null],[3,"ProbeResult","openssl_sys::probe","",null,null],[12,"cert_file","","",1,null],[12,"cert_dir","","",1,null],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"init_ssl_cert_env_vars","","",null,{"inputs":[],"output":null}],[5,"probe","","",null,{"inputs":[],"output":{"name":"proberesult"}}],[6,"ASN1_INTEGER","openssl_sys","",null,null],[6,"ASN1_STRING","","",null,null],[6,"ASN1_TIME","","",null,null],[6,"BIO","","",null,null],[6,"BIO_METHOD","","",null,null],[6,"BN_CTX","","",null,null],[6,"COMP_METHOD","","",null,null],[6,"CRYPTO_EX_DATA","","",null,null],[6,"ENGINE","","",null,null],[6,"EVP_CIPHER","","",null,null],[6,"EVP_CIPHER_CTX","","",null,null],[6,"EVP_MD","","",null,null],[6,"EVP_PKEY","","",null,null],[6,"EVP_PKEY_CTX","","",null,null],[6,"RSA","","",null,null],[6,"SSL","","",null,null],[6,"SSL_CTX","","",null,null],[6,"SSL_METHOD","","",null,null],[6,"X509","","",null,null],[6,"X509_CRL","","",null,null],[6,"X509_EXTENSION","","",null,null],[6,"X509_NAME","","",null,null],[6,"X509_NAME_ENTRY","","",null,null],[6,"X509_REQ","","",null,null],[6,"X509_STORE_CTX","","",null,null],[6,"stack_st_X509_EXTENSION","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_key_usage","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"SSL_CTRL_OPTIONS","","",null,null],[17,"SSL_CTRL_CLEAR_OPTIONS","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLv2","","",null,null],[17,"SSL_OP_NO_SSLv3","","",null,null],[17,"SSL_OP_NO_DTLSv1","","",null,null],[17,"SSL_OP_NO_TLSv1","","",null,null],[17,"SSL_OP_NO_DTLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_1","","",null,null],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",null,null],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",null,null],[17,"SSL_OP_PKCS1_CHECK_1","","",null,null],[17,"SSL_OP_PKCS1_CHECK_2","","",null,null],[17,"SSL_OP_EPHEMERAL_RSA","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_OK","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"evp_md_ctx"}],"output":{"name":"evp_md_ctx"}}],[11,"clone","","",3,{"inputs":[{"name":"hmac_ctx"}],"output":{"name":"hmac_ctx"}}],[11,"clone","","",4,{"inputs":[{"name":"x509v3_ctx"}],"output":{"name":"x509v3_ctx"}}],[11,"clone","","",0,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}]],"paths":[[3,"BIGNUM"],[3,"ProbeResult"],[3,"EVP_MD_CTX"],[3,"HMAC_CTX"],[3,"X509V3_CTX"]]};
searchIndex['schemamama_rusqlite'] = {"items":[[0,"","schemamama_rusqlite","",null,null],[3,"SqliteAdapter","","An adapter that allows its migrations to act upon PostgreSQL connection transactions.",null,null],[8,"SqliteMigration","","A migration to be used within a PostgreSQL connection.",null,null],[11,"up","","Called when this migration is to be executed. This function has an empty body by default,\nso its implementation is optional.",0,{"inputs":[{"name":"sqlitemigration"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"down","","Called when this migration is to be reversed. This function has an empty body by default,\nso its implementation is optional.",0,{"inputs":[{"name":"sqlitemigration"},{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"new","","Create a new migrator tied to a PostgreSQL connection.",1,{"inputs":[{"name":"sqliteadapter"},{"name":"sqliteconnection"}],"output":{"name":"sqliteadapter"}}],[11,"setup_schema","","Create the tables Schemamama requires to keep track of schema state. If the tables already\nexist, this function has no operation.",1,{"inputs":[{"name":"sqliteadapter"}],"output":null}],[11,"current_version","","Panics if `setup_schema` hasn't previously been called or if the query otherwise fails.",1,{"inputs":[{"name":"sqliteadapter"}],"output":{"name":"option"}}],[11,"migrated_versions","","Panics if `setup_schema` hasn't previously been called or if the query otherwise fails.",1,{"inputs":[{"name":"sqliteadapter"}],"output":{"name":"btreeset"}}],[11,"apply_migration","","Panics if `setup_schema` hasn't previously been called or if the migration otherwise fails.",1,{"inputs":[{"name":"sqliteadapter"},{"name":"sqlitemigration"}],"output":null}],[11,"revert_migration","","Panics if `setup_schema` hasn't previously been called or if the migration otherwise fails.",1,{"inputs":[{"name":"sqliteadapter"},{"name":"sqlitemigration"}],"output":null}]],"paths":[[8,"SqliteMigration"],[3,"SqliteAdapter"]]};
searchIndex['solicit'] = {"items":[[0,"","solicit","",null,null],[0,"http","","The module implements the framing layer of HTTP/2 and exposes an API for using it.",null,null],[3,"Response","solicit::http","A struct representing the full raw response received on an HTTP/2 connection.",null,null],[12,"stream_id","","The ID of the stream to which the response is associated. HTTP/1.1 does\nnot really have an equivalent to this.",0,null],[12,"headers","","Exposes *all* the raw response headers, including the meta-headers.\n(For now the only meta header allowed in HTTP/2 responses is the\n`:status`.)",0,null],[12,"body","","The full body of the response as an uninterpreted sequence of bytes.",0,null],[3,"Request","","A struct representing a full HTTP/2 request, along with the full body, as a\nsequence of bytes.",null,null],[12,"stream_id","","",1,null],[12,"headers","","",1,null],[12,"body","","",1,null],[4,"HttpError","","An enum representing errors that can arise when performing operations\ninvolving an HTTP/2 connection.",null,null],[13,"IoError","","",2,null],[13,"InvalidFrame","","",2,null],[13,"CompressionError","","",2,null],[13,"UnknownStreamId","","",2,null],[13,"UnableToConnect","","",2,null],[13,"MalformedResponse","","",2,null],[13,"Other","","",2,null],[4,"HttpScheme","","An enum representing the two possible HTTP schemes.",null,null],[13,"Http","","The variant corresponding to `http://`",3,null],[13,"Https","","The variant corresponding to `https://`",3,null],[0,"frame","","The module contains the implementation of HTTP/2 frames.",null,null],[3,"RawFrame","solicit::http::frame","A struct that defines the format of the raw HTTP/2 frame, i.e. the frame\nas it is read from the wire.",null,null],[5,"unpack_header","","Deconstructs a `FrameHeader` into its corresponding 4 components,\nrepresented as a 4-tuple: `(length, frame_type, flags, stream_id)`.",null,{"inputs":[{"name":"frameheaderbuffer"}],"output":{"name":"frameheader"}}],[5,"pack_header","","Constructs a buffer of 9 bytes that represents the given `FrameHeader`.",null,{"inputs":[{"name":"frameheader"}],"output":{"name":"frameheaderbuffer"}}],[0,"data","","The module contains the implementation of the `DATA` frame and associated flags.",null,null],[3,"DataFrame","solicit::http::frame::data","A struct representing the DATA frames of HTTP/2, as defined in the HTTP/2\nspec, section 6.1.",null,null],[12,"data","","The data found in the frame as an opaque byte sequence. It never\nincludes padding bytes.",4,null],[4,"DataFlag","","An enum representing the flags that a `DataFrame` can have.\nThe integer representation associated to each variant is that flag's\nbitmask.",null,null],[13,"EndStream","","",5,null],[13,"Padded","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"dataflag"}],"output":{"name":"dataflag"}}],[11,"eq","","",5,{"inputs":[{"name":"dataflag"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"dataflag"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",5,{"inputs":[{"name":"dataflag"}],"output":{"name":"u8"}}],[11,"eq","","",4,{"inputs":[{"name":"dataframe"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"dataframe"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"dataframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"dataframe"}}],[11,"new","","Creates a new empty `DataFrame`, associated to the stream with the\ngiven ID.",4,{"inputs":[{"name":"dataframe"},{"name":"streamid"}],"output":{"name":"dataframe"}}],[11,"is_padded","","Returns `true` if the DATA frame is padded, otherwise false.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"set_padding","","Sets the number of bytes that should be used as padding for this\nframe.",4,{"inputs":[{"name":"dataframe"},{"name":"u8"}],"output":null}],[11,"from_raw","","Creates a new `DataFrame` from the given `RawFrame` (i.e. header and\npayload), if possible.  Returns `None` if a valid `DataFrame` cannot be\nconstructed from the given `RawFrame`.",4,{"inputs":[{"name":"dataframe"},{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",4,{"inputs":[{"name":"dataframe"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"set_flag","","Sets the given flag for the frame.",4,{"inputs":[{"name":"dataframe"},{"name":"dataflag"}],"output":null}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the frame.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"frameheader"}}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"vec"}}],[0,"headers","solicit::http::frame","The module contains the implementation of the `HEADERS` frame and associated flags.",null,null],[3,"StreamDependency","solicit::http::frame::headers","The struct represents the dependency information that can be attached to\na stream and sent within a HEADERS frame (one with the Priority flag set).",null,null],[12,"stream_id","","The ID of the stream that a particular stream depends on",6,null],[12,"weight","","The weight for the stream. The value exposed (and set) here is always\nin the range [0, 255], instead of [1, 256] \\(as defined in section 5.3.2.)\nso that the value fits into a `u8`.",6,null],[12,"is_exclusive","","A flag indicating whether the stream dependency is exclusive.",6,null],[3,"HeadersFrame","","A struct representing the HEADERS frames of HTTP/2, as defined in the\nHTTP/2 spec, section 6.2.",null,null],[12,"header_fragment","","The header fragment bytes stored within the frame.",7,null],[12,"stream_id","","The ID of the stream with which this frame is associated",7,null],[12,"stream_dep","","The stream dependency information, if any.",7,null],[12,"padding_len","","The length of the padding, if any.",7,null],[4,"HeadersFlag","","An enum representing the flags that a `HeadersFrame` can have.\nThe integer representation associated to each variant is that flag's\nbitmask.",null,null],[13,"EndStream","","",8,null],[13,"EndHeaders","","",8,null],[13,"Padded","","",8,null],[13,"Priority","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"headersflag"}],"output":{"name":"headersflag"}}],[11,"eq","","",8,{"inputs":[{"name":"headersflag"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"headersflag"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"headersflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",8,{"inputs":[{"name":"headersflag"}],"output":{"name":"u8"}}],[11,"eq","","",6,{"inputs":[{"name":"streamdependency"},{"name":"streamdependency"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"streamdependency"},{"name":"streamdependency"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"streamdependency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"streamdependency"}],"output":{"name":"streamdependency"}}],[11,"new","","Creates a new `StreamDependency` with the given stream ID, weight, and\nexclusivity.",6,{"inputs":[{"name":"streamdependency"},{"name":"streamid"},{"name":"u8"},{"name":"bool"}],"output":{"name":"streamdependency"}}],[11,"parse","","Parses the first 5 bytes in the buffer as a `StreamDependency`.\n(Each 5-byte sequence is always decodable into a stream dependency\nstructure).",6,null],[11,"serialize","","Serializes the `StreamDependency` into a 5-byte buffer representing the\ndependency description, as described in section 6.2. of the HTTP/2\nspec:",6,null],[11,"eq","","",7,{"inputs":[{"name":"headersframe"},{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"headersframe"},{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"headersframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"headersframe"}}],[11,"new","","Creates a new `HeadersFrame` with the given header fragment and stream\nID. No padding, no stream dependency, and no flags are set.",7,{"inputs":[{"name":"headersframe"},{"name":"vec"},{"name":"streamid"}],"output":{"name":"headersframe"}}],[11,"with_dependency","","Creates a new `HeadersFrame` with the given header fragment, stream ID\nand stream dependency information. No padding and no flags are set.",7,{"inputs":[{"name":"headersframe"},{"name":"vec"},{"name":"streamid"},{"name":"streamdependency"}],"output":{"name":"headersframe"}}],[11,"is_headers_end","","Returns whether this frame ends the headers. If not, there MUST be a\nnumber of follow up CONTINUATION frames that send the rest of the\nheader data.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"set_padding","","Sets the padding length for the frame, as well as the corresponding\nPadded flag.",7,{"inputs":[{"name":"headersframe"},{"name":"u8"}],"output":null}],[11,"from_raw","","Creates a new `HeadersFrame` with the given `RawFrame` (i.e. header and\npayload), if possible.",7,{"inputs":[{"name":"headersframe"},{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",7,{"inputs":[{"name":"headersframe"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"frameheader"}}],[11,"set_flag","","Sets the given flag for the frame.",7,{"inputs":[{"name":"headersframe"},{"name":"headersflag"}],"output":null}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"vec"}}],[0,"settings","solicit::http::frame","The module contains the implementation of the `SETTINGS` frame and associated flags.",null,null],[3,"SettingsFrame","solicit::http::frame::settings","A struct representing the SETTINGS frames of HTTP/2, as defined in the\nHTTP/2 spec, section 6.5.",null,null],[12,"settings","","Contains all the settings that are currently set in the frame. It is\nsafe to access this field (to read, add, or remove settings), even\nthough a helper method `add_setting` exists.",9,null],[4,"HttpSetting","","An enum that lists all valid settings that can be sent in a SETTINGS\nframe.",null,null],[13,"HeaderTableSize","","",10,null],[13,"EnablePush","","",10,null],[13,"MaxConcurrentStreams","","",10,null],[13,"InitialWindowSize","","",10,null],[13,"MaxFrameSize","","",10,null],[13,"MaxHeaderListSize","","",10,null],[4,"SettingsFlag","","An enum representing the flags that a `SettingsFrame` can have.\nThe integer representation associated to each variant is that flag's\nbitmask.",null,null],[13,"Ack","","",11,null],[11,"clone","","",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"httpsetting"}}],[11,"eq","","",10,{"inputs":[{"name":"httpsetting"},{"name":"httpsetting"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"httpsetting"},{"name":"httpsetting"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"httpsetting"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_id","","Creates a new `HttpSetting` with the correct variant corresponding to\nthe given setting id, based on the settings IDs defined in section\n6.5.2.",10,{"inputs":[{"name":"httpsetting"},{"name":"u16"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_id","","Returns the setting ID as an unsigned 16 bit integer, as defined in\nsection 6.5.2.",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"u16"}}],[11,"get_val","","Gets the setting value by unpacking it from the wrapped `u32`.",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"u32"}}],[11,"clone","","",11,{"inputs":[{"name":"settingsflag"}],"output":{"name":"settingsflag"}}],[11,"eq","","",11,{"inputs":[{"name":"settingsflag"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"settingsflag"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"settingsflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",11,{"inputs":[{"name":"settingsflag"}],"output":{"name":"u8"}}],[11,"eq","","",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"settingsframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"new","","Creates a new `SettingsFrame`",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"new_ack","","A convenience constructor that returns a `SettingsFrame` with the ACK\nflag already set and no settings.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"add_setting","","Adds the given setting to the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"httpsetting"}],"output":null}],[11,"set_ack","","Sets the ACK flag for the frame. This method is just a convenience\nmethod for calling `frame.set_flag(SettingsFlag::Ack)`.",9,{"inputs":[{"name":"settingsframe"}],"output":null}],[11,"is_ack","","Checks whether the `SettingsFrame` has an ACK attached to it.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"from_raw","","Creates a new `SettingsFrame` with the given `RawFrame` (i.e. header and\npayload), if possible.",9,{"inputs":[{"name":"settingsframe"},{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"frameheader"}}],[11,"set_flag","","Sets the given flag for the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsflag"}],"output":null}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"vec"}}],[6,"FrameHeaderBuffer","solicit::http::frame","An alias for the 9-byte buffer that each HTTP/2 frame header must be stored\nin.",null,null],[6,"FrameHeader","","An alias for the 4-tuple representing the components of each HTTP/2 frame\nheader.",null,null],[8,"Flag","","A trait that all HTTP/2 frame header flags need to implement.",null,null],[10,"bitmask","","Returns a bit mask that represents the flag.",12,{"inputs":[{"name":"flag"}],"output":{"name":"u8"}}],[8,"Frame","","A trait that all HTTP/2 frame structs need to implement.",null,null],[16,"FlagType","","The type that represents the flags that the particular `Frame` can take.\nThis makes sure that only valid `Flag`s are used with each `Frame`.",13,null],[10,"from_raw","","Creates a new `Frame` from the given `RawFrame` (i.e. header and\npayload), if possible.",13,{"inputs":[{"name":"frame"},{"name":"rawframe"}],"output":{"name":"option"}}],[10,"is_set","","Tests if the given flag is set for the frame.",13,{"inputs":[{"name":"frame"},{"name":"flagtype"}],"output":{"name":"bool"}}],[10,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated",13,{"inputs":[{"name":"frame"}],"output":{"name":"streamid"}}],[10,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",13,{"inputs":[{"name":"frame"}],"output":{"name":"frameheader"}}],[10,"set_flag","","Sets the given flag for the frame.",13,{"inputs":[{"name":"frame"},{"name":"flagtype"}],"output":null}],[10,"serialize","","Returns a `Vec` with the serialized representation of the frame.",13,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"eq","","",14,{"inputs":[{"name":"rawframe"},{"name":"rawframe"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"rawframe"},{"name":"rawframe"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"rawframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"rawframe"}}],[11,"new","","Creates a new `RawFrame` with the given `FrameHeader`. The payload is\nleft empty.",14,{"inputs":[{"name":"rawframe"},{"name":"frameheader"}],"output":{"name":"rawframe"}}],[11,"with_payload","","Creates a new `RawFrame` with the given header and payload.\nDoes not do any validation to determine whether the frame is in a correct\nstate as constructed.",14,{"inputs":[{"name":"rawframe"},{"name":"frameheader"},{"name":"vec"}],"output":{"name":"rawframe"}}],[11,"from_buf","","Creates a new `RawFrame` by parsing the given buffer.",14,null],[11,"serialize","","Returns a `Vec` of bytes representing the serialized (on-the-wire)\nrepresentation of this raw frame.",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"vec"}}],[11,"header","","Returns a `FrameHeader` instance corresponding to the headers of the\n`RawFrame`.",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"frameheader"}}],[11,"payload","","Returns a slice representing the payload of the `RawFrame`.",14,null],[11,"into","","",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"vec"}}],[11,"from","","",14,{"inputs":[{"name":"rawframe"},{"name":"vec"}],"output":{"name":"rawframe"}}],[0,"transport","solicit::http","The module contains implementations of the transport layer functionality\nthat HTTP/2 requires. It exposes APIs that allow the HTTP/2 connection to\nuse the transport layer without requiring it to know which exact\nimplementation they are using (e.g. a clear-text TCP connection, a TLS\nprotected connection, or even a mock implementation).",null,null],[8,"TransportStream","solicit::http::transport","A trait that any struct that wants to provide the transport layer for\nHTTP/2 needs to implement.",null,null],[11,"read_exact","","A convenience method that performs as many `read` calls on the\nunderlying `Read` implementation as it takes to fill the given buffer.",15,null],[10,"try_split","","Attempts to split the `TransportStream` instance into a new independently\nowned handle to the same underlying stream.",15,{"inputs":[{"name":"transportstream"}],"output":{"name":"result"}}],[10,"close","","Attempts to shutdown both ends of the transport stream.",15,{"inputs":[{"name":"transportstream"}],"output":{"name":"result"}}],[11,"try_split","std::net::tcp","",16,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"close","","",16,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[0,"connection","solicit::http","The module contains the implementation of an HTTP/2 connection.",null,null],[3,"HttpConnection","solicit::http::connection","The struct implements the HTTP/2 connection level logic.",null,null],[12,"receiver","","The instance handling the reading of frames.",17,null],[12,"sender","","The instance handling the writing of frames.",17,null],[12,"scheme","","The scheme of the connection",17,null],[3,"DataChunk","","The struct represents a chunk of data that should be sent to the peer on a particular stream.",null,null],[12,"data","","The data that should be sent.",18,null],[12,"stream_id","","The ID of the stream on which the data should be sent.",18,null],[12,"end_stream","","Whether the data chunk will also end the stream.",18,null],[4,"HttpFrame","","An enum representing all frame variants that can be returned by an\n`HttpConnection`.",null,null],[13,"DataFrame","","",19,null],[13,"HeadersFrame","","",19,null],[13,"SettingsFrame","","",19,null],[13,"UnknownFrame","","",19,null],[4,"SendStatus","","The enum represents the success status of the operation of sending a next data chunk on an\nHTTP/2 connection.",null,null],[13,"Sent","","Indicates that a DATA frame was successfully sent",20,null],[13,"Nothing","","Indicates that nothing was sent, but that no errors occurred.",20,null],[4,"EndStream","","An enum indicating whether the `HttpConnection` send operation should end the stream.",null,null],[13,"Yes","","The stream should be closed",21,null],[13,"No","","The stream should still be kept open",21,null],[8,"SendFrame","","A trait that should be implemented by types that can provide the functionality\nof sending HTTP/2 frames.",null,null],[10,"send_raw_frame","","Sends the given raw frame.",22,{"inputs":[{"name":"sendframe"},{"name":"rawframe"}],"output":{"name":"httpresult"}}],[11,"send_frame","","Sends the given concrete frame.",22,{"inputs":[{"name":"sendframe"},{"name":"f"}],"output":{"name":"httpresult"}}],[8,"ReceiveFrame","","A trait that should be implemented by types that can provide the functionality\nof receiving HTTP/2 frames.",null,null],[10,"recv_frame","","Return a new `HttpFrame` instance. Unknown frames can be wrapped in the\n`HttpFrame::UnknownFrame` variant (i.e. their `RawFrame` representation).",23,{"inputs":[{"name":"receiveframe"}],"output":{"name":"httpresult"}}],[11,"eq","","",19,{"inputs":[{"name":"httpframe"},{"name":"httpframe"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"httpframe"},{"name":"httpframe"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"httpframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"httpframe"}],"output":{"name":"httpframe"}}],[11,"from_raw","","",19,{"inputs":[{"name":"httpframe"},{"name":"rawframe"}],"output":{"name":"httpresult"}}],[11,"fmt","","",20,{"inputs":[{"name":"sendstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"sendstatus"},{"name":"sendstatus"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"sendstatus"},{"name":"sendstatus"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"sendstatus"}],"output":{"name":"sendstatus"}}],[11,"new","","Creates a new `DataChunk`.",18,{"inputs":[{"name":"datachunk"},{"name":"cow"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"datachunk"}}],[11,"new_borrowed","","Creates a new `DataChunk` from a borrowed slice. This method should become obsolete if we\ncan take an `Into<Cow<_, _>>` without using unstable features.",18,{"inputs":[{"name":"datachunk"},{"name":"d"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"datachunk"}}],[11,"fmt","","",21,{"inputs":[{"name":"endstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"endstream"},{"name":"endstream"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"endstream"},{"name":"endstream"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"endstream"}],"output":{"name":"endstream"}}],[11,"new","","Creates a new `HttpConnection` that will use the given sender and receiver instances\nfor writing and reading frames, respectively.",17,{"inputs":[{"name":"httpconnection"},{"name":"s"},{"name":"r"},{"name":"httpscheme"}],"output":{"name":"httpconnection"}}],[11,"with_stream","","Creates a new `HttpConnection` that will use the given stream as its\nunderlying transport layer.",17,{"inputs":[{"name":"httpconnection"},{"name":"ts"},{"name":"httpscheme"}],"output":{"name":"httpconnection"}}],[11,"send_headers","","A helper function that inserts the frames required to send the given headers onto the\n`SendFrame` stream.",17,{"inputs":[{"name":"httpconnection"},{"name":"h"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"httpresult"}}],[11,"send_data","","A helper function that inserts a frame representing the given data into the `SendFrame`\nstream.",17,{"inputs":[{"name":"httpconnection"},{"name":"datachunk"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Sends the chunk of data provided by the given `DataPrioritizer`.",17,{"inputs":[{"name":"httpconnection"},{"name":"p"}],"output":{"name":"httpresult"}}],[11,"expect_settings","","The method processes the next incoming frame, expecting it to be a SETTINGS frame.\nAdditionally, the frame cannot be an ACK settings frame, but rather it should contain the\npeer's settings.",17,{"inputs":[{"name":"httpconnection"},{"name":"sess"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Handles the next frame incoming on the `ReceiveFrame` instance.",17,{"inputs":[{"name":"httpconnection"},{"name":"sess"}],"output":{"name":"httpresult"}}],[0,"session","solicit::http","Defines the interface for the session-level management of HTTP/2\ncommunication. This is effectively an API that allows hooking into an\nHTTP/2 connection in order to handle events arising on the connection.",null,null],[3,"StreamIter","solicit::http::session","A newtype for an iterator over `Stream`s saved in a `SessionState`.",null,null],[3,"DefaultSessionState","","An implementation of the `SessionState` trait that tracks the active streams in a `HashMap`,\nmapping the stream ID to the concrete `Stream` instance.",null,null],[3,"DefaultStream","","An implementation of the `Stream` trait that saves all headers and data\nin memory.",null,null],[12,"stream_id","","The ID of the stream",24,null],[12,"headers","","The headers associated with the stream (i.e. the response headers)",24,null],[12,"body","","The body of the stream (i.e. the response body)",24,null],[12,"state","","The current stream state.",24,null],[4,"StreamState","","The enum represents all the states that an HTTP/2 stream can be found in.",null,null],[13,"Idle","","",25,null],[13,"ReservedLocal","","",25,null],[13,"ReservedRemote","","",25,null],[13,"Open","","",25,null],[13,"HalfClosedRemote","","",25,null],[13,"HalfClosedLocal","","",25,null],[13,"Closed","","",25,null],[4,"StreamDataError","","The enum represents errors that can be returned from the `Stream::get_data_chunk` method.",null,null],[13,"Closed","","Indicates that the stream cannot provide any data, since it is closed for further writes\nfrom the peer's side.",26,null],[13,"Other","","A different error while trying to obtain the data chunk. Wraps a boxed `Error` impl.",26,null],[4,"StreamDataChunk","","The enum represents the successful completion of the `Stream::get_data_chunk` method.",null,null],[13,"Chunk","","A data chunk of the given size, after which more chunks can follow.",27,null],[13,"Last","","The chunk was the last one that the stream will ever write.",27,null],[13,"Unavailable","","No data currently available, but the stream isn't closed yet",27,null],[8,"Session","","A trait that defines the interface between an `HttpConnection` and the higher-levels that use\nit. Essentially, it allows the `HttpConnection` to pass information onto those higher levels\nthrough a well-defined interface.",null,null],[10,"new_data_chunk","","Notifies the `Session` that a new data chunk has arrived on the\nconnection for a particular stream. Only the raw data is passed\nto the callback (all padding is already discarded by the connection).",28,null],[10,"new_headers","","Notifies the `Session` that headers have arrived for a particular\nstream. The given list of headers is already decoded by the connection.",28,{"inputs":[{"name":"session"},{"name":"streamid"},{"name":"vec"}],"output":null}],[10,"end_of_stream","","Notifies the `Session` that a particular stream got closed by the peer.",28,{"inputs":[{"name":"session"},{"name":"streamid"}],"output":null}],[8,"SessionState","","A trait defining a set of methods for accessing and influencing an HTTP/2 session's state.",null,null],[16,"Stream","","The type of the `Stream` that the `SessionState` manages.",29,null],[10,"insert_stream","","Inserts the given `Stream` into the session's state, starting to track it.",29,{"inputs":[{"name":"sessionstate"},{"name":"stream"}],"output":null}],[10,"get_stream_ref","","Returns a reference to a `Stream` with the given `StreamId`, if it is found in the current\nsession.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"get_stream_mut","","Returns a mutable reference to a `Stream` with the given `StreamId`, if it is found in the\ncurrent session.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"remove_stream","","Removes the stream with the given `StreamId` from the session. If the stream was found in\nthe session, it is returned in the result.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"iter","","Returns an iterator over the streams currently found in the session.",29,{"inputs":[{"name":"sessionstate"}],"output":{"name":"streamiter"}}],[11,"get_closed","","Returns all streams that are closed and tracked by the session state.",29,{"inputs":[{"name":"sessionstate"}],"output":{"name":"vec"}}],[8,"Stream","","A trait representing a single HTTP/2 stream. An HTTP/2 connection multiplexes a number of\nstreams.",null,null],[10,"new","","Create a new stream with the given ID",30,{"inputs":[{"name":"stream"},{"name":"streamid"}],"output":{"name":"self"}}],[10,"new_data_chunk","","Handle a new data chunk that has arrived for the stream.",30,null],[10,"set_headers","","Set headers for a stream. A stream is only allowed to have one set of\nheaders.",30,{"inputs":[{"name":"stream"},{"name":"vec"}],"output":null}],[10,"set_state","","Sets the stream state to the newly provided state.",30,{"inputs":[{"name":"stream"},{"name":"streamstate"}],"output":null}],[10,"get_data_chunk","","Places the next data chunk that should be written onto the stream into the given buffer.",30,null],[10,"id","","Returns the ID of the stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"streamid"}}],[10,"state","","Returns the current state of the stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"streamstate"}}],[11,"close","","Transitions the stream state to closed. After this, the stream is considered to be closed\nfor any further reads or writes.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"close_local","","Updates the `Stream` status to indicate that it is closed locally.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"close_remote","","Updates the `Stream` status to indicate that it is closed on the remote peer's side.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"is_closed","","Returns whether the stream is closed.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"is_closed_local","","Returns whether the stream is closed locally.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"is_closed_remote","","Returns whether the remote peer has closed the stream. This includes a fully closed stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"next","","",31,{"inputs":[{"name":"streamiter"}],"output":{"name":"option"}}],[11,"new","","Creates a new `DefaultSessionState` with no known streams.",32,{"inputs":[{"name":"defaultsessionstate"}],"output":{"name":"defaultsessionstate"}}],[11,"insert_stream","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"stream"}],"output":null}],[11,"get_stream_ref","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"get_stream_mut","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"remove_stream","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"iter","","",32,{"inputs":[{"name":"defaultsessionstate"}],"output":{"name":"streamiter"}}],[11,"fmt","","",25,{"inputs":[{"name":"streamstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"streamstate"},{"name":"streamstate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"streamstate"},{"name":"streamstate"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"streamstate"}],"output":{"name":"streamstate"}}],[11,"fmt","","",26,{"inputs":[{"name":"streamdataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"streamdataerror"},{"name":"e"}],"output":{"name":"streamdataerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"streamdatachunk"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"streamdatachunk"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"streamdatachunk"}],"output":{"name":"streamdatachunk"}}],[11,"clone","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"defaultstream"}}],[11,"new","","Create a new `DefaultStream` with the given ID.",24,{"inputs":[{"name":"defaultstream"},{"name":"streamid"}],"output":{"name":"defaultstream"}}],[11,"set_full_data","","Sets the outgoing data of the stream to the given `Vec`.",24,{"inputs":[{"name":"defaultstream"},{"name":"vec"}],"output":null}],[11,"new","","",24,{"inputs":[{"name":"defaultstream"},{"name":"streamid"}],"output":{"name":"defaultstream"}}],[11,"new_data_chunk","","",24,null],[11,"set_headers","","",24,{"inputs":[{"name":"defaultstream"},{"name":"vec"}],"output":null}],[11,"set_state","","",24,{"inputs":[{"name":"defaultstream"},{"name":"streamstate"}],"output":null}],[11,"id","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"streamid"}}],[11,"state","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"streamstate"}}],[11,"get_data_chunk","","",24,null],[0,"priority","solicit::http","The module exposes an API for defining data prioritization strategies.",null,null],[3,"SimplePrioritizer","solicit::http::priority","An implementation of the `DataPrioritizer` trait that is based on finding the first stream from\nthe given `SessionState` instance that can send data and returning this chunk.",null,null],[8,"DataPrioritizer","","A trait that types that want to provide data to an HTTP/2 connection need to implement.",null,null],[10,"get_next_chunk","","Returns the next `DataChunk` that should be sent on the HTTP/2 connection. `None` indicates\nthat currently there was no data that could be sent at that point.",33,{"inputs":[{"name":"dataprioritizer"}],"output":{"name":"httpresult"}}],[11,"new","","Creates a new `SimplePrioritizer` that will use the given state to find stream data that\nshould be sent and use the given buffer to hold the data of the returned chunk.",34,null],[11,"get_next_chunk","","",34,{"inputs":[{"name":"simpleprioritizer"}],"output":{"name":"httpresult"}}],[0,"client","solicit::http","The module contains a number of reusable components for implementing the client side of an\nHTTP/2 connection.",null,null],[3,"ClientStream","solicit::http::client","A convenience wrapper type that represents an established client network transport stream.\nIt wraps the stream itself, the scheme of the protocol to be used, and the remote\nhost name.",null,null],[3,"CleartextConnector","","A struct that establishes a cleartext TCP connection that can be used by an HTTP/2\nconnection. Defaults to using port 80.",null,null],[12,"host","","The host to which the connection should be established",35,null],[12,"port","","The port on which the connection should be established",35,null],[3,"CleartextConnectError","","A newtype wrapping the `io::Error`, as it occurs when attempting to\nestablish an HTTP/2 connection over cleartext TCP (with prior knowledge).",null,null],[3,"RequestStream","","A struct representing a request stream. It provides the headers that are to be sent when\ninitiating the request, as well as a `Stream` instance that handles the received response and\nprovides the request body.",null,null],[12,"headers","","The list of headers that will be sent with the request.",36,null],[12,"stream","","The underlying `Stream` instance, which will handle the response, as well as optionally\nprovide the body of the request.",36,null],[3,"ClientConnection","","The struct extends the `HttpConnection` API with client-specific methods (such as\n`start_request`) and wires the `HttpConnection` to the client `Session` callbacks.",null,null],[12,"state","","The state of the session associated to this client connection. Maintains the status of the\nconnection streams.",37,null],[3,"ClientSession","","An implementation of the `Session` trait specific to handling client HTTP/2 connections.",null,null],[5,"write_preface","","Writes the client preface to the underlying HTTP/2 connection.",null,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[8,"HttpConnectError","","A marker trait for errors raised by attempting to establish an HTTP/2\nconnection.",null,null],[8,"HttpConnect","","A trait that can be implemented by structs that want to provide the\nfunctionality of establishing network connections for use by HTTP/2 connections.",null,null],[16,"Stream","","The type of the underlying transport stream that the `HttpConnection`s\nproduced by this `HttpConnect` implementation will be based on.",38,null],[16,"Err","","The type of the error that can be produced by trying to establish the\nconnection (i.e. calling the `connect` method).",38,null],[10,"connect","","Establishes a network connection that can be used by HTTP/2 connections.",38,{"inputs":[{"name":"httpconnect"}],"output":{"name":"result"}}],[11,"from","solicit::http","",2,{"inputs":[{"name":"httperror"},{"name":"e"}],"output":{"name":"httperror"}}],[11,"new","solicit::http::client","Creates a new `CleartextConnector` that will attempt to establish a connection to the given\nhost on port 80.",35,{"inputs":[{"name":"cleartextconnector"},{"name":"str"}],"output":{"name":"cleartextconnector"}}],[11,"with_port","","Creates a new `CleartextConnector` that will attempt to establish a connection to the given\nhost on the given port.",35,{"inputs":[{"name":"cleartextconnector"},{"name":"str"},{"name":"u16"}],"output":{"name":"cleartextconnector"}}],[11,"fmt","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"cleartextconnecterror"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"cleartextconnecterror"}],"output":{"name":"option"}}],[11,"from","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"error"}],"output":{"name":"cleartextconnecterror"}}],[11,"connect","","Establishes a cleartext TCP connection based on the host and port.\nIf it is not possible, returns an `HttpError`.",35,{"inputs":[{"name":"cleartextconnector"}],"output":{"name":"result"}}],[11,"with_connection","","Creates a new `ClientConnection` that will use the given `HttpConnection`\nfor all its underlying HTTP/2 communication.",37,{"inputs":[{"name":"clientconnection"},{"name":"httpconnection"},{"name":"state"}],"output":{"name":"clientconnection"}}],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpscheme"}}],[11,"init","","Performs the initialization of the `ClientConnection`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"start_request","","Starts a new request based on the given `RequestStream`.",37,{"inputs":[{"name":"clientconnection"},{"name":"requeststream"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session`\ninstance.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"new","","Returns a new `ClientSession` associated to the given state.",40,{"inputs":[{"name":"clientsession"},{"name":"state"}],"output":{"name":"clientsession"}}],[11,"new_data_chunk","","",40,null],[11,"new_headers","","",40,{"inputs":[{"name":"clientsession"},{"name":"streamid"},{"name":"vec"}],"output":null}],[11,"end_of_stream","","",40,{"inputs":[{"name":"clientsession"},{"name":"streamid"}],"output":null}],[0,"server","solicit::http","The module contains a number of reusable components for implementing the server side of an\nHTTP/2 connection.",null,null],[3,"ServerSession","solicit::http::server","An implementation of the `Session` trait for a server-side HTTP/2 connection.",null,null],[3,"ServerConnection","","The struct provides a more convenient API for server-related functionality of an HTTP/2\nconnection, such as sending a response back to the client.",null,null],[12,"state","","The state of the session associated to this client connection. Maintains the status of the\nconnection streams.",41,null],[11,"new","","",42,{"inputs":[{"name":"serversession"},{"name":"state"}],"output":{"name":"serversession"}}],[11,"new_data_chunk","","",42,null],[11,"new_headers","","",42,{"inputs":[{"name":"serversession"},{"name":"streamid"},{"name":"vec"}],"output":null}],[11,"end_of_stream","","",42,{"inputs":[{"name":"serversession"},{"name":"streamid"}],"output":null}],[11,"with_connection","","Creates a new `ServerConnection` that will use the given `HttpConnection` for its\nunderlying HTTP/2 communication.",41,{"inputs":[{"name":"serverconnection"},{"name":"httpconnection"},{"name":"state"}],"output":{"name":"serverconnection"}}],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpscheme"}}],[11,"init","","Initializes the `ServerConnection` by sending the server's settings and processing the\nclient's.\nIf the client does not provide a settings frame, returns an error.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session`\ninstance.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[11,"start_response","","Starts a response on the stream with the given ID by sending the given headers.",41,{"inputs":[{"name":"serverconnection"},{"name":"vec"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[6,"StreamId","solicit::http","An alias for the type that represents the ID of an HTTP/2 stream",null,null],[6,"Header","","An alias for the type that represents HTTP/2 headers. For now we only alias\nthe tuple of byte vectors instead of going with a full struct representation.",null,null],[6,"HttpResult","","A convenience `Result` type that has the `HttpError` type as the error\ntype and a generic Ok result type.",null,null],[17,"ALPN_PROTOCOLS","","A set of protocol names that the library should use to indicate that HTTP/2\nis supported during protocol negotiation (NPN or ALPN).\nWe include some of the drafts' protocol names, since there is basically no\ndifference for all intents and purposes (and some servers out there still\nonly officially advertise draft support).\nTODO: Eventually only use \"h2\".",null,null],[11,"fmt","","",2,{"inputs":[{"name":"httperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"httperror"},{"name":"error"}],"output":{"name":"httperror"}}],[11,"fmt","","",2,{"inputs":[{"name":"httperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"httperror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"httperror"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"httpscheme"},{"name":"httpscheme"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"httpscheme"},{"name":"httpscheme"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"httpscheme"}],"output":{"name":"httpscheme"}}],[11,"fmt","","",3,{"inputs":[{"name":"httpscheme"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns a byte string representing the scheme.",3,null],[11,"clone","","",0,{"inputs":[{"name":"response"}],"output":{"name":"response"}}],[11,"new","","Creates a new `Response` with all the components already provided.",0,{"inputs":[{"name":"response"},{"name":"streamid"},{"name":"vec"},{"name":"vec"}],"output":{"name":"response"}}],[11,"status_code","","Gets the response status code from the pseudo-header. If the response\ndoes not contain the response as the first pseuo-header, an error is\nreturned as such a response is malformed.",0,{"inputs":[{"name":"response"}],"output":{"name":"httpresult"}}],[11,"clone","","",1,{"inputs":[{"name":"request"}],"output":{"name":"request"}}],[0,"client","solicit","The module contains implementations of HTTP/2 clients that could be\ndirectly used to access HTTP/2 servers, i.e. send requests and read\nresponses.",null,null],[3,"SimpleClient","solicit::client","A struct implementing a simple HTTP/2 client.",null,null],[3,"Client","","A struct representing an HTTP/2 client that receives responses to its\nrequests asynchronously. Additionally, this client can be cloned and all\nclones can issue (concurrently) requests to the server, using the same\nunderlying HTTP/2 connection.",null,null],[11,"with_connection","","Create a new `SimpleClient` instance that will use the given `HttpConnection`\nto communicate to the server.",43,{"inputs":[{"name":"simpleclient"},{"name":"httpconnection"},{"name":"string"}],"output":{"name":"httpresult"}}],[11,"with_connector","","A convenience constructor that first tries to establish an HTTP/2\nconnection by using the given connector instance (an implementation of\nthe `HttpConnect` trait).",43,{"inputs":[{"name":"simpleclient"},{"name":"c"}],"output":{"name":"httpresult"}}],[11,"request","","Send a request to the server. Blocks until the entire request has been\nsent.",43,null],[11,"get_response","","Gets the response for the stream with the given ID. If a valid stream ID\nis given, it blocks until a response is received.",43,{"inputs":[{"name":"simpleclient"},{"name":"streamid"}],"output":{"name":"httpresult"}}],[11,"get","","Performs a GET request on the given path. This is a shortcut method for\ncalling `request` followed by `get_response` for the returned stream ID.",43,null],[11,"post","","Performs a POST request on the given path.",43,null],[11,"clone","","",44,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"drop","","",44,{"inputs":[{"name":"client"}],"output":null}],[11,"with_connector","","Creates a brand new HTTP/2 client. This means that a new HTTP/2\nconnection will be established behind the scenes. A thread is spawned\nto handle the connection in the background, so that the thread that\ncreates the client can use it asynchronously.",44,{"inputs":[{"name":"client"},{"name":"c"}],"output":{"name":"option"}}],[11,"request","","Issues a new request to the server.",44,null],[11,"get","","Issues a GET request to the server.",44,null],[11,"post","","Issues a POST request to the server.",44,null],[0,"server","solicit","The module contains a simple HTTP/2 server implementation.",null,null],[3,"ServerRequest","solicit::server","The struct represents a fully received request.",null,null],[12,"stream_id","","",45,null],[12,"headers","","",45,null],[12,"body","","",45,null],[3,"SimpleServer","","The struct implements a simple HTTP/2 server that allows users to register a request handler (a\ncallback taking a `ServerRequest` and returning a `Response`) which is run on all received\nrequests.",null,null],[11,"new","","Creates a new `SimpleServer` that will use the given `TransportStream` to communicate to\nthe client. Assumes that the stream is fully uninitialized -- no preface sent or read yet.",46,{"inputs":[{"name":"simpleserver"},{"name":"ts"},{"name":"h"}],"output":{"name":"httpresult"}}],[11,"handle_next","","Handles the next incoming frame, blocking to receive it if nothing is available on the\nunderlying stream.",46,{"inputs":[{"name":"simpleserver"}],"output":{"name":"httpresult"}}]],"paths":[[3,"Response"],[3,"Request"],[4,"HttpError"],[4,"HttpScheme"],[3,"DataFrame"],[4,"DataFlag"],[3,"StreamDependency"],[3,"HeadersFrame"],[4,"HeadersFlag"],[3,"SettingsFrame"],[4,"HttpSetting"],[4,"SettingsFlag"],[8,"Flag"],[8,"Frame"],[3,"RawFrame"],[8,"TransportStream"],[3,"TcpStream"],[3,"HttpConnection"],[3,"DataChunk"],[4,"HttpFrame"],[4,"SendStatus"],[4,"EndStream"],[8,"SendFrame"],[8,"ReceiveFrame"],[3,"DefaultStream"],[4,"StreamState"],[4,"StreamDataError"],[4,"StreamDataChunk"],[8,"Session"],[8,"SessionState"],[8,"Stream"],[3,"StreamIter"],[3,"DefaultSessionState"],[8,"DataPrioritizer"],[3,"SimplePrioritizer"],[3,"CleartextConnector"],[3,"RequestStream"],[3,"ClientConnection"],[8,"HttpConnect"],[3,"CleartextConnectError"],[3,"ClientSession"],[3,"ServerConnection"],[3,"ServerSession"],[3,"SimpleClient"],[3,"Client"],[3,"ServerRequest"],[3,"SimpleServer"]]};
searchIndex['rusqlite'] = {"items":[[0,"","rusqlite","Rusqlite is an ergonomic wrapper for using SQLite from Rust. It attempts to expose\nan interface similar to [rust-postgres](https://github.com/sfackler/rust-postgres).",null,null],[3,"SqliteTransaction","","Represents a transaction on a database connection.",null,null],[3,"SqliteError","","Encompasses an error result from a call to the SQLite C API.",null,null],[12,"code","","The error code returned by a SQLite C API call. See [SQLite Result\nCodes](http://www.sqlite.org/rescode.html) for details.",0,null],[12,"message","","The error message provided by [sqlite3_errmsg](http://www.sqlite.org/c3ref/errcode.html),\nif possible, or a generic error message based on `code` otherwise.",0,null],[3,"SqliteConnection","","A connection to a SQLite database.",null,null],[3,"SqliteOpenFlags","","Flags for opening SQLite database connections.\nSee [sqlite3_open_v2](http://www.sqlite.org/c3ref/open.html) for details.",null,null],[3,"SqliteStatement","","A prepared statement.",null,null],[3,"MappedRows","","An iterator over the mapped resulting rows of a query.",null,null],[3,"SqliteRows","","An iterator over the resulting rows of a query.",null,null],[3,"SqliteRow","","A single result row of a query.",null,null],[4,"SqliteTransactionBehavior","","Options for transaction behavior. See [BEGIN\nTRANSACTION](http://www.sqlite.org/lang_transaction.html) for details.",null,null],[13,"SqliteTransactionDeferred","","",1,null],[13,"SqliteTransactionImmediate","","",1,null],[13,"SqliteTransactionExclusive","","",1,null],[0,"types","","Traits dealing with SQLite data types.",null,null],[11,"clone","ffi::bindgen","",2,{"inputs":[{"name":"struct_sqlite3_file"}],"output":{"name":"struct_sqlite3_file"}}],[11,"default","","",2,{"inputs":[{"name":"struct_sqlite3_file"}],"output":{"name":"struct_sqlite3_file"}}],[11,"clone","","",3,{"inputs":[{"name":"struct_sqlite3_io_methods"}],"output":{"name":"struct_sqlite3_io_methods"}}],[11,"default","","",3,{"inputs":[{"name":"struct_sqlite3_io_methods"}],"output":{"name":"struct_sqlite3_io_methods"}}],[11,"clone","","",4,{"inputs":[{"name":"struct_sqlite3_vfs"}],"output":{"name":"struct_sqlite3_vfs"}}],[11,"default","","",4,{"inputs":[{"name":"struct_sqlite3_vfs"}],"output":{"name":"struct_sqlite3_vfs"}}],[11,"clone","","",5,{"inputs":[{"name":"struct_sqlite3_mem_methods"}],"output":{"name":"struct_sqlite3_mem_methods"}}],[11,"default","","",5,{"inputs":[{"name":"struct_sqlite3_mem_methods"}],"output":{"name":"struct_sqlite3_mem_methods"}}],[11,"clone","","",6,{"inputs":[{"name":"struct_sqlite3_module"}],"output":{"name":"struct_sqlite3_module"}}],[11,"default","","",6,{"inputs":[{"name":"struct_sqlite3_module"}],"output":{"name":"struct_sqlite3_module"}}],[11,"clone","","",7,{"inputs":[{"name":"struct_sqlite3_index_info"}],"output":{"name":"struct_sqlite3_index_info"}}],[11,"default","","",7,{"inputs":[{"name":"struct_sqlite3_index_info"}],"output":{"name":"struct_sqlite3_index_info"}}],[11,"clone","","",8,{"inputs":[{"name":"struct_sqlite3_index_constraint"}],"output":{"name":"struct_sqlite3_index_constraint"}}],[11,"default","","",8,{"inputs":[{"name":"struct_sqlite3_index_constraint"}],"output":{"name":"struct_sqlite3_index_constraint"}}],[11,"clone","","",9,{"inputs":[{"name":"struct_sqlite3_index_orderby"}],"output":{"name":"struct_sqlite3_index_orderby"}}],[11,"default","","",9,{"inputs":[{"name":"struct_sqlite3_index_orderby"}],"output":{"name":"struct_sqlite3_index_orderby"}}],[11,"clone","","",10,{"inputs":[{"name":"struct_sqlite3_index_constraint_usage"}],"output":{"name":"struct_sqlite3_index_constraint_usage"}}],[11,"default","","",10,{"inputs":[{"name":"struct_sqlite3_index_constraint_usage"}],"output":{"name":"struct_sqlite3_index_constraint_usage"}}],[11,"clone","","",11,{"inputs":[{"name":"struct_sqlite3_vtab"}],"output":{"name":"struct_sqlite3_vtab"}}],[11,"default","","",11,{"inputs":[{"name":"struct_sqlite3_vtab"}],"output":{"name":"struct_sqlite3_vtab"}}],[11,"clone","","",12,{"inputs":[{"name":"struct_sqlite3_vtab_cursor"}],"output":{"name":"struct_sqlite3_vtab_cursor"}}],[11,"default","","",12,{"inputs":[{"name":"struct_sqlite3_vtab_cursor"}],"output":{"name":"struct_sqlite3_vtab_cursor"}}],[11,"clone","","",13,{"inputs":[{"name":"struct_sqlite3_mutex_methods"}],"output":{"name":"struct_sqlite3_mutex_methods"}}],[11,"default","","",13,{"inputs":[{"name":"struct_sqlite3_mutex_methods"}],"output":{"name":"struct_sqlite3_mutex_methods"}}],[11,"clone","","",14,{"inputs":[{"name":"struct_sqlite3_pcache_page"}],"output":{"name":"struct_sqlite3_pcache_page"}}],[11,"default","","",14,{"inputs":[{"name":"struct_sqlite3_pcache_page"}],"output":{"name":"struct_sqlite3_pcache_page"}}],[11,"clone","","",15,{"inputs":[{"name":"struct_sqlite3_pcache_methods2"}],"output":{"name":"struct_sqlite3_pcache_methods2"}}],[11,"default","","",15,{"inputs":[{"name":"struct_sqlite3_pcache_methods2"}],"output":{"name":"struct_sqlite3_pcache_methods2"}}],[11,"clone","","",16,{"inputs":[{"name":"struct_sqlite3_pcache_methods"}],"output":{"name":"struct_sqlite3_pcache_methods"}}],[11,"default","","",16,{"inputs":[{"name":"struct_sqlite3_pcache_methods"}],"output":{"name":"struct_sqlite3_pcache_methods"}}],[11,"clone","","",17,{"inputs":[{"name":"struct_sqlite3_rtree_geometry"}],"output":{"name":"struct_sqlite3_rtree_geometry"}}],[11,"default","","",17,{"inputs":[{"name":"struct_sqlite3_rtree_geometry"}],"output":{"name":"struct_sqlite3_rtree_geometry"}}],[11,"clone","","",18,{"inputs":[{"name":"struct_sqlite3_rtree_query_info"}],"output":{"name":"struct_sqlite3_rtree_query_info"}}],[11,"default","","",18,{"inputs":[{"name":"struct_sqlite3_rtree_query_info"}],"output":{"name":"struct_sqlite3_rtree_query_info"}}],[11,"clone","","",19,{"inputs":[{"name":"struct___va_list_tag"}],"output":{"name":"struct___va_list_tag"}}],[11,"default","","",19,{"inputs":[{"name":"struct___va_list_tag"}],"output":{"name":"struct___va_list_tag"}}],[6,"sqlite3_stmt","rusqlite::types","",null,null],[5,"sqlite3_column_type","","",null,null],[17,"SQLITE_INTEGER","","",null,null],[17,"SQLITE_FLOAT","","",null,null],[17,"SQLITE_TEXT","","",null,null],[17,"SQLITE_BLOB","","",null,null],[17,"SQLITE_NULL","","",null,null],[3,"Null","","Empty struct that can be used to fill in a query parameter as `NULL`.",null,null],[8,"ToSql","","A trait for types that can be converted into SQLite values.",null,null],[10,"bind_parameter","","",20,null],[8,"FromSql","","A trait for types that can be created from a SQLite value.",null,null],[10,"column_result","","",21,null],[11,"column_has_valid_sqlite_type","","FromSql types can implement this method and use sqlite3_column_type to check that\nthe type reported by SQLite matches a type suitable for Self. This method is used\nby `SqliteRow::get_checked` to confirm that the column contains a valid type before\nattempting to retrieve the value.",21,null],[11,"bind_parameter","","",22,null],[11,"bind_parameter","","",23,null],[11,"bind_parameter","collections::string","",24,null],[11,"bind_parameter","collections::vec","",25,null],[11,"bind_parameter","types::time","",26,null],[11,"bind_parameter","core::option","",27,null],[11,"clone","rusqlite::types","",28,{"inputs":[{"name":"null"}],"output":{"name":"null"}}],[11,"bind_parameter","","",28,null],[11,"column_result","","",22,null],[11,"column_has_valid_sqlite_type","","",22,null],[11,"column_result","","",23,null],[11,"column_has_valid_sqlite_type","","",23,null],[11,"column_result","collections::string","",24,null],[11,"column_has_valid_sqlite_type","","",24,null],[11,"column_result","collections::vec","",25,null],[11,"column_has_valid_sqlite_type","","",25,null],[11,"column_result","types::time","",26,null],[11,"column_has_valid_sqlite_type","","",26,null],[11,"column_result","core::option","",27,null],[11,"column_has_valid_sqlite_type","","",27,null],[11,"clone","rusqlite","",1,{"inputs":[{"name":"sqlitetransactionbehavior"}],"output":{"name":"sqlitetransactionbehavior"}}],[11,"new","","Begin a new transaction. Cannot be nested; see `savepoint` for nested transactions.",29,{"inputs":[{"name":"sqlitetransaction"},{"name":"sqliteconnection"},{"name":"sqlitetransactionbehavior"}],"output":{"name":"sqliteresult"}}],[11,"savepoint","","Starts a new [savepoint](http://www.sqlite.org/lang_savepoint.html), allowing nested\ntransactions.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"will_commit","","Returns whether or not the transaction is currently set to commit.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"bool"}}],[11,"will_rollback","","Returns whether or not the transaction is currently set to rollback.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"bool"}}],[11,"set_commit","","Set the transaction to commit at its completion.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":null}],[11,"set_rollback","","Set the transaction to rollback at its completion.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":null}],[11,"commit","","A convenience method which consumes and commits a transaction.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"rollback","","A convenience method which consumes and rolls back a transaction.",29,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"finish","","Consumes the transaction, committing or rolling back according to the current setting\n(see `will_commit`, `will_rollback`).",29,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"drop","","",29,{"inputs":[{"name":"sqlitetransaction"}],"output":null}],[6,"SqliteResult","","A typedef of the result returned by many methods.",null,null],[17,"SQLITE_OPEN_READ_ONLY","","",null,null],[17,"SQLITE_OPEN_READ_WRITE","","",null,null],[17,"SQLITE_OPEN_CREATE","","",null,null],[17,"SQLITE_OPEN_URI","","",null,null],[17,"SQLITE_OPEN_MEMORY","","",null,null],[17,"SQLITE_OPEN_NO_MUTEX","","",null,null],[17,"SQLITE_OPEN_FULL_MUTEX","","",null,null],[17,"SQLITE_OPEN_SHARED_CACHE","","",null,null],[17,"SQLITE_OPEN_PRIVATE_CACHE","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"sqliteerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sqliteerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"sqliteerror"}],"output":{"name":"str"}}],[11,"open","","Open a new connection to a SQLite database.",30,{"inputs":[{"name":"sqliteconnection"},{"name":"p"}],"output":{"name":"sqliteresult"}}],[11,"open_in_memory","","Open a new connection to an in-memory SQLite database.",30,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"open_with_flags","","Open a new connection to a SQLite database.",30,{"inputs":[{"name":"sqliteconnection"},{"name":"p"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteresult"}}],[11,"open_in_memory_with_flags","","Open a new connection to an in-memory SQLite database.",30,{"inputs":[{"name":"sqliteconnection"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteresult"}}],[11,"transaction","","Begin a new transaction with the default behavior (DEFERRED).",30,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"transaction_with_behavior","","Begin a new transaction with a specified behavior.",30,{"inputs":[{"name":"sqliteconnection"},{"name":"sqlitetransactionbehavior"}],"output":{"name":"sqliteresult"}}],[11,"execute_batch","","Convenience method to run multiple SQL statements (that cannot take any parameters).",30,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"sqliteresult"}}],[11,"execute","","Convenience method to prepare and execute a single SQL statement.",30,null],[11,"last_insert_rowid","","Get the SQLite rowid of the most recent successful INSERT.",30,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"i64"}}],[11,"query_row","","Convenience method to execute a query that is expected to return a single row.",30,null],[11,"query_row_safe","","Convenience method to execute a query that is expected to return a single row.",30,null],[11,"prepare","","Prepare a SQL statement for execution.",30,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"sqliteresult"}}],[11,"close","","Close the SQLite connection.",30,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"fmt","","",30,{"inputs":[{"name":"sqliteconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"cmp","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"eq","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"c_int"}],"output":{"name":"sqliteopenflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"default","","",31,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"column_names","","Get all the column names in the result set of the prepared statement.",32,{"inputs":[{"name":"sqlitestatement"}],"output":{"name":"vec"}}],[11,"execute","","Execute the prepared statement.",32,null],[11,"query","","Execute the prepared statement, returning an iterator over the resulting rows.",32,null],[11,"query_map","","Executes the prepared statement and maps a function over the resulting\nrows. ",32,null],[11,"finalize","","Consumes the statement.",32,{"inputs":[{"name":"sqlitestatement"}],"output":{"name":"sqliteresult"}}],[11,"fmt","","",32,{"inputs":[{"name":"sqlitestatement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",32,{"inputs":[{"name":"sqlitestatement"}],"output":null}],[11,"next","","",33,{"inputs":[{"name":"mappedrows"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"sqliterows"}],"output":{"name":"option"}}],[11,"get","","Get the value of a particular column of the result row.",35,{"inputs":[{"name":"sqliterow"},{"name":"c_int"}],"output":{"name":"t"}}],[11,"get_checked","","Get the value of a particular column of the result row.",35,{"inputs":[{"name":"sqliterow"},{"name":"c_int"}],"output":{"name":"sqliteresult"}}],[11,"get_opt","","Attempt to get the value of a particular column of the result row.",35,{"inputs":[{"name":"sqliterow"},{"name":"c_int"}],"output":{"name":"sqliteresult"}}]],"paths":[[3,"SqliteError"],[4,"SqliteTransactionBehavior"],[3,"Struct_sqlite3_file"],[3,"Struct_sqlite3_io_methods"],[3,"Struct_sqlite3_vfs"],[3,"Struct_sqlite3_mem_methods"],[3,"Struct_sqlite3_module"],[3,"Struct_sqlite3_index_info"],[3,"Struct_sqlite3_index_constraint"],[3,"Struct_sqlite3_index_orderby"],[3,"Struct_sqlite3_index_constraint_usage"],[3,"Struct_sqlite3_vtab"],[3,"Struct_sqlite3_vtab_cursor"],[3,"Struct_sqlite3_mutex_methods"],[3,"Struct_sqlite3_pcache_page"],[3,"Struct_sqlite3_pcache_methods2"],[3,"Struct_sqlite3_pcache_methods"],[3,"Struct_sqlite3_rtree_geometry"],[3,"Struct_sqlite3_rtree_query_info"],[3,"Struct___va_list_tag"],[8,"ToSql"],[8,"FromSql"],[6,"c_int"],[6,"c_double"],[3,"String"],[3,"Vec"],[3,"Timespec"],[4,"Option"],[3,"Null"],[3,"SqliteTransaction"],[3,"SqliteConnection"],[3,"SqliteOpenFlags"],[3,"SqliteStatement"],[3,"MappedRows"],[3,"SqliteRows"],[3,"SqliteRow"]]};
searchIndex['libz_sys'] = {"items":[[0,"","libz_sys","",null,null],[3,"gz_header","","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit","","",null,null],[5,"deflateInit2","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePending","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzbuffer","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzclose_r","","",null,null],[5,"gzclose_w","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzoffset","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetDictionary","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit","","",null,null],[5,"inflateInit2","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['schedule_recv'] = {"items":[[0,"","schedule_recv","This crate exposes functionality to create receivers that\nreceive notifications after a specified period of time or at\na specified frequency.",null,null],[5,"oneshot_ms","","Starts a timer which after `ms` milliseconds will issue a **single** `.send(())` on the other side of the\nreturned `Reciever<()>`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"receiver"}}],[5,"periodic_ms","","Starts a timer which, **every** `ms` milliseconds, will issue `.send(())` on the other side of the\nreturned `Reciever<()>`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"receiver"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",0,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",2,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",3,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",5,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",7,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","schedule_recv","Returns true if the boxed type is the same as `T`",8,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",8,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",9,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",10,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",10,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",10,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",11,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",11,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",12,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",12,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::imp","",13,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",13,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",14,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",14,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",14,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",15,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",15,null],[11,"get","","",15,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",16,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",16,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",16,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",16,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",17,null],[11,"name","","Gets the thread's name.",17,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",18,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",18,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",19,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",20,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",21,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",21,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",21,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",20,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",20,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",20,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",20,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",20,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",20,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",20,null],[11,"next","","",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",23,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",22,null],[11,"take","","Removes this bucket's key and value from the hashtable.",22,null],[11,"replace","","",22,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",22,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",22,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",22,null],[11,"expect_full","","",24,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",25,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",25,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",26,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",27,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",27,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"len","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",30,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"len","","",30,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",31,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"len","","",31,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",32,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"len","","",32,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",32,null],[11,"clone","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",26,null],[11,"clone","std::collections::hash::map","",33,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",34,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",34,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",34,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",34,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",34,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",34,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",34,null],[11,"get","","Returns a reference to the value corresponding to the key.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",34,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",34,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",37,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",37,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",42,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",43,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",34,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",34,null],[11,"extend","","",34,null],[11,"clone","","",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",34,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",45,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",45,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",45,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",45,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",45,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",45,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",45,null],[11,"contains","","Returns `true` if the set contains a value.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",45,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",45,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",45,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"default","","",45,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"len","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"len","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",48,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"len","","",48,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",49,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",49,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",50,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",51,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",52,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"hasher","std::collections::hash::state","",53,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",53,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",53,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::vec_deque","",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",54,null],[11,"default","","",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",54,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",54,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",54,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",54,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",54,null],[11,"iter","","Returns a front-to-back iterator.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",54,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",54,null],[11,"len","","Returns the number of elements in the `VecDeque`.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",54,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",54,null],[11,"push_back","","Appends an element to the back of a buffer",54,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",54,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",54,null],[11,"retain","","Retains only the elements specified by the predicate.",54,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",54,null],[11,"clone","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",56,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",58,null],[11,"next","","",58,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",54,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",54,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",54,null],[11,"index","","",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",54,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",54,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",54,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",54,null],[11,"extend","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::binary_heap","",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",59,null],[11,"default","","",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",59,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",59,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",59,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",59,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",59,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",59,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",59,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",59,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",59,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",59,null],[11,"drop","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",59,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",59,null],[11,"extend","","",59,null],[11,"clone","collections::linked_list","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",66,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",66,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",67,null],[11,"iter","","Provides a forward iterator.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",67,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",67,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",67,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",67,null],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",68,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",67,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",67,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"drop","std::dynamic_lib","",69,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",69,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",69,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",69,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",69,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",69,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",69,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",70,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next","","",71,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"clone","","",72,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",72,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",72,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",73,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"fmt","","",74,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",75,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"len","","",75,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",76,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"len","","",76,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",77,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",77,null],[11,"cmp","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",77,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",77,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Retakes ownership of a CString that was transferred to C.",77,null],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",77,null],[11,"into_ptr","","Transfers ownership of the string to a C caller.",77,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",77,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",77,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",77,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",78,null],[11,"as_ptr","","Returns the inner pointer to this C string.",78,null],[11,"to_bytes","","Converts this C string to a byte slice.",78,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",78,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",78,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",78,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",77,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",77,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",77,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",79,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",79,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",79,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",79,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",80,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std::ffi::c_str","",78,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",78,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",78,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"clone","std::ffi::os_str","",81,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",81,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",81,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",81,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",81,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",81,null],[11,"from","","",81,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",81,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",81,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",82,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",82,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",82,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",82,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",82,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",82,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",81,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",81,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"eq","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",82,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",81,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",82,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",82,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",81,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",83,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",84,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",85,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",87,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",87,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",87,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",87,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",87,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",87,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",87,null],[11,"read_to_end","","",87,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",87,null],[11,"flush","","",87,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",87,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",84,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",84,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",84,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",84,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",84,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",84,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",84,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",85,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",85,null],[11,"is_dir","","Test whether this file type represents a directory.",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",89,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",90,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",90,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",90,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",90,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",91,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",92,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",92,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",92,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",92,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",92,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",92,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",92,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",92,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",93,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",93,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",93,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",94,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",94,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",94,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",94,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",94,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",94,null],[11,"fill_buf","","",94,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",94,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",96,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",96,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",96,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",96,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",96,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",96,null],[11,"flush","","",96,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",96,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",96,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",95,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",95,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",80,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",95,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",95,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",97,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",97,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",97,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",97,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",97,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",97,null],[11,"flush","","",97,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",98,null],[11,"fmt","std::io::cursor","",99,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",99,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",99,null],[11,"seek","","",99,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",99,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",99,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",99,null],[11,"read","","",99,null],[11,"read","","",99,null],[11,"fill_buf","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",99,null],[11,"fill_buf","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",99,null],[11,"fill_buf","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",99,null],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",80,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",101,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",80,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",80,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",80,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",80,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",80,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",80,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",80,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",80,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",102,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",80,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",80,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",1,null],[11,"read_to_end","","",1,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",1,null],[11,"write_fmt","","",1,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",1,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",1,null],[11,"read_until","","",1,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",1,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",103,null],[11,"write_all","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",104,null],[11,"get","","",104,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",105,null],[11,"fill_buf","","",105,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",105,null],[11,"read","","",106,null],[11,"write","","",107,null],[11,"flush","","",107,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",108,null],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",111,null],[11,"flush","","",111,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",111,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",112,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",112,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",112,null],[11,"read_to_end","","",112,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",112,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",112,null],[11,"read","","",113,null],[11,"read_to_end","","",113,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",113,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",113,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",114,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",114,null],[11,"write_fmt","","",114,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",116,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",116,null],[11,"flush","","",116,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",116,null],[11,"write_fmt","","",116,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",118,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",118,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",120,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",121,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",121,null],[11,"fill_buf","","",121,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",121,null],[11,"read","","",122,null],[11,"next","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",125,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",124,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",124,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",127,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",128,null],[11,"fmt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",129,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"clone","","",129,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",129,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",130,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",130,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",128,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",130,null],[11,"partial_cmp","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",131,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",131,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"partial_cmp","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",132,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",132,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",133,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",134,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",132,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",133,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"hash","","",134,null],[11,"to_socket_addrs","","",132,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",133,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",134,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",135,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",135,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",135,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",135,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",135,null],[11,"read_to_end","","",135,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",135,null],[11,"flush","","",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",136,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",137,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",138,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",138,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",138,null],[11,"local_addr","","Returns the socket address that this socket was created from.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",138,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",138,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",128,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",130,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",131,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",132,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",139,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",139,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",139,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",140,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",141,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"as_raw_fd","std::fs","",87,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",87,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",87,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",135,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",136,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",138,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",135,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",136,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",138,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",81,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",81,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",82,null],[11,"as_bytes","","",82,null],[11,"mode","std::fs","",85,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",85,null],[11,"from_mode","","",85,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",84,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",86,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",90,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",93,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",142,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",142,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",142,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",144,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",146,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",147,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",146,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",147,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"eq","std::path","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",148,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[11,"fmt","","",148,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",148,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",150,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"clone","","",150,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",150,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",150,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",150,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",150,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",151,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"cmp","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",151,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",151,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",152,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",152,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",152,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",152,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",152,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",153,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",152,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",152,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",152,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",154,null],[11,"clone","","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",154,null],[11,"pop","","Truncate `self` to `self.parent()`.",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",154,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",154,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",154,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",154,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",154,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",154,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",92,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",92,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",92,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",92,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",92,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",92,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",92,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",92,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",92,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",92,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",92,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",92,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",92,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",92,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",92,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",92,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",92,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",92,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",92,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",92,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",92,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",92,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"deref","","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",92,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",154,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",154,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",92,null],[11,"as_ref","","",92,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",92,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",92,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",92,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",82,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",81,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",83,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",154,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",145,null],[11,"flush","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",146,null],[11,"read","","",147,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",142,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",142,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",142,null],[11,"env","","Inserts or updates an environment variable mapping.",142,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",142,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",142,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",142,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",142,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",156,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",143,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",143,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",157,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",157,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",157,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",157,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",158,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",158,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",158,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",158,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",159,null],[11,"new","std::sync::mpsc::oneshot","",160,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",160,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",160,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",160,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",160,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",160,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",160,null],[11,"drop_port","","",160,null],[11,"can_recv","","",160,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",160,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",160,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",160,null],[11,"eq","std::sync::mpsc::select","",161,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",162,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",162,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",162,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",163,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",163,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",163,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",163,null],[11,"drop","","",162,null],[11,"drop","","",163,null],[11,"next","","",164,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",165,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",165,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",165,null],[11,"send","","",165,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",165,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",165,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",165,null],[11,"drop_chan","","",165,null],[11,"drop_port","","",165,null],[11,"can_recv","","",165,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",165,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",165,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",165,null],[11,"new","std::sync::mpsc::stream","",166,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",166,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",166,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",166,null],[11,"drop_port","","",166,null],[11,"can_recv","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",166,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",166,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",166,null],[11,"fmt","std::sync::mpsc::sync","",167,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",168,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",168,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",168,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",168,null],[11,"drop_chan","","",168,null],[11,"drop_port","","",168,null],[11,"can_recv","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",168,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",168,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",168,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",169,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",169,null],[11,"pop","","Pops some data from this queue.",169,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",169,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",170,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",170,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",170,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",170,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",170,null],[11,"clone","std::sync::mpsc","",171,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",171,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",172,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",172,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",173,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",173,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",174,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",175,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",175,null],[11,"send","","Sends a value on this synchronous channel.",176,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",176,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",176,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",177,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",177,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",177,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",178,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",179,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",177,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",177,null],[11,"fmt","","",171,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",171,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",171,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",174,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",174,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",172,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",172,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",172,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",173,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",173,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",173,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",180,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",180,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",181,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",182,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",182,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",182,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",182,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",183,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",183,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",183,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",183,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",183,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",183,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",183,null],[11,"drop","","",183,null],[11,"new","","Creates a new condition variable",184,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",184,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",184,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",184,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",184,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",184,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",184,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",184,null],[11,"drop","std::sync::mutex","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",185,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",185,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",185,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",185,null],[11,"deref","","",186,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",186,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",186,null],[11,"new","std::sync::once","Creates a new `Once` value.",187,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",187,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",188,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",188,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",188,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",188,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",188,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",188,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"drop","","",188,null],[11,"fmt","","",188,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",189,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",189,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",189,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",189,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",189,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",189,null],[11,"deref","","",190,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",191,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",191,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",190,null],[11,"drop","","",191,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",192,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",192,null],[11,"release","","Release a resource from this semaphore.",192,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",192,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",193,null],[11,"default","core::sync::atomic","",194,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",195,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",196,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",197,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",198,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",194,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",194,null],[11,"swap","","Stores a value into the bool, returning the old value.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",194,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",195,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",195,null],[11,"swap","","Stores a value into the isize, returning the old value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",195,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",196,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",196,null],[11,"swap","","Stores a value into the usize, returning the old value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",196,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",197,null],[11,"load","","Loads a value from the pointer.",197,null],[11,"store","","Stores a value into the pointer.",197,null],[11,"swap","","Stores a value into the pointer, returning the old value.",197,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",197,null],[11,"fmt","","",196,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::time::duration","",199,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Crates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",199,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",199,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",199,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",199,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",199,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",199,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",199,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",199,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",199,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",200,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",200,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",200,null],[11,"wait","","Waits for a signal on the specified mutex.",200,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",200,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",200,null],[11,"clone","std::sys_common::dwarf::eh","",201,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",202,null],[11,"read","","",202,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",202,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",202,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",203,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",204,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",205,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",205,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",205,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",205,null],[11,"destroy","","Deallocates all resources associated with this mutex.",205,null],[11,"next","std::sys_common::net","",206,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",206,null],[11,"connect","","",207,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",207,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",207,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",207,null],[11,"write","","",207,null],[11,"peer_addr","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",207,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",207,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",208,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",208,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",208,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",208,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",208,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",208,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",209,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",209,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",209,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",209,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",209,null],[11,"send_to","","",209,null],[11,"duplicate","","",209,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",209,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",209,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",209,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",209,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",210,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",210,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",210,null],[11,"get","","",210,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",211,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",211,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",211,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",211,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",211,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",211,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",212,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",212,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",212,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",212,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",213,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",213,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",213,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",214,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",214,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",215,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",215,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",215,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",215,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",215,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",215,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",215,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",215,null],[11,"new","std::sys_common::thread_local","",216,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",216,null],[11,"set","","Sets this TLS key to a new value.",216,null],[11,"destroy","","Deallocates this OS TLS key.",216,null],[11,"new","","Creates a new managed OS TLS key.",217,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",217,null],[11,"set","","See StaticKey::set",217,null],[11,"drop","","",217,null],[11,"clone","std::sys_common::wtf8","",218,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",218,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",218,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",218,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",218,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",218,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",218,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",220,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",220,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an new, empty WTF-8 string.",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",219,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",219,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",219,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",219,null],[11,"as_slice","","",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",219,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",219,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",219,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",219,null],[11,"push","","Append a code point at the end of the string.",219,null],[11,"truncate","","Shortens a string to the specified length.",219,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",219,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",219,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",219,null],[11,"partial_cmp","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",220,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",220,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",220,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",220,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",220,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",221,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",221,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"clone","","",222,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",222,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"hash","","",218,null],[11,"hash","","",219,null],[11,"hash","","",220,null],[11,"is_ascii","","",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",220,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",220,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",220,null],[11,"make_ascii_lowercase","","",220,null],[11,"new","std::sys::condvar","",223,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",223,null],[11,"notify_all","","",223,null],[11,"wait","","",223,null],[11,"wait_timeout","","",223,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",223,null],[11,"new","std::sys::fd","",224,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",224,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",224,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",224,null],[11,"write","","",224,null],[11,"set_cloexec","","",224,null],[11,"drop","","",224,null],[11,"clone","std::sys::fs","",225,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",226,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",226,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",227,null],[11,"eq","","",227,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",227,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",228,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",228,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",228,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",226,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",226,null],[11,"mode","","",226,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",227,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",227,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",227,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",227,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",229,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",230,null],[11,"path","","",231,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",231,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",231,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",231,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",231,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",225,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",225,null],[11,"write","","",225,null],[11,"append","","",225,null],[11,"truncate","","",225,null],[11,"create","","",225,null],[11,"mode","","",225,null],[11,"open","","",232,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",232,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",232,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",232,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",232,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",232,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",232,null],[11,"write","","",232,null],[11,"flush","","",232,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",232,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",232,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",232,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",233,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",233,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",233,null],[11,"fmt","","",232,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",234,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",234,null],[11,"unlock","","",234,null],[11,"try_lock","","",234,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",234,null],[11,"uninitialized","","",235,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",235,null],[11,"lock","","",235,null],[11,"try_lock","","",235,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",235,null],[11,"destroy","","",235,null],[11,"new","std::sys::net","",236,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",236,null],[11,"duplicate","","",236,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",236,null],[11,"set_timeout","","",236,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",236,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"next","std::sys::os","",237,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"fmt","","",238,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",238,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",238,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",239,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"len","","",239,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",240,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"hash","std::sys::os_str","",241,null],[11,"clone","","",241,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",242,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",241,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",241,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",241,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",241,null],[11,"from_str","","",242,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",242,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",242,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",242,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",243,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",243,null],[11,"write","","",243,null],[11,"raw","","",243,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",243,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",243,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",244,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",244,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",244,null],[11,"args","","",244,null],[11,"env","","",244,null],[11,"env_remove","","",244,null],[11,"env_clear","","",244,null],[11,"cwd","","",244,null],[11,"fmt","","",245,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",245,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",245,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",245,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",245,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",245,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",245,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",246,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",246,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",246,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",246,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",246,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",247,null],[11,"try_read","","",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",247,null],[11,"try_write","","",247,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",247,null],[11,"write_unlock","","",247,null],[11,"destroy","","",247,null],[11,"new","std::sys::stack_overflow","",248,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",248,null],[11,"new","std::sys::thread","",249,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",249,null],[11,"set_name","","",249,null],[11,"sleep","","",249,null],[11,"join","","",249,null],[11,"drop","","",249,null],[11,"now","std::sys::time::inner","",250,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"new","std::sys::stdio","",251,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",251,null],[11,"new","","",252,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",252,null],[11,"new","","",253,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",253,null],[11,"write","","",253,null],[11,"flush","","",253,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",254,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",254,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",254,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",254,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",255,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",255,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",255,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",255,null],[11,"clone","std::rand","",256,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",256,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",256,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",256,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",256,null],[11,"from_seed","","",256,null],[11,"reseed","","",257,null],[11,"clone","","",258,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",258,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",258,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",258,null],[11,"clone","core::iter","",259,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",259,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"next_back","","",259,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",260,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",260,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",260,null],[11,"next_back","","",260,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",261,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",261,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"clone","","",262,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",263,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",262,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",262,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",262,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",262,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"next_back","","",262,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",264,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",264,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"next_back","","",264,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",265,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",265,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"next_back","","",265,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",266,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",266,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[11,"next_back","","",266,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",267,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",267,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"next_back","","",267,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",268,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",268,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"nth","","",268,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",268,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",268,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",269,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",269,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",269,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",269,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",269,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",269,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",269,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",270,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",270,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"clone","","",271,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",271,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",271,null],[11,"clone","","",272,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",272,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",272,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",272,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",272,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",272,null],[11,"clone","","",273,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",273,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",273,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",273,null],[11,"clone","","",274,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",274,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",274,null],[11,"clone","","",275,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",275,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"next_back","","",275,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",276,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",276,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",276,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",276,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",276,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",276,null],[11,"next_back","","",276,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",277,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",277,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"next_back","","",277,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",278,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",279,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",280,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",278,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"clone","","",281,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",281,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",281,null],[11,"next_back","","",281,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",278,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next","core::ops","",280,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",280,null],[11,"next_back","","",280,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",279,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",282,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",282,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"next_back","","",282,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",283,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"next_back","","",283,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",283,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",283,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",283,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",284,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",284,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",284,null],[11,"next_back","","",284,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",284,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::result","",285,null],[11,"fmt","","",285,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",285,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",285,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",285,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",285,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",285,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",285,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",285,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",285,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",285,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",285,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",285,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",285,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",285,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",285,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",285,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",285,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",285,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",285,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",285,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",285,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",285,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",285,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",286,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next_back","","",286,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",286,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",287,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"next_back","","",287,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",288,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"next_back","","",288,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",285,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"cmp","collections::string","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",83,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",83,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",83,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",83,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",83,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",83,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",83,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",83,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",83,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",83,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",83,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",83,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",83,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",83,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",83,null],[11,"push","","Adds the given character to the end of the string.",83,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",83,null],[11,"truncate","","Shortens a string to the specified length.",83,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",83,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",83,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",83,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",83,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",83,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",83,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",83,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",83,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",83,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",83,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",6,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",83,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",83,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",289,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",289,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",83,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",289,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",83,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",83,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"add","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",83,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",83,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",83,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",83,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",83,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",83,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",83,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",83,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",83,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",83,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",290,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",290,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",290,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",83,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",83,null],[11,"from","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",289,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",289,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",83,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",83,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",83,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",83,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",291,null],[11,"next","","",291,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"next_back","","",291,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","core::ops","",292,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",292,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",292,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",292,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",280,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",280,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",280,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",279,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",279,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",279,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",279,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",293,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",293,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",293,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",294,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",295,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",296,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",297,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",297,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",297,null],[11,"fmt","core::simd","",298,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",298,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",299,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",299,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",300,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",300,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",301,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",301,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",302,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",302,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",303,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",303,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",304,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",305,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",305,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",306,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",306,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",307,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",307,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",306,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",307,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",306,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",307,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",306,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",307,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",306,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",307,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",302,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",303,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",304,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",305,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",298,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",299,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",300,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",301,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"clone","core::fmt::rt::v1","",308,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",309,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",310,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",310,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",311,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",312,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::str","",313,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",313,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",313,null],[11,"borrow","collections::string","",83,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",314,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",314,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",314,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",314,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",315,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",316,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",315,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",315,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",315,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",317,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",318,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",319,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",320,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",320,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",321,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",321,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",322,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",322,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",320,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",320,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",320,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",320,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",320,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",323,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",323,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",324,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",324,null],[11,"matching","","",324,null],[11,"use_early_reject","","",325,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",325,null],[11,"matching","","",325,null],[11,"borrow","collections::vec","",103,null],[11,"borrow_mut","","",103,null],[11,"hash","core::marker","",326,null],[11,"eq","","",326,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",326,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",326,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",326,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",327,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",327,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",327,null],[11,"finish","","",327,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",327,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",327,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"hash","core::option","",328,null],[11,"fmt","","",328,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",328,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",328,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",328,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",328,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",328,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",328,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",328,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",328,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",328,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",328,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",328,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",328,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",328,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",328,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",328,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",328,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",328,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",328,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",328,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",328,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",328,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",328,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",328,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",328,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",328,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",328,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",329,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",329,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"next_back","","",329,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",330,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"next_back","","",330,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",330,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",331,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",331,null],[11,"next_back","","",331,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",332,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",332,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"next_back","","",332,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",328,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",333,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",334,null],[11,"make_place","","",334,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",334,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",1,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",333,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",334,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",1,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",1,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",1,null],[11,"default","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",1,null],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",1,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",1,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",1,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",289,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",289,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",289,null],[11,"into_owned","","Extracts the owned data.",289,null],[11,"deref","","",289,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",289,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",289,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",289,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",289,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",289,null],[11,"into_cow","","",289,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",289,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::raw","",335,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",336,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"fmt","core::cmp","",337,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",337,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",337,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",337,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",337,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",337,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",337,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",338,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",338,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",338,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",338,null],[11,"clone","","Makes a clone of the `Rc<T>`.",338,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",338,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",338,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",338,null],[11,"fmt","","",338,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",339,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",339,null],[11,"clone","","Makes a clone of the `Weak<T>`.",339,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",339,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",338,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"fmt","schedule_recv","",340,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",340,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",340,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",340,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",340,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",340,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",340,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",341,null],[11,"fmt","","",341,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",341,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",341,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",341,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",341,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::ptr","Creates a new `Unique`.",342,null],[11,"get","","Dereferences the content.",342,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",342,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",342,null],[11,"fmt","","",342,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",343,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",343,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",343,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",343,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",343,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",343,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",343,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",344,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",344,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",344,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",345,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",345,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",345,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",345,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",345,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",345,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",345,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",345,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",345,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",346,null],[11,"clone","","",346,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",347,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",347,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",347,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",347,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",348,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",348,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",349,null],[11,"deref","","",348,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",348,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",350,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",350,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",350,null],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",103,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",103,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",103,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",103,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",103,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",103,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",103,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",103,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",103,null],[11,"as_slice","","Extracts a slice containing the entire vector.",103,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",103,null],[11,"set_len","","Sets the length of a vector.",103,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",103,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",103,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",103,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",103,null],[11,"push","","Appends an element to the back of a collection.",103,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",103,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",103,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",103,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",103,null],[11,"len","","Returns the number of elements in the vector.",103,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",103,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",103,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",103,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",103,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",103,null],[11,"clone","","",103,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",103,null],[11,"hash","","",103,null],[11,"index","","",103,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",103,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",103,null],[11,"index","","",103,null],[11,"index","","",103,null],[11,"index","","",103,null],[11,"index_mut","","",103,null],[11,"index_mut","","",103,null],[11,"index_mut","","",103,null],[11,"index_mut","","",103,null],[11,"deref","","",103,null],[11,"deref_mut","","",103,null],[11,"from_iter","","",103,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",103,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",103,null],[11,"extend","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","collections::borrow","",289,null],[11,"ne","","",289,null],[11,"eq","","",289,null],[11,"ne","","",289,null],[11,"eq","","",289,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"partial_cmp","","",103,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",103,null],[11,"default","","",103,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",103,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",103,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",103,null],[11,"from","","",103,null],[11,"from","","",103,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",289,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",103,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",351,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"count","","",351,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",351,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",351,null],[11,"next","","",352,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",352,null]],"paths":[[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Vec"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"FileAttr"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Cow"],[3,"ParseError"],[3,"Drain"],[3,"RangeFull"],[3,"RangeTo"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"PhantomData"],[3,"SipHasher"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Slice"],[3,"TraitObject"],[4,"Ordering"],[3,"Rc"],[3,"Weak"],[8,"Any"],[3,"TypeId"],[3,"Unique"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Regex","","A compiled regular expression",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",1,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a dynamic regular expression with the given size limit.",1,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",1,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"reg_replace","","",2,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",2,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",11,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",11,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",11,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[4,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['regex_syntax'] = {"items":[[0,"","regex_syntax","This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",1,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",1,null],[12,"chars","regex_syntax::Expr","The characters.",1,null],[12,"casei","","Whether to match case insensitively.",1,null],[13,"AnyChar","regex_syntax","Match any character, excluding new line.",1,null],[13,"AnyCharNoNL","","Match any character.",1,null],[13,"Class","","A character class.",1,null],[13,"StartLine","","Match the start of a line or beginning of input.",1,null],[13,"EndLine","","Match the end of a line or end of input.",1,null],[13,"StartText","","Match the beginning of input.",1,null],[13,"EndText","","Match the end of input.",1,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",1,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",1,null],[13,"Group","","A group, possibly non-capturing.",1,null],[12,"e","regex_syntax::Expr","The expression inside the group.",1,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",1,null],[12,"name","","The capture name, only for capturing named groups.",1,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",1,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",1,null],[12,"r","","The type of repeat operator used.",1,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",1,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",1,null],[13,"Alternate","","An alternation of expressions. Only one must match.",1,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",2,null],[13,"ZeroOrMore","","Match zero or more (`*`).",2,null],[13,"OneOrMore","","Match one or more (`+`).",2,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",2,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",2,null],[12,"max","","Optional upper bound on the number of matches.",2,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",3,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P<a>.)(?P<a>.)`.",3,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",3,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",3,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",3,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",3,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",3,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",3,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",3,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",3,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",3,null],[12,"end","","The second character specified in the range.",3,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",3,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",3,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",3,null],[12,"max","","The second number specified in the repetition.",3,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",3,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",3,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",3,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",3,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",3,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",3,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",3,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",3,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",3,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",3,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",3,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",3,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",3,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",3,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",3,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",3,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",3,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",1,{"inputs":[{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",5,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",5,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",5,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",5,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",5,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",5,null],[11,"as_slice","","Extracts a slice containing the entire vector.",5,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",5,null],[11,"set_len","","Sets the length of a vector.",5,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",5,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",5,null],[11,"push","","Appends an element to the back of a collection.",5,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",5,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",5,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",5,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",5,null],[11,"len","","Returns the number of elements in the vector.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",5,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",5,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",5,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",5,null],[11,"clone","collections::binary_heap","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",6,null],[11,"default","","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",6,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",6,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",6,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",6,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",6,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",6,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",6,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",6,null],[11,"drop","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",6,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",6,null],[11,"extend","","",6,null],[11,"next","collections::btree::node","",11,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",11,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",11,null],[11,"drop","","",12,null],[11,"as_slices","","",12,null],[11,"as_slices_mut","","",12,null],[11,"as_slices_internal","","",12,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",12,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",12,null],[11,"keys_mut","","",12,null],[11,"vals","","",12,null],[11,"vals_mut","","",12,null],[11,"edges","","",12,null],[11,"edges_mut","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",12,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",12,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",12,null],[11,"len","","How many key-value pairs the node contains",12,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",12,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",12,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",12,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",12,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",12,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",13,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",13,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",13,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",13,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",13,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",13,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",13,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",13,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",13,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",13,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",13,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",13,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",13,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",13,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",12,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",12,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",12,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",12,null],[11,"clone","","",14,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",14,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",14,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",14,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",14,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",15,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",15,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",15,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",15,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",16,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",17,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",17,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",17,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",18,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",18,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",18,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",20,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",19,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",19,null],[11,"get","","Returns a reference to the value corresponding to the key.",19,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",19,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",19,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",19,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",19,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",21,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",22,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",22,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",23,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",23,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",24,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",24,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",24,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",24,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",24,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",19,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",19,null],[11,"extend","","",19,null],[11,"hash","","",19,null],[11,"default","","",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",19,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",19,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",19,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",16,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",16,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",16,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",20,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",28,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",29,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",31,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",32,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",32,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",33,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",34,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",19,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",19,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",19,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",19,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",35,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",35,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",35,null],[11,"contains","","Returns `true` if the set contains a value.",35,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",35,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",35,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",35,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",35,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",35,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",35,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",35,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",35,null],[11,"extend","","",35,null],[11,"default","","",35,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",35,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",38,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",38,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",39,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",40,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",41,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",42,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",43,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",43,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",43,null],[11,"into_owned","","Extracts the owned data.",43,null],[11,"deref","","",43,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",43,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",43,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",43,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"into_cow","","",43,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",43,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",44,null],[11,"cmp","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",44,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",44,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",44,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",44,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",44,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",44,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",44,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",44,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",44,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",44,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"from_iter","","",44,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",44,null],[11,"extend","","",44,null],[11,"clone","core::fmt::rt::v1","",46,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",47,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",48,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",49,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",50,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",51,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",53,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",53,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",54,null],[11,"iter","","Provides a forward iterator.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",54,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",54,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",54,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",54,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",54,null],[11,"next","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",55,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",55,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",54,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",54,null],[11,"extend","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",54,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",54,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",54,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"start","core::ops","",56,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",57,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",58,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",58,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",5,null],[11,"borrow_mut","","",5,null],[11,"clone","collections::str","",59,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",59,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"borrow","collections::string","",60,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",61,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",62,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",63,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",62,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",62,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",62,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",64,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",65,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",66,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",68,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",69,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",67,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",67,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",67,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",67,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",70,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",71,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",71,null],[11,"matching","","",71,null],[11,"use_early_reject","","",72,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",72,null],[11,"matching","","",72,null],[11,"cmp","collections::string","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",60,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",60,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",60,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",60,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",60,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",60,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",60,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",60,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",60,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",60,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",60,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",60,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",60,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",60,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",60,null],[11,"push","","Adds the given character to the end of the string.",60,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",60,null],[11,"truncate","","Shortens a string to the specified length.",60,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",60,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",60,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",60,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",60,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",60,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",60,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",60,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",60,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",60,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",60,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",73,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",73,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",73,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",60,null],[11,"from_iter","","",60,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",60,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",60,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",60,null],[11,"extend","","",60,null],[11,"extend","","",60,null],[11,"extend","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",43,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",60,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",43,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",60,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",60,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"add","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",60,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",60,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",60,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",60,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",60,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",60,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",60,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",60,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",60,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"eq","","",75,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",60,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",60,null],[11,"from","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",43,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",43,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",60,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",60,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",60,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",60,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",76,null],[11,"next","","",76,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",5,null],[11,"hash","","",5,null],[11,"index","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",5,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",5,null],[11,"extend","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","collections::borrow","",43,null],[11,"ne","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",5,null],[11,"default","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",5,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",43,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"count","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",77,null],[11,"next","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",78,null],[11,"clone","collections::vec_deque","",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",79,null],[11,"default","","",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",79,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",79,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",79,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",79,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",79,null],[11,"iter","","Returns a front-to-back iterator.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",79,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",79,null],[11,"len","","Returns the number of elements in the `VecDeque`.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",79,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",79,null],[11,"push_back","","Appends an element to the back of a buffer",79,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",79,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",79,null],[11,"retain","","Retains only the elements specified by the predicate.",79,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",79,null],[11,"clone","","",80,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",80,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",82,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",83,null],[11,"next","","",83,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",79,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",79,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",79,null],[11,"index","","",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",79,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",79,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",79,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",79,null],[11,"extend","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",84,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",85,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",86,null],[11,"make_place","","",86,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",86,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",87,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",85,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",86,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",87,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",87,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",87,null],[11,"default","","",87,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",87,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",87,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",87,null],[11,"clone","","",87,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",87,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",87,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",87,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",87,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",87,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",87,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",87,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",87,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",87,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",87,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","regex_syntax","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",4,{"inputs":[{"name":"charclass"},{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",4,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"negate","","Negates the character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",88,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",88,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",88,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",88,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"CharClass"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Error"]]};
searchIndex['hpack'] = {"items":[[0,"","hpack","A module implementing HPACK functionality. Exposes a simple API for\nperforming the encoding and decoding of header sets, according to the\nHPACK spec.",null,null],[0,"encoder","","Implements all functionality related to encoding header blocks using\nHPACK.",null,null],[3,"Encoder","hpack::encoder","Represents an HPACK encoder. Allows clients to encode arbitrary header sets\nand tracks the encoding context. That is, encoding subsequent header sets\nwill use the context built by previous encode calls.",null,null],[5,"encode_integer","","Encode an integer to the representation defined by HPACK.",null,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"vec"}}],[11,"new","","Creates a new `Encoder` with a default static table, as defined by the\nHPACK spec (Appendix A).",0,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes the given headers using the HPACK rules and returns a newly\nallocated `Vec` containing the bytes representing the encoded header\nset.",0,{"inputs":[{"name":"encoder"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"decoder","hpack","Exposes the struct `Decoder` that allows for HPACK-encoded header blocks to\nbe decoded into a header list.",null,null],[3,"Decoder","hpack::decoder","Decodes headers encoded using HPACK.",null,null],[4,"IntegerDecodingError","","Represents all errors that can be encountered while decoding an\ninteger.",null,null],[13,"TooManyOctets","","5.1. specifies that \"excessively large integer decodings\" MUST be\nconsidered an error (whether the size is the number of octets or\nvalue). This variant corresponds to the encoding containing too many\noctets.",1,null],[13,"ValueTooLarge","","The variant corresponds to the case where the value of the integer\nbeing decoded exceeds a certain threshold.",1,null],[13,"NotEnoughOctets","","When a buffer from which an integer was supposed to be encoded does\nnot contain enough octets to complete the decoding.",1,null],[13,"InvalidPrefix","","Only valid prefixes are [1, 8]",1,null],[4,"StringDecodingError","","Represents all errors that can be encountered while decoding an octet\nstring.",null,null],[13,"NotEnoughOctets","","",2,null],[13,"HuffmanDecoderError","","",2,null],[4,"DecoderError","","Represents all errors that can be encountered while performing the decoding\nof an HPACK header set.",null,null],[13,"HeaderIndexOutOfBounds","","",3,null],[13,"IntegerDecodingError","","",3,null],[13,"StringDecodingError","","",3,null],[13,"InvalidMaxDynamicSize","","The size of the dynamic table can never be allowed to exceed the max\nsize mandated to the decoder by the protocol. (by perfroming changes\nmade by SizeUpdate blocks).",3,null],[6,"DecoderResult","","The result returned by the `decode` method of the `Decoder`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"integerdecodingerror"}],"output":{"name":"integerdecodingerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"stringdecodingerror"}],"output":{"name":"stringdecodingerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"decodererror"}],"output":{"name":"decodererror"}}],[11,"fmt","","",3,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Decoder` with all settings set to default values.",4,{"inputs":[{"name":"decoder"}],"output":{"name":"decoder"}}],[11,"set_max_table_size","","Sets a new maximum dynamic table size for the decoder.",4,{"inputs":[{"name":"decoder"},{"name":"usize"}],"output":null}],[11,"decode","","Decode the header block found in the given buffer.",4,null],[0,"huffman","hpack","A module exposing utilities for encoding and decoding Huffman-coded octet\nstrings, under the Huffman code defined by HPACK.\n(HPACK-draft-10, Appendix B)",null,null],[3,"HuffmanDecoder","hpack::huffman","A simple implementation of a Huffman code decoder.",null,null],[4,"HuffmanDecoderError","","Represents the error variants that the `HuffmanDecoder` can return.",null,null],[13,"PaddingTooLarge","","Any padding strictly larger than 7 bits MUST be interpreted as an error",5,null],[13,"InvalidPadding","","Any padding that does not correspond to the most significant bits of\nEOS MUST be interpreted as an error.",5,null],[13,"EOSInString","","If EOS is ever found in the string, it causes an error.",5,null],[6,"HuffmanDecoderResult","","The type that represents the result of the `decode` method of the\n`HuffmanDecoder`.",null,null],[11,"eq","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"huffmandecodererror"}],"output":{"name":"huffmandecodererror"}}],[11,"fmt","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new HuffmanDecoder with the default Huffman code table, as\ndefined in the HPACK-draft-10, Appendix B.",6,{"inputs":[{"name":"huffmandecoder"}],"output":{"name":"huffmandecoder"}}],[11,"decode","","Decodes the buffer `buf` into a newly allocated `Vec`.",6,null]],"paths":[[3,"Encoder"],[4,"IntegerDecodingError"],[4,"StringDecodingError"],[4,"DecoderError"],[3,"Decoder"],[4,"HuffmanDecoderError"],[3,"HuffmanDecoder"]]};
searchIndex['schemamama'] = {"items":[[0,"","schemamama","",null,null],[3,"Migrator","","Maintains an ordered collection of migrations to utilize.",null,null],[6,"Version","","The version type alias used to uniquely reference migrations.",null,null],[8,"Migration","","All migrations will implement this trait, and a migration trait specific to the chosen adapter.\nThis trait defines the metadata for tracking migration sequence and for human reference.",null,null],[10,"version","","An ordered (but not necessarily sequential), unique identifier for this migration.\nRegistered migrations will be applied in ascending order by version.",0,{"inputs":[{"name":"migration"}],"output":{"name":"version"}}],[10,"description","","A message describing the effects of this migration.",0,{"inputs":[{"name":"migration"}],"output":{"name":"str"}}],[8,"Adapter","","Use this trait to connect the migrator to your chosen database technology.",null,null],[16,"MigrationType","","An alias to a specific trait that extends `Migration`. Typically, the aforementioned trait\nwill declare functions that the adapter will use to migrate upwards and downwards.",1,null],[10,"current_version","","Returns the latest migration version, or `None` if no migrations have been recorded. Can\npanic if necessary.",1,{"inputs":[{"name":"adapter"}],"output":{"name":"option"}}],[10,"migrated_versions","","Returns a set of the versions of all of the currently applied migrations. Can panic if\nnecessary.",1,{"inputs":[{"name":"adapter"}],"output":{"name":"btreeset"}}],[10,"apply_migration","","Applies the specified migration. Can panic if necessary.",1,{"inputs":[{"name":"adapter"},{"name":"migrationtype"}],"output":null}],[10,"revert_migration","","Reverts the specified migration. Can panic if necessary.",1,{"inputs":[{"name":"adapter"},{"name":"migrationtype"}],"output":null}],[11,"new","","Create a migrator with a given adapter.",2,{"inputs":[{"name":"migrator"},{"name":"t"}],"output":{"name":"migrator"}}],[11,"adapter","","Get a reference to the adapter.",2,{"inputs":[{"name":"migrator"}],"output":{"name":"t"}}],[11,"register","","Register a migration. If a migration with the same version is already registered, a warning\nis logged and the registration fails.",2,{"inputs":[{"name":"migrator"},{"name":"box"}],"output":null}],[11,"version_registered","","Returns true is a migration with the provided version has been registered.",2,{"inputs":[{"name":"migrator"},{"name":"version"}],"output":{"name":"bool"}}],[11,"first_version","","Returns the lowest version of the registered migrations, or `None` if no migrations have\nbeen registered.",2,{"inputs":[{"name":"migrator"}],"output":{"name":"option"}}],[11,"last_version","","Returns the highest version of the registered migrations, or `None` if no migrations have\nbeen registered.",2,{"inputs":[{"name":"migrator"}],"output":{"name":"option"}}],[11,"current_version","","Returns the latest migration version, or `None` if no migrations have been recorded.",2,{"inputs":[{"name":"migrator"}],"output":{"name":"option"}}],[11,"migrated_versions","","Returns a set of the versions of all of the currently applied migrations.",2,{"inputs":[{"name":"migrator"}],"output":{"name":"btreeset"}}],[11,"down","","Rollback to the specified version (exclusive), or rollback to the state before any\nregistered migrations were applied if `None` is specified.",2,{"inputs":[{"name":"migrator"},{"name":"option"}],"output":null}],[11,"up","","Migrate to the specified version (inclusive).",2,{"inputs":[{"name":"migrator"},{"name":"version"}],"output":null}],[14,"migration!","","Efficiently implement the `Migration` trait for a given type.",null,null]],"paths":[[8,"Migration"],[8,"Adapter"],[3,"Migrator"]]};
searchIndex['mime'] = {"items":[[0,"","mime","# Mime",null,null],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",null,null],[4,"TopLevel","","",null,null],[13,"Star","","",0,null],[13,"Text","","",0,null],[13,"Image","","",0,null],[13,"Audio","","",0,null],[13,"Video","","",0,null],[13,"Application","","",0,null],[13,"Multipart","","",0,null],[13,"Message","","",0,null],[13,"Model","","",0,null],[13,"Ext","","",0,null],[4,"SubLevel","","",null,null],[13,"Star","","",1,null],[13,"Plain","","",1,null],[13,"Html","","",1,null],[13,"Xml","","",1,null],[13,"Javascript","","",1,null],[13,"Css","","",1,null],[13,"Json","","",1,null],[13,"WwwFormUrlEncoded","","",1,null],[13,"FormData","","",1,null],[13,"Png","","",1,null],[13,"Gif","","",1,null],[13,"Bmp","","",1,null],[13,"Jpeg","","",1,null],[13,"Ext","","",1,null],[4,"Attr","","",null,null],[13,"Charset","","",2,null],[13,"Boundary","","",2,null],[13,"Q","","",2,null],[13,"Ext","","",2,null],[4,"Value","","",null,null],[13,"Utf8","","",3,null],[13,"Ext","","",3,null],[6,"Param","","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",4,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",0,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",1,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",3,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime","",3,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",4,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",4,{"inputs":[{"name":"mime"},{"name":"str"}],"output":{"name":"result"}}],[14,"mime!","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Mime"],[3,"String"]]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling.",null,null],[3,"Duration","","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['clap'] = {"items":[[0,"","clap","",null,null],[3,"Arg","","The abstract representation of a command line argument used by the consumer of the library.\nUsed to set all the options and relationships that define a valid argument for the program.",null,null],[12,"name","","The unique name of the argument",0,null],[12,"short","","The short version (i.e. single character) of the argument, no preceding `-`\n**NOTE:** `short` is mutually exclusive with `index`",0,null],[12,"long","","The long version of the flag (i.e. word) without the preceding `--`\n**NOTE:** `long` is mutually exclusive with `index`",0,null],[12,"help","","The string of text that will displayed to the user when the application's\n`help` text is displayed",0,null],[12,"required","","If this is a required by default when using the command line program\ni.e. a configuration file that's required for the program to function\n**NOTE:** required by default means, it is required *until* mutually\nexclusive arguments are evaluated.",0,null],[12,"takes_value","","Determines if this argument is an option, vice a flag or positional and\nis mutually exclusive with `index` and `multiple`",0,null],[12,"index","","The index of the argument. `index` is mutually exclusive with `takes_value`\nand `multiple`",0,null],[12,"multiple","","Determines if multiple instances of the same flag are allowed. `multiple`\nis mutually exclusive with `index` and `takes_value`.\nI.e. `-v -v -v` or `-vvv`",0,null],[12,"blacklist","","A list of names for other arguments that *may not* be used with this flag",0,null],[12,"possible_vals","","A list of possible values for an option or positional argument",0,null],[12,"requires","","A list of names of other arguments that are *required* to be used when\nthis flag is used",0,null],[12,"group","","A name of the group the argument belongs to",0,null],[12,"val_names","","A set of names (ordered) for the values to be displayed with the help message",0,null],[12,"num_vals","","The exact number of values to satisfy this argument",0,null],[12,"max_vals","","The maximum number of values possible for this argument",0,null],[12,"min_vals","","The minimum number of values possible to satisfy this argument",0,null],[12,"empty_vals","","Specifies whether or not this argument accepts explicit empty values such as `--option \"\"`",0,null],[12,"global","","Specifies whether or not this argument is global and should be propogated through all\nchild subcommands",0,null],[12,"validator","","A function used to check the validity of an argument value. Failing this validation results\nin failed argument parsing.",0,null],[12,"overrides","","A list of names for other arguments that *mutually override* this flag",0,null],[12,"hidden","","Specifies whether the argument should show up in the help message",0,null],[3,"SubCommand","","The abstract representation of a command line subcommand used by the consumer of the library.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by\nthe user. To get a new instance of this struct you use `.get_matches()` of the `App` struct.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related arguments and way for you to say, \"Any of these arguments\".\nBy placing arguments in a logical group, you can make easier requirement and exclusion rules\nintead of having to list each individually, or when you want a rule to apply \"any but not all\"\narguments.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line\narguments.",null,null],[3,"ClapError","","Command line argument parser error",null,null],[12,"error","","Formated error message",1,null],[12,"error_type","","Command line argument parser error type",1,null],[4,"AppSettings","","Application level settings, which affect how `App` operates",null,null],[13,"SubcommandsNegateReqs","","Allows subcommands to override all requirements of the parent (this command). For example\nif you had a subcommand or even top level application which had a required arguments that\nare only required as long as there is no subcommand present.",2,null],[13,"SubcommandRequired","","Allows specifying that if no subcommand is present at runtime, error and exit gracefully",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text sould be displayed (and then exit gracefully), if no\narguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"GlobalVersion","","Uses version of the current command for all subcommands. (Defaults to false; subcommands\nhave independant version strings)",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all subcommands (Defaults to false; subcommands have\nversion flags)",2,null],[13,"UnifiedHelpMessage","","By default the auto-generated help message groups flags, options, and positional arguments\nseparately. This setting disable that and groups flags and options together presenting a\nmore unified help message (a la getopts or docopt style).",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait user before\nexiting",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text sould be displayed (and then exit gracefully), if no\nsubcommands are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[4,"ClapErrorType","","Command line argument parser error types",null,null],[13,"InvalidValue","","Error occurs when some possible values were set, but clap found unexpected value",3,null],[13,"InvalidArgument","","Error occurs when clap found unexpected flag or option",3,null],[13,"InvalidSubcommand","","Error occurs when clap found unexpected subcommand",3,null],[13,"EmptyValue","","Error occurs when option does not allow empty values but some was found",3,null],[13,"OptionError","","Parser inner error",3,null],[13,"ArgumentError","","Parser inner error",3,null],[13,"ValueError","","Parser inner error",3,null],[13,"TooMuchValues","","Error occurs when argument got more values then were expected",3,null],[13,"TooFewValues","","Error occurs when argument got less values then were expected",3,null],[13,"ArgumentConflict","","Error occurs when clap find two ore more conflicting arguments",3,null],[13,"MissingRequiredArgument","","Error occurs when one or more required arguments missing",3,null],[13,"MissingSubcommand","","Error occurs when required subcommand missing",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when no argument or subcommand has been supplied and\n`AppSettings::ArgRequiredElseHelp` was used",3,null],[13,"UnexpectedArgument","","Error occurs when clap find argument while is was not expecting any",3,null],[13,"UnexpectedMultipleUsage","","Error occurs when argument was used multiple times and was not set as multiple.",3,null],[13,"InvalidUnicode","","Error occurs when argument contains invalid unicode characters",3,null],[4,"Format","","",null,null],[13,"Error","","",4,null],[13,"Warning","","",4,null],[13,"Good","","",4,null],[11,"fmt","","",2,{"inputs":[{"name":"appsettings"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"appsettings"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"appsettings"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"from_str","","",2,{"inputs":[{"name":"appsettings"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name (such as the binary). The name\nwill be displayed to the user when they request to print version or help and usage\ninformation. The name should not contain spaces (hyphens '-' are ok).",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) and will be displayed to the user when they request the help\ninformation with `--help` or `-h`.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely\nneccessary, such as the binary name for your application is misleading, or perhaps *not*\nhow the user should invoke your program.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"about","","Sets a string briefly describing what the program does and will be displayed when\ndisplaying help information.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to and directly after\nauto-generated help. This information is displayed **after** the auto-generated help\ninformation. This additional help is often used to describe how to use the arguments,\nor caveats to be noted.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"subcommands_negate_reqs","","Allows subcommands to override all requirements of the parent (this command). For example\nif you had a subcommand or even top level application which had a required arguments that\nare only required as long as there is no subcommand present.",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"subcommand_required","","Allows specifying that if no subcommand is present at runtime, error and exit gracefully",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help\ninformation.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used\nwhen the auto-generated message does not suffice.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"help_short","","Sets the short version of the `help` argument without the preceding `-`.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"version_short","","Sets the short version of the `version` argument without the preceding `-`.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"arg_required_else_help","","Specifies that the help text sould be displayed (and then exit gracefully), if no\narguments are present at runtime (i.e. an empty run such as, `$ myprog`.",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides a subcommand from help message output.",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"global_version","","Uses version of the current command for all subcommands. (Defaults to false; subcommands\nhave independant version strings)",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"versionless_subcommands","","Disables `-V` and `--version` for all subcommands (Defaults to false; subcommands have\nversion flags)",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"unified_help_message","","By default the auto-generated help message groups flags, options, and positional arguments\nseparately. This setting disable that and groups flags and options together presenting a\nmore unified help message (a la getopts or docopt style).",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"wait_on_error","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait user before\nexiting",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"subcommand_required_else_help","","Specifies that the help text sould be displayed (and then exit gracefully), if no\nsubcommands are present at runtime (i.e. an empty run such as, `$ myprog`.",5,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"setting","","Enables Application level settings, passed as argument",5,{"inputs":[{"name":"app"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple Application level settings, passed as argument",5,null],[11,"arg","","Adds an argument to the list of valid possibilties manually. This method allows you full\ncontrol over the arguments settings and options (as well as dynamic generation). It also\nallows you specify several more advanced configuration options such as relational rules\n(exclusions and requirements).",5,{"inputs":[{"name":"app"},{"name":"arg"}],"output":{"name":"self"}}],[11,"args","","Adds multiple arguments to the list of valid possibilties by iterating over a Vec of Args",5,{"inputs":[{"name":"app"},{"name":"vec"}],"output":{"name":"self"}}],[11,"arg_from_usage","","A convienience method for adding a single basic argument (one without advanced\nrelational rules) from a usage type string. The string used follows the same rules and\nsyntax as `Arg::from_usage()`",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple arguments at once from a usage string, one per line. See `Arg::from_usage()`\nfor details on the syntax and rules supported.",5,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"arg_group","","Adds an ArgGroup to the application. ArgGroups are a family of related arguments. By\nplacing them in a logical group, you make easier requirement and exclusion rules. For\ninstance, you can make an ArgGroup required, this means that one (and *only* one) argument\nfrom that group must be present. Using more than one argument from an ArgGroup causes a\nfailure (graceful exit).",5,{"inputs":[{"name":"app"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"arg_groups","","Adds a ArgGroups to the application. ArgGroups are a family of related arguments. By\nplacing them in a logical group, you make easier requirement and exclusion rules. For\ninstance, you can make an ArgGroup required, this means that one (and *only* one) argument\nfrom that group must be present. Using more than one argument from an ArgGroup causes a\nfailure (graceful exit).",5,{"inputs":[{"name":"app"},{"name":"vec"}],"output":{"name":"self"}}],[11,"subcommand","","Adds a subcommand to the list of valid possibilties. Subcommands are effectively sub apps,\nbecause they can contain their own arguments, subcommands, version, usage, etc. They also\nfunction just like apps, in that they get their own auto generated help, version, and\nusage.",5,{"inputs":[{"name":"app"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilties by iterating over a Vec of\n`SubCommand`s",5,{"inputs":[{"name":"app"},{"name":"vec"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to `io::stdout()` using a `BufWriter`",5,{"inputs":[{"name":"app"}],"output":{"name":"result"}}],[11,"write_help","","Writes the full help message to the user to a `io::Write` object",5,{"inputs":[{"name":"app"},{"name":"w"}],"output":{"name":"result"}}],[11,"get_matches","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",5,{"inputs":[{"name":"app"}],"output":{"name":"argmatches"}}],[11,"get_matches_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",5,{"inputs":[{"name":"app"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",5,{"inputs":[{"name":"app"}],"output":{"name":"result"}}],[11,"get_matches_safe_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",5,{"inputs":[{"name":"app"}],"output":{"name":"result"}}],[11,"get_matches_from","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",5,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",5,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",5,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"result"}}],[11,"get_matches_from_safe_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",5,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"result"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the `App` struct `self`. This is normally not\nthe desired functionality, instead prefer `App::get_matches_from_safe` which *does*\nconsume `self`. ",5,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"result"}}],[11,"get_matches_from_safe_borrow_lossy","","Starts the parsing process without consuming the `App` struct `self`. This is normally not\nthe desired functionality, instead prefer `App::get_matches_from_safe` which *does*\nconsume `self`. Invalid unicode characters are replaced with `U+FFFD REPLACEMENT CHARACTER`",5,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"claperrortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"claperrortype"},{"name":"claperrortype"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"claperrortype"},{"name":"claperrortype"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"claperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",1,{"inputs":[{"name":"claperror"}],"output":null}],[11,"description","","",1,{"inputs":[{"name":"claperror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"claperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_name","","Creates a new instace of `Arg` using a unique string name.\nThe name will be used by the library consumer to get information about\nwhether or not the argument was used at runtime.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instace of `Arg` from a usage string. Allows creation of basic settings\nfor Arg (i.e. everything except relational rules). The syntax is flexible, but there are\nsome rules to follow.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"arg"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","Sets the help text of the argument that will be displayed to the user\nwhen they print the usage/help information.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by\ndefault means it is required, when no other mutually exlusive rules have\nbeen evaluated. Mutually exclusive rules take precedence over being required\nby default.",0,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"conflicts_with","","Sets a mutually exclusive argument by name. I.e. when using this argument,\nthe following argument can't be present.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets mutually exclusive arguments by names. I.e. when using this argument,\nthe following argument can't be present.",0,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"mutually_overrides_with","","Sets a mutually overridable argument by name. I.e. this argument and\nthe following argument will override each other in POSIX style",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"mutually_overrides_with_all","","Sets a mutually overridable arguments by name. I.e. this argument and\nthe following argument will override each other in POSIX style",0,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"requires","","Sets an argument by name that is required when this one is presnet I.e. when\nusing this argument, the following argument *must* be present.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets arguments by names that are required when this one is presnet I.e. when\nusing this argument, the following arguments *must* be present.",0,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"takes_value","","Specifies that the argument takes an additional value at run time.",0,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",0,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"multiple","","Specifies if the flag may appear more than once such as for multiple debugging\nlevels (as an example). `-ddd` for three levels of debugging, or `-d -d -d`.\nWhen this is set to `true` you receive the number of occurrences the user supplied\nof a particular flag at runtime.",0,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child subcommands.",0,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicit empty values. An empty value must be specified at the\ncommand line with an explicit `\"\"`, or `''`",0,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",0,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, clap verifies that only\none of the specified values was used, or fails with a usage string.",0,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"possible_value","","Specifies a possible value for this argument. At runtime, clap verifies that only\none of the specified values was used, or fails with a usage string.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the group the argument belongs to.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a\n`-f <file>` argument where you wanted exactly 3 'files' you would set\n`.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n3 and only 3 values.",0,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a validation on the argument value. You provide a closure which\naccepts a `String` value, a `Result` where the `Err(String)` is a message displayed to the\nuser.",0,{"inputs":[{"name":"arg"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a\n`-f <file>` argument where you wanted up to 3 'files' you would set\n`.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3\nvalues.",0,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the *minimum* number of values are for this argument. For example, if you had a\n`-f <file>` argument where you wanted at least 2 'files' you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.",0,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"value_names","","Specifies names for values of option arguments. These names are cosmetic only, used for\nhelp and usage strings only. The names are **not** used to access arguments. The values of\nthe arguments are accessed in numeric order (i.e. if you specify two names `one` and `two`\n`one` will be the first matched value, `two` will be the second).",0,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"value_name","","Specifies the name for value of option or positional arguments. This name is cosmetic only,\nused for help and usage strings. The name is **not** used to access arguments.",0,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific option or positional argument (i.e. an argument that takes\nan additional value at runtime). If the option wasn't present at runtime\nit returns `None`.",6,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[11,"values_of","","Gets the values of a specific option or positional argument in a vector (i.e. an argument\nthat takes multiple values at runtime). If the option wasn't present at runtime it\nreturns `None`",6,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_present","","Returns if an argument was present at runtime.",6,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of occurrences of an option, flag, or positional argument at runtime.\nIf an argument isn't present it will return `0`. Can be used on arguments which *don't*\nallow multiple occurrences, but will obviously only return `0` or `1`.",6,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"u8"}}],[11,"subcommand_matches","","Returns the `ArgMatches` for a particular subcommand or None if the subcommand wasn't\npresent at runtime.",6,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[11,"subcommand_name","","Returns the name of the subcommand used of the parent `App`, or `None` if one wasn't found",6,{"inputs":[{"name":"argmatches"}],"output":{"name":"option"}}],[11,"subcommand","","Returns the name and `ArgMatches` of the subcommand used at runtime or (\"\", None) if one\nwasn't found.",6,null],[11,"usage","","Returns a string slice of the usage statement for the `App` (or `SubCommand`)",6,{"inputs":[{"name":"argmatches"}],"output":{"name":"str"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. Will be displayed\nto the user when they print version or help and usage information.",7,{"inputs":[{"name":"subcommand"},{"name":"str"}],"output":{"name":"app"}}],[11,"with_name","","Creates a new instace of `ArgGroup` using a unique string name.\nThe name will only be used by the library consumer and not displayed to the use.",8,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"add","","Adds an argument to this group by name",8,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"add_all","","Adds multiple arguments to this group by name",8,null],[11,"required","","Sets the requirement of this group. A required group will be displayed in the usage string\nof the application in the format `[arg|arg2|arg3]`. A required `ArgGroup` simply states\nthat one, and only one argument from this group *must* be present at runtime (unless\nconflicting with another argument).",8,{"inputs":[{"name":"arggroup"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a required group.\nRequirement rules function just like argument requirement rules, you can name other\narguments or groups that must be present when one of the arguments from this group is used.",8,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a required group.\nRequirement rules function just like argument requirement rules, you can name other\narguments or groups that must be present when one of the arguments from this group is used.",8,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion rules function just like argument\nexclusion rules, you can name other arguments or groups that must not be present when one\nof the arguments from this group are used.",8,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like argument\nexclusion rules, you can name other arguments or groups that must not be present when one\nof the arguments from this group are used.",8,null],[11,"fmt","","",8,{"inputs":[{"name":"arggroup"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"value_t!","","Convenience macro getting a typed value `T` where `T` implements `std::str::FromStr`\nThis macro returns a `Result<T,String>` which allows you as the developer to decide\nwhat you'd like to do on a failed parse. There are two types of errors, parse failures\nand those where the argument wasn't present (such as a non-required argument).",null,null],[14,"value_t_or_exit!","","Convenience macro getting a typed value `T` where `T` implements `std::str::FromStr`\nThis macro returns a `T` or `Vec<T>` or exits with a usage string upon failure. This\nremoves some of the boiler plate to handle failures from value_t! above.",null,null],[14,"simple_enum!","","Convenience macro generated a simple enum with variants to be used as a type when parsing\narguments. This enum also provides a `variants()` function which can be used to retrieve a\n`Vec<&'static str>` of the variant names.",null,null],[14,"arg_enum!","","Convenience macro to generate more complete enums with variants to be used as a type when\nparsing arguments. This enum also provides a `variants()` function which can be used to retrieve a\n`Vec<&'static str>` of the variant names.",null,null],[14,"crate_version!","","Allows you pull the version for an from your Cargo.toml as MAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null],[14,"clap_app!","","App, Arg, SubCommand and Group builder macro (Usage-string like input)",null,null]],"paths":[[3,"Arg"],[3,"ClapError"],[4,"AppSettings"],[4,"ClapErrorType"],[4,"Format"],[3,"App"],[3,"ArgMatches"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex['aho_corasick'] = {"items":[[0,"","aho_corasick","An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).",null,null],[3,"Match","","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"fullacautomaton"},{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"skip_to","","",5,null],[11,"is_skippable","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"bool"}}],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"patidx"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"patidx"},{"name":"usize"}],"output":{"name":"match"}}],[10,"skip_to","","Attempt to skip through the input.",6,null],[10,"is_skippable","","Returns true if and only if this automaton can skip through the input.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"transitions"},{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"skip_to","","",8,null],[11,"is_skippable","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"bool"}}],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"dense"},{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"sparse"},{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"acautomaton"},{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"str"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",8,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",10,null],[11,"make_place","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",8,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",9,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",10,null],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","alloc::arc","",11,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",12,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",11,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",11,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",11,null],[11,"eq","","Equality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",12,null],[11,"borrow","","",12,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",13,null],[11,"clone","","Makes a clone of the `Rc<T>`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",13,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",14,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",14,null],[11,"clone","","Makes a clone of the `Weak<T>`.",14,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",13,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",15,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",15,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",15,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",15,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",15,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",15,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",15,null],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex['libsqlite3_sys'] = {"items":[[0,"","libsqlite3_sys","",null,null],[3,"Struct_sqlite3_file","","",null,null],[12,"pMethods","","",0,null],[3,"Struct_sqlite3_io_methods","","",null,null],[12,"iVersion","","",1,null],[12,"xClose","","",1,null],[12,"xRead","","",1,null],[12,"xWrite","","",1,null],[12,"xTruncate","","",1,null],[12,"xSync","","",1,null],[12,"xFileSize","","",1,null],[12,"xLock","","",1,null],[12,"xUnlock","","",1,null],[12,"xCheckReservedLock","","",1,null],[12,"xFileControl","","",1,null],[12,"xSectorSize","","",1,null],[12,"xDeviceCharacteristics","","",1,null],[12,"xShmMap","","",1,null],[12,"xShmLock","","",1,null],[12,"xShmBarrier","","",1,null],[12,"xShmUnmap","","",1,null],[12,"xFetch","","",1,null],[12,"xUnfetch","","",1,null],[3,"Struct_sqlite3_vfs","","",null,null],[12,"iVersion","","",2,null],[12,"szOsFile","","",2,null],[12,"mxPathname","","",2,null],[12,"pNext","","",2,null],[12,"zName","","",2,null],[12,"pAppData","","",2,null],[12,"xOpen","","",2,null],[12,"xDelete","","",2,null],[12,"xAccess","","",2,null],[12,"xFullPathname","","",2,null],[12,"xDlOpen","","",2,null],[12,"xDlError","","",2,null],[12,"xDlSym","","",2,null],[12,"xDlClose","","",2,null],[12,"xRandomness","","",2,null],[12,"xSleep","","",2,null],[12,"xCurrentTime","","",2,null],[12,"xGetLastError","","",2,null],[12,"xCurrentTimeInt64","","",2,null],[12,"xSetSystemCall","","",2,null],[12,"xGetSystemCall","","",2,null],[12,"xNextSystemCall","","",2,null],[3,"Struct_sqlite3_mem_methods","","",null,null],[12,"xMalloc","","",3,null],[12,"xFree","","",3,null],[12,"xRealloc","","",3,null],[12,"xSize","","",3,null],[12,"xRoundup","","",3,null],[12,"xInit","","",3,null],[12,"xShutdown","","",3,null],[12,"pAppData","","",3,null],[3,"Struct_sqlite3_module","","",null,null],[12,"iVersion","","",4,null],[12,"xCreate","","",4,null],[12,"xConnect","","",4,null],[12,"xBestIndex","","",4,null],[12,"xDisconnect","","",4,null],[12,"xDestroy","","",4,null],[12,"xOpen","","",4,null],[12,"xClose","","",4,null],[12,"xFilter","","",4,null],[12,"xNext","","",4,null],[12,"xEof","","",4,null],[12,"xColumn","","",4,null],[12,"xRowid","","",4,null],[12,"xUpdate","","",4,null],[12,"xBegin","","",4,null],[12,"xSync","","",4,null],[12,"xCommit","","",4,null],[12,"xRollback","","",4,null],[12,"xFindFunction","","",4,null],[12,"xRename","","",4,null],[12,"xSavepoint","","",4,null],[12,"xRelease","","",4,null],[12,"xRollbackTo","","",4,null],[3,"Struct_sqlite3_index_info","","",null,null],[12,"nConstraint","","",5,null],[12,"aConstraint","","",5,null],[12,"nOrderBy","","",5,null],[12,"aOrderBy","","",5,null],[12,"aConstraintUsage","","",5,null],[12,"idxNum","","",5,null],[12,"idxStr","","",5,null],[12,"needToFreeIdxStr","","",5,null],[12,"orderByConsumed","","",5,null],[12,"estimatedCost","","",5,null],[12,"estimatedRows","","",5,null],[3,"Struct_sqlite3_index_constraint","","",null,null],[12,"iColumn","","",6,null],[12,"op","","",6,null],[12,"usable","","",6,null],[12,"iTermOffset","","",6,null],[3,"Struct_sqlite3_index_orderby","","",null,null],[12,"iColumn","","",7,null],[12,"desc","","",7,null],[3,"Struct_sqlite3_index_constraint_usage","","",null,null],[12,"argvIndex","","",8,null],[12,"omit","","",8,null],[3,"Struct_sqlite3_vtab","","",null,null],[12,"pModule","","",9,null],[12,"nRef","","",9,null],[12,"zErrMsg","","",9,null],[3,"Struct_sqlite3_vtab_cursor","","",null,null],[12,"pVtab","","",10,null],[3,"Struct_sqlite3_mutex_methods","","",null,null],[12,"xMutexInit","","",11,null],[12,"xMutexEnd","","",11,null],[12,"xMutexAlloc","","",11,null],[12,"xMutexFree","","",11,null],[12,"xMutexEnter","","",11,null],[12,"xMutexTry","","",11,null],[12,"xMutexLeave","","",11,null],[12,"xMutexHeld","","",11,null],[12,"xMutexNotheld","","",11,null],[3,"Struct_sqlite3_pcache_page","","",null,null],[12,"pBuf","","",12,null],[12,"pExtra","","",12,null],[3,"Struct_sqlite3_pcache_methods2","","",null,null],[12,"iVersion","","",13,null],[12,"pArg","","",13,null],[12,"xInit","","",13,null],[12,"xShutdown","","",13,null],[12,"xCreate","","",13,null],[12,"xCachesize","","",13,null],[12,"xPagecount","","",13,null],[12,"xFetch","","",13,null],[12,"xUnpin","","",13,null],[12,"xRekey","","",13,null],[12,"xTruncate","","",13,null],[12,"xDestroy","","",13,null],[12,"xShrink","","",13,null],[3,"Struct_sqlite3_pcache_methods","","",null,null],[12,"pArg","","",14,null],[12,"xInit","","",14,null],[12,"xShutdown","","",14,null],[12,"xCreate","","",14,null],[12,"xCachesize","","",14,null],[12,"xPagecount","","",14,null],[12,"xFetch","","",14,null],[12,"xUnpin","","",14,null],[12,"xRekey","","",14,null],[12,"xTruncate","","",14,null],[12,"xDestroy","","",14,null],[3,"Struct_sqlite3_rtree_geometry","","",null,null],[12,"pContext","","",15,null],[12,"nParam","","",15,null],[12,"aParam","","",15,null],[12,"pUser","","",15,null],[12,"xDelUser","","",15,null],[3,"Struct_sqlite3_rtree_query_info","","",null,null],[12,"pContext","","",16,null],[12,"nParam","","",16,null],[12,"aParam","","",16,null],[12,"pUser","","",16,null],[12,"xDelUser","","",16,null],[12,"aCoord","","",16,null],[12,"anQueue","","",16,null],[12,"nCoord","","",16,null],[12,"iLevel","","",16,null],[12,"mxLevel","","",16,null],[12,"iRowid","","",16,null],[12,"rParentScore","","",16,null],[12,"eParentWithin","","",16,null],[12,"eWithin","","",16,null],[12,"rScore","","",16,null],[3,"Struct___va_list_tag","","",null,null],[12,"gp_offset","","",17,null],[12,"fp_offset","","",17,null],[12,"overflow_arg_area","","",17,null],[12,"reg_save_area","","",17,null],[4,"Struct_sqlite3","","",null,null],[4,"Struct_sqlite3_mutex","","",null,null],[4,"Struct_sqlite3_stmt","","",null,null],[4,"Struct_Mem","","",null,null],[4,"Struct_sqlite3_context","","",null,null],[4,"Struct_sqlite3_blob","","",null,null],[4,"Struct_sqlite3_pcache","","",null,null],[4,"Struct_sqlite3_backup","","",null,null],[5,"SQLITE_STATIC","","",null,{"inputs":[],"output":{"name":"sqlite3_destructor_type"}}],[5,"SQLITE_TRANSIENT","","",null,{"inputs":[],"output":{"name":"sqlite3_destructor_type"}}],[5,"code_to_str","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"str"}}],[7,"sqlite3_version","","",null,null],[7,"sqlite3_temp_directory","","",null,null],[7,"sqlite3_data_directory","","",null,null],[5,"sqlite3_libversion","","",null,null],[5,"sqlite3_sourceid","","",null,null],[5,"sqlite3_libversion_number","","",null,null],[5,"sqlite3_compileoption_used","","",null,null],[5,"sqlite3_compileoption_get","","",null,null],[5,"sqlite3_threadsafe","","",null,null],[5,"sqlite3_close","","",null,null],[5,"sqlite3_close_v2","","",null,null],[5,"sqlite3_exec","","",null,null],[5,"sqlite3_initialize","","",null,null],[5,"sqlite3_shutdown","","",null,null],[5,"sqlite3_os_init","","",null,null],[5,"sqlite3_os_end","","",null,null],[5,"sqlite3_config","","",null,null],[5,"sqlite3_db_config","","",null,null],[5,"sqlite3_extended_result_codes","","",null,null],[5,"sqlite3_last_insert_rowid","","",null,null],[5,"sqlite3_changes","","",null,null],[5,"sqlite3_total_changes","","",null,null],[5,"sqlite3_interrupt","","",null,null],[5,"sqlite3_complete","","",null,null],[5,"sqlite3_complete16","","",null,null],[5,"sqlite3_busy_handler","","",null,null],[5,"sqlite3_busy_timeout","","",null,null],[5,"sqlite3_get_table","","",null,null],[5,"sqlite3_free_table","","",null,null],[5,"sqlite3_mprintf","","",null,null],[5,"sqlite3_vmprintf","","",null,null],[5,"sqlite3_snprintf","","",null,null],[5,"sqlite3_vsnprintf","","",null,null],[5,"sqlite3_malloc","","",null,null],[5,"sqlite3_realloc","","",null,null],[5,"sqlite3_free","","",null,null],[5,"sqlite3_memory_used","","",null,null],[5,"sqlite3_memory_highwater","","",null,null],[5,"sqlite3_randomness","","",null,null],[5,"sqlite3_set_authorizer","","",null,null],[5,"sqlite3_trace","","",null,null],[5,"sqlite3_profile","","",null,null],[5,"sqlite3_progress_handler","","",null,null],[5,"sqlite3_open","","",null,null],[5,"sqlite3_open16","","",null,null],[5,"sqlite3_open_v2","","",null,null],[5,"sqlite3_uri_parameter","","",null,null],[5,"sqlite3_uri_boolean","","",null,null],[5,"sqlite3_uri_int64","","",null,null],[5,"sqlite3_errcode","","",null,null],[5,"sqlite3_extended_errcode","","",null,null],[5,"sqlite3_errmsg","","",null,null],[5,"sqlite3_errmsg16","","",null,null],[5,"sqlite3_errstr","","",null,null],[5,"sqlite3_limit","","",null,null],[5,"sqlite3_prepare","","",null,null],[5,"sqlite3_prepare_v2","","",null,null],[5,"sqlite3_prepare16","","",null,null],[5,"sqlite3_prepare16_v2","","",null,null],[5,"sqlite3_sql","","",null,null],[5,"sqlite3_stmt_readonly","","",null,null],[5,"sqlite3_stmt_busy","","",null,null],[5,"sqlite3_bind_blob","","",null,null],[5,"sqlite3_bind_double","","",null,null],[5,"sqlite3_bind_int","","",null,null],[5,"sqlite3_bind_int64","","",null,null],[5,"sqlite3_bind_null","","",null,null],[5,"sqlite3_bind_text","","",null,null],[5,"sqlite3_bind_text16","","",null,null],[5,"sqlite3_bind_value","","",null,null],[5,"sqlite3_bind_zeroblob","","",null,null],[5,"sqlite3_bind_parameter_count","","",null,null],[5,"sqlite3_bind_parameter_name","","",null,null],[5,"sqlite3_bind_parameter_index","","",null,null],[5,"sqlite3_clear_bindings","","",null,null],[5,"sqlite3_column_count","","",null,null],[5,"sqlite3_column_name","","",null,null],[5,"sqlite3_column_name16","","",null,null],[5,"sqlite3_column_database_name","","",null,null],[5,"sqlite3_column_database_name16","","",null,null],[5,"sqlite3_column_table_name","","",null,null],[5,"sqlite3_column_table_name16","","",null,null],[5,"sqlite3_column_origin_name","","",null,null],[5,"sqlite3_column_origin_name16","","",null,null],[5,"sqlite3_column_decltype","","",null,null],[5,"sqlite3_column_decltype16","","",null,null],[5,"sqlite3_step","","",null,null],[5,"sqlite3_data_count","","",null,null],[5,"sqlite3_column_blob","","",null,null],[5,"sqlite3_column_bytes","","",null,null],[5,"sqlite3_column_bytes16","","",null,null],[5,"sqlite3_column_double","","",null,null],[5,"sqlite3_column_int","","",null,null],[5,"sqlite3_column_int64","","",null,null],[5,"sqlite3_column_text","","",null,null],[5,"sqlite3_column_text16","","",null,null],[5,"sqlite3_column_type","","",null,null],[5,"sqlite3_column_value","","",null,null],[5,"sqlite3_finalize","","",null,null],[5,"sqlite3_reset","","",null,null],[5,"sqlite3_create_function","","",null,null],[5,"sqlite3_create_function16","","",null,null],[5,"sqlite3_create_function_v2","","",null,null],[5,"sqlite3_aggregate_count","","",null,null],[5,"sqlite3_expired","","",null,null],[5,"sqlite3_transfer_bindings","","",null,null],[5,"sqlite3_global_recover","","",null,null],[5,"sqlite3_thread_cleanup","","",null,null],[5,"sqlite3_memory_alarm","","",null,null],[5,"sqlite3_value_blob","","",null,null],[5,"sqlite3_value_bytes","","",null,null],[5,"sqlite3_value_bytes16","","",null,null],[5,"sqlite3_value_double","","",null,null],[5,"sqlite3_value_int","","",null,null],[5,"sqlite3_value_int64","","",null,null],[5,"sqlite3_value_text","","",null,null],[5,"sqlite3_value_text16","","",null,null],[5,"sqlite3_value_text16le","","",null,null],[5,"sqlite3_value_text16be","","",null,null],[5,"sqlite3_value_type","","",null,null],[5,"sqlite3_value_numeric_type","","",null,null],[5,"sqlite3_aggregate_context","","",null,null],[5,"sqlite3_user_data","","",null,null],[5,"sqlite3_context_db_handle","","",null,null],[5,"sqlite3_get_auxdata","","",null,null],[5,"sqlite3_set_auxdata","","",null,null],[5,"sqlite3_result_blob","","",null,null],[5,"sqlite3_result_double","","",null,null],[5,"sqlite3_result_error","","",null,null],[5,"sqlite3_result_error16","","",null,null],[5,"sqlite3_result_error_toobig","","",null,null],[5,"sqlite3_result_error_nomem","","",null,null],[5,"sqlite3_result_error_code","","",null,null],[5,"sqlite3_result_int","","",null,null],[5,"sqlite3_result_int64","","",null,null],[5,"sqlite3_result_null","","",null,null],[5,"sqlite3_result_text","","",null,null],[5,"sqlite3_result_text16","","",null,null],[5,"sqlite3_result_text16le","","",null,null],[5,"sqlite3_result_text16be","","",null,null],[5,"sqlite3_result_value","","",null,null],[5,"sqlite3_result_zeroblob","","",null,null],[5,"sqlite3_create_collation","","",null,null],[5,"sqlite3_create_collation_v2","","",null,null],[5,"sqlite3_create_collation16","","",null,null],[5,"sqlite3_collation_needed","","",null,null],[5,"sqlite3_collation_needed16","","",null,null],[5,"sqlite3_sleep","","",null,null],[5,"sqlite3_get_autocommit","","",null,null],[5,"sqlite3_db_handle","","",null,null],[5,"sqlite3_db_filename","","",null,null],[5,"sqlite3_db_readonly","","",null,null],[5,"sqlite3_next_stmt","","",null,null],[5,"sqlite3_commit_hook","","",null,null],[5,"sqlite3_rollback_hook","","",null,null],[5,"sqlite3_update_hook","","",null,null],[5,"sqlite3_enable_shared_cache","","",null,null],[5,"sqlite3_release_memory","","",null,null],[5,"sqlite3_db_release_memory","","",null,null],[5,"sqlite3_soft_heap_limit64","","",null,null],[5,"sqlite3_soft_heap_limit","","",null,null],[5,"sqlite3_table_column_metadata","","",null,null],[5,"sqlite3_load_extension","","",null,null],[5,"sqlite3_enable_load_extension","","",null,null],[5,"sqlite3_auto_extension","","",null,null],[5,"sqlite3_cancel_auto_extension","","",null,null],[5,"sqlite3_reset_auto_extension","","",null,null],[5,"sqlite3_create_module","","",null,null],[5,"sqlite3_create_module_v2","","",null,null],[5,"sqlite3_declare_vtab","","",null,null],[5,"sqlite3_overload_function","","",null,null],[5,"sqlite3_blob_open","","",null,null],[5,"sqlite3_blob_reopen","","",null,null],[5,"sqlite3_blob_close","","",null,null],[5,"sqlite3_blob_bytes","","",null,null],[5,"sqlite3_blob_read","","",null,null],[5,"sqlite3_blob_write","","",null,null],[5,"sqlite3_vfs_find","","",null,null],[5,"sqlite3_vfs_register","","",null,null],[5,"sqlite3_vfs_unregister","","",null,null],[5,"sqlite3_mutex_alloc","","",null,null],[5,"sqlite3_mutex_free","","",null,null],[5,"sqlite3_mutex_enter","","",null,null],[5,"sqlite3_mutex_try","","",null,null],[5,"sqlite3_mutex_leave","","",null,null],[5,"sqlite3_mutex_held","","",null,null],[5,"sqlite3_mutex_notheld","","",null,null],[5,"sqlite3_db_mutex","","",null,null],[5,"sqlite3_file_control","","",null,null],[5,"sqlite3_test_control","","",null,null],[5,"sqlite3_status","","",null,null],[5,"sqlite3_db_status","","",null,null],[5,"sqlite3_stmt_status","","",null,null],[5,"sqlite3_backup_init","","",null,null],[5,"sqlite3_backup_step","","",null,null],[5,"sqlite3_backup_finish","","",null,null],[5,"sqlite3_backup_remaining","","",null,null],[5,"sqlite3_backup_pagecount","","",null,null],[5,"sqlite3_unlock_notify","","",null,null],[5,"sqlite3_stricmp","","",null,null],[5,"sqlite3_strnicmp","","",null,null],[5,"sqlite3_strglob","","",null,null],[5,"sqlite3_log","","",null,null],[5,"sqlite3_wal_hook","","",null,null],[5,"sqlite3_wal_autocheckpoint","","",null,null],[5,"sqlite3_wal_checkpoint","","",null,null],[5,"sqlite3_wal_checkpoint_v2","","",null,null],[5,"sqlite3_vtab_config","","",null,null],[5,"sqlite3_vtab_on_conflict","","",null,null],[5,"sqlite3_rtree_geometry_callback","","",null,null],[5,"sqlite3_rtree_query_callback","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"struct_sqlite3_file"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[{"name":"struct_sqlite3_file"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"struct_sqlite3_io_methods"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[{"name":"struct_sqlite3_io_methods"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"struct_sqlite3_vfs"}],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[{"name":"struct_sqlite3_vfs"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"struct_sqlite3_mem_methods"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[{"name":"struct_sqlite3_mem_methods"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"struct_sqlite3_module"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[{"name":"struct_sqlite3_module"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"struct_sqlite3_index_info"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[{"name":"struct_sqlite3_index_info"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"struct_sqlite3_index_constraint"}],"output":{"name":"self"}}],[11,"default","","",6,{"inputs":[{"name":"struct_sqlite3_index_constraint"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"struct_sqlite3_index_orderby"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[{"name":"struct_sqlite3_index_orderby"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"struct_sqlite3_index_constraint_usage"}],"output":{"name":"self"}}],[11,"default","","",8,{"inputs":[{"name":"struct_sqlite3_index_constraint_usage"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"struct_sqlite3_vtab"}],"output":{"name":"self"}}],[11,"default","","",9,{"inputs":[{"name":"struct_sqlite3_vtab"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"struct_sqlite3_vtab_cursor"}],"output":{"name":"self"}}],[11,"default","","",10,{"inputs":[{"name":"struct_sqlite3_vtab_cursor"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"struct_sqlite3_mutex_methods"}],"output":{"name":"self"}}],[11,"default","","",11,{"inputs":[{"name":"struct_sqlite3_mutex_methods"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"struct_sqlite3_pcache_page"}],"output":{"name":"self"}}],[11,"default","","",12,{"inputs":[{"name":"struct_sqlite3_pcache_page"}],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"struct_sqlite3_pcache_methods2"}],"output":{"name":"self"}}],[11,"default","","",13,{"inputs":[{"name":"struct_sqlite3_pcache_methods2"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"struct_sqlite3_pcache_methods"}],"output":{"name":"self"}}],[11,"default","","",14,{"inputs":[{"name":"struct_sqlite3_pcache_methods"}],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"struct_sqlite3_rtree_geometry"}],"output":{"name":"self"}}],[11,"default","","",15,{"inputs":[{"name":"struct_sqlite3_rtree_geometry"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"struct_sqlite3_rtree_query_info"}],"output":{"name":"self"}}],[11,"default","","",16,{"inputs":[{"name":"struct_sqlite3_rtree_query_info"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"struct___va_list_tag"}],"output":{"name":"self"}}],[11,"default","","",17,{"inputs":[{"name":"struct___va_list_tag"}],"output":{"name":"self"}}],[6,"va_list","","",null,null],[6,"__gnuc_va_list","","",null,null],[6,"sqlite3","","",null,null],[6,"sqlite_int64","","",null,null],[6,"sqlite_uint64","","",null,null],[6,"sqlite3_int64","","",null,null],[6,"sqlite3_uint64","","",null,null],[6,"sqlite3_callback","","",null,null],[6,"sqlite3_file","","",null,null],[6,"sqlite3_io_methods","","",null,null],[6,"sqlite3_mutex","","",null,null],[6,"sqlite3_vfs","","",null,null],[6,"sqlite3_syscall_ptr","","",null,null],[6,"sqlite3_mem_methods","","",null,null],[6,"sqlite3_stmt","","",null,null],[6,"sqlite3_value","","",null,null],[6,"sqlite3_context","","",null,null],[6,"sqlite3_destructor_type","","",null,null],[6,"sqlite3_vtab","","",null,null],[6,"sqlite3_index_info","","",null,null],[6,"sqlite3_vtab_cursor","","",null,null],[6,"sqlite3_module","","",null,null],[6,"sqlite3_blob","","",null,null],[6,"sqlite3_mutex_methods","","",null,null],[6,"sqlite3_pcache","","",null,null],[6,"sqlite3_pcache_page","","",null,null],[6,"sqlite3_pcache_methods2","","",null,null],[6,"sqlite3_pcache_methods","","",null,null],[6,"sqlite3_backup","","",null,null],[6,"sqlite3_rtree_geometry","","",null,null],[6,"sqlite3_rtree_query_info","","",null,null],[6,"sqlite3_rtree_dbl","","",null,null],[6,"__builtin_va_list","","",null,null],[6,"__va_list_tag","","",null,null],[17,"SQLITE_OK","","",null,null],[17,"SQLITE_ERROR","","",null,null],[17,"SQLITE_INTERNAL","","",null,null],[17,"SQLITE_PERM","","",null,null],[17,"SQLITE_ABORT","","",null,null],[17,"SQLITE_BUSY","","",null,null],[17,"SQLITE_LOCKED","","",null,null],[17,"SQLITE_NOMEM","","",null,null],[17,"SQLITE_READONLY","","",null,null],[17,"SQLITE_INTERRUPT","","",null,null],[17,"SQLITE_IOERR","","",null,null],[17,"SQLITE_CORRUPT","","",null,null],[17,"SQLITE_NOTFOUND","","",null,null],[17,"SQLITE_FULL","","",null,null],[17,"SQLITE_CANTOPEN","","",null,null],[17,"SQLITE_PROTOCOL","","",null,null],[17,"SQLITE_EMPTY","","",null,null],[17,"SQLITE_SCHEMA","","",null,null],[17,"SQLITE_TOOBIG","","",null,null],[17,"SQLITE_CONSTRAINT","","",null,null],[17,"SQLITE_MISMATCH","","",null,null],[17,"SQLITE_MISUSE","","",null,null],[17,"SQLITE_NOLFS","","",null,null],[17,"SQLITE_AUTH","","",null,null],[17,"SQLITE_FORMAT","","",null,null],[17,"SQLITE_RANGE","","",null,null],[17,"SQLITE_NOTADB","","",null,null],[17,"SQLITE_NOTICE","","",null,null],[17,"SQLITE_WARNING","","",null,null],[17,"SQLITE_ROW","","",null,null],[17,"SQLITE_DONE","","",null,null],[17,"SQLITE_INTEGER","","",null,null],[17,"SQLITE_FLOAT","","",null,null],[17,"SQLITE_TEXT","","",null,null],[17,"SQLITE_BLOB","","",null,null],[17,"SQLITE_NULL","","",null,null]],"paths":[[3,"Struct_sqlite3_file"],[3,"Struct_sqlite3_io_methods"],[3,"Struct_sqlite3_vfs"],[3,"Struct_sqlite3_mem_methods"],[3,"Struct_sqlite3_module"],[3,"Struct_sqlite3_index_info"],[3,"Struct_sqlite3_index_constraint"],[3,"Struct_sqlite3_index_orderby"],[3,"Struct_sqlite3_index_constraint_usage"],[3,"Struct_sqlite3_vtab"],[3,"Struct_sqlite3_vtab_cursor"],[3,"Struct_sqlite3_mutex_methods"],[3,"Struct_sqlite3_pcache_page"],[3,"Struct_sqlite3_pcache_methods2"],[3,"Struct_sqlite3_pcache_methods"],[3,"Struct_sqlite3_rtree_geometry"],[3,"Struct_sqlite3_rtree_query_info"],[3,"Struct___va_list_tag"]]};
searchIndex['httparse'] = {"items":[[0,"","httparse","# httparse",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","THe response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","INvalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for\nparsing.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"status"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is\n`Partial`.",4,{"inputs":[{"name":"status"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"header"}],"output":{"name":"header"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"]]};
searchIndex['sha1'] = {"items":[[0,"","sha1","A minimal implementation of SHA1 for rust.",null,null],[3,"Sha1","","Represents a Sha1 hash object in memory.",null,null],[11,"clone","","",0,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"inputs":[{"name":"sha1"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"output","","Retrieve digest result.  The output must be large enough to\ncontain result (20 bytes).",0,null],[11,"digest","","Shortcut for getting `output` into a new vector.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"vec"}}],[11,"hexdigest","","Shortcut for getting a hex output of the vector.",0,{"inputs":[{"name":"sha1"}],"output":{"name":"string"}}]],"paths":[[3,"Sha1"]]};
searchIndex['language_tags'] = {"items":[[0,"","language_tags","Language tags can be used identify human languages, scripts e.g. Latin script, countries and\nother regions.",null,null],[3,"LanguageTag","","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",0,null],[12,"extlang","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED_IRREGULAR","","Contains the 17 irregular old language tags not matching the standard grammer of tags.",null,null],[17,"GRANDFATHERED_REGULAR","","Contains the 9 regular grandfathered tags having special semantics.",null,null],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"fmt","","",0,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","Matches language tags like described in\n[RFC4647#Extended filtering](https://tools.ietf.org/html/rfc4647#section-3.3.2)",0,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"from_str","","",0,{"inputs":[{"name":"languagetag"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag!","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex['memchr'] = {"items":[[0,"","memchr","This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null]],"paths":[]};
searchIndex['strsim'] = {"items":[[0,"","strsim","This library implements string similarity metrics. Currently includes\nHamming, Levenshtein, Jaro, and Jaro-Winkler.",null,null],[4,"StrSimError","","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"strsimerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"StrSimError"]]};
searchIndex['num_cpus'] = {"items":[[0,"","num_cpus","Replaces the deprecated functionality of std::os::num_cpus.",null,null],[5,"get","","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex['ansi_term'] = {"items":[[0,"","ansi_term","This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.",null,null],[3,"ANSIString","","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","",0,null],[13,"Red","","",0,null],[13,"Green","","",0,null],[13,"Yellow","","",0,null],[13,"Blue","","",0,null],[13,"Purple","","",0,null],[13,"Cyan","","",0,null],[13,"White","","",0,null],[13,"Fixed","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"ansistring"}],"output":{"name":"ansistring"}}],[11,"new","","Creates a new ANSI String with the given contents and style.",1,{"inputs":[{"name":"ansistring"},{"name":"str"},{"name":"style"}],"output":{"name":"ansistring"}}],[11,"fmt","","",1,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"colour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"colour"}],"output":{"name":"colour"}}],[11,"eq","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don't have to use Blue.normal() just\nto get blue text.",0,{"inputs":[{"name":"colour"},{"name":"str"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"style"}}],[11,"fmt","","",2,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Style with no differences.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",2,{"inputs":[{"name":"style"},{"name":"str"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"inputs":[{"name":"style"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"fmt","","",3,{"inputs":[{"name":"ansistrings"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Colour"],[3,"ANSIString"],[3,"Style"],[3,"ANSIStrings"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['unicase'] = {"items":[[0,"","unicase","# Case",null,null],[3,"UniCase","","Case Insensitive wrapper of strings.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"unicase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"unicase"}}],[11,"deref","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"s"}}],[11,"as_ref","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"unicase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"unicase"},{"name":"unicase"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"unicase"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"unicase"},{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"unicase"},{"name":"h"}],"output":null}]],"paths":[[3,"UniCase"]]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"flock","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['typeable'] = {"items":[[0,"","typeable","Exposes `Typeable`, which exposes the `get_type` method, which gives\nthe `TypeId` of any 'static type.",null,null],[8,"Typeable","","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"inputs":[{"name":"typeable"}],"output":{"name":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex['traitobject'] = {"items":[[0,"","traitobject","# traitobject",null,null],[5,"data","","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null]],"paths":[]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['lazy_static'] = {"items":[[0,"","lazy_static","A macro for declaring lazily evaluated statics.",null,null],[14,"lazy_static!","","",null,null]],"paths":[]};
searchIndex['matches'] = {"items":[[0,"","matches","",null,null],[14,"matches!","","",null,null],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null]],"paths":[]};
initSearch(searchIndex);
